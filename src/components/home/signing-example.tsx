// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project ca611bf9ae534859 "SignatureAPI", do not edit manually */
"use client";

// virtual:signing-example
/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Desktop' | 'Tablet' | 'Phone' // Variant
 * scrollSection?: undefined // Scroll Section
}} Props

 */
import { Fragment as Fragment4 } from "react";
import { ContextProviders } from "unframer";

// /:https://framer.com/m/signing-example-d8qj.js
import { jsx as _jsx5, jsxs as _jsxs2 } from "react/jsx-runtime";
import {
	addFonts as addFonts3,
	addPropertyControls as addPropertyControls4,
	ComponentViewportProvider as ComponentViewportProvider2,
	ControlType as ControlType7,
	cx as cx4,
	getFonts as getFonts2,
	getFontsFromSharedStyle,
	getLoadingLazyAtYPosition as getLoadingLazyAtYPosition2,
	Image as Image3,
	RichText as RichText2,
	SmartComponentScopedContainer as SmartComponentScopedContainer2,
	useComponentViewport as useComponentViewport3,
	useLocaleInfo as useLocaleInfo3,
	useVariantState as useVariantState3,
	withCSS as withCSS4,
	withVariantAppearEffect,
} from "unframer";
import {
	LayoutGroup as LayoutGroup3,
	motion as motion5,
	MotionConfigContext as MotionConfigContext3,
} from "unframer";
import * as React6 from "react";
import { useRef as useRef8 } from "react";

// /:https://framerusercontent.com/modules/YbkSqZ7STzW5WsMb1yan/RLfsHd78NBd0kbafA9hd/Lottie.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	useRef as useRef4,
	useCallback as useCallback3,
	useEffect as useEffect8,
} from "react";
import {
	motion,
	addPropertyControls,
	ControlType as ControlType4,
	RenderTarget as RenderTarget4,
} from "unframer";

// /:https://framerusercontent.com/modules/VTUDdizacRHpwbkOamr7/AykinQJbgwl92LvMGZwu/constants.js
import { ControlType } from "unframer";
var containerStyles = {
	position: "relative",
	width: "100%",
	height: "100%",
	display: "flex",
	justifyContent: "center",
	alignItems: "center",
};
var emptyStateStyle = {
	...containerStyles,
	borderRadius: 6,
	background: "rgba(136, 85, 255, 0.3)",
	color: "#85F",
	border: "1px dashed #85F",
	flexDirection: "column",
};
var defaultEvents = {
	onClick: {
		type: ControlType.EventHandler,
	},
	onMouseEnter: {
		type: ControlType.EventHandler,
	},
	onMouseLeave: {
		type: ControlType.EventHandler,
	},
};
var fontSizeOptions = {
	type: ControlType.Number,
	title: "Font Size",
	min: 2,
	max: 200,
	step: 1,
	displayStepper: true,
};
var fontControls = {
	font: {
		type: ControlType.Boolean,
		title: "Font",
		defaultValue: false,
		disabledTitle: "Default",
		enabledTitle: "Custom",
	},
	fontFamily: {
		type: ControlType.String,
		title: "Family",
		placeholder: "Inter",
		hidden: ({ font }) => !font,
	},
	fontWeight: {
		type: ControlType.Enum,
		title: "Weight",
		options: [100, 200, 300, 400, 500, 600, 700, 800, 900],
		optionTitles: [
			"Thin",
			"Extra-light",
			"Light",
			"Regular",
			"Medium",
			"Semi-bold",
			"Bold",
			"Extra-bold",
			"Black",
		],
		hidden: ({ font }) => !font,
	},
};

// /:https://framerusercontent.com/modules/D4TWeLfcxT6Tysr2BlYg/iZjmqdxVx1EOiM3k1FaW/useOnNavigationTargetChange.js
import { useIsInCurrentNavigationTarget } from "unframer";
import { useEffect } from "react";

// /:https://framerusercontent.com/modules/ExNgrA7EJTKUPpH6vIlN/eiOrSJ2Ab5M9jPCvVwUz/useConstant.js
import { useRef } from "react";
function useConstant(init) {
	const ref = useRef(null);
	if (ref.current === null) {
		ref.current = init();
	}
	return ref.current;
}

// /:https://framerusercontent.com/modules/D2Lz5CmnNVPZFFiZXalt/QaCzPbriZBfXWZIIycFI/colorFromToken.js
import { Color } from "unframer";

// /:https://framerusercontent.com/modules/3mKFSGQqKHV82uOV1eBc/5fbRLvOpxZC0JOXugvwm/isMotionValue.js
import { MotionValue } from "unframer";

// /:https://framerusercontent.com/modules/xDiQsqBGXzmMsv7AlEVy/uhunpMiNsbXxzjlXsg1y/useUniqueClassName.js
import * as React from "react";

// /:https://framerusercontent.com/modules/ETACN5BJyFTSo0VVDJfu/NHRqowOiXkF9UwOzczF7/variantUtils.js
import { ControlType as ControlType2 } from "unframer";

// /:https://framerusercontent.com/modules/eMBrwoqQK7h6mEeGQUH8/GuplvPJVjmxpk9zqOTcb/isBrowser.js
import { useMemo } from "react";

// /:https://framerusercontent.com/modules/v9AWX2URmiYsHf7GbctE/XxKAZ9KlhWqf5x1JMyyF/useOnChange.js
import { useEffect as useEffect3 } from "react";

// /:https://framerusercontent.com/modules/kNDwabfjDEb3vUxkQlZS/fSIr3AOAYbGlfSPgXpYu/useAutoMotionValue.js
import { useCallback, useEffect as useEffect4, useRef as useRef2 } from "react";
import { motionValue, animate, RenderTarget } from "unframer";

// /:https://framerusercontent.com/modules/cuQH4dmpDnV8YK1mSgQX/KqRXqunFjE6ufhpc7ZRu/useFontControls.js
import { fontStore } from "unframer";
import { useEffect as useEffect5 } from "react";

// /:https://framerusercontent.com/modules/afBE9Yx1W6bY5q32qPxe/m3q7puE2tbo1S2C0s0CT/useRenderTarget.js
import { useMemo as useMemo2 } from "react";
import { RenderTarget as RenderTarget2 } from "unframer";

// /:https://framerusercontent.com/modules/zGkoP8tPDCkoBzMdt5uq/0zFSjxIYliHxrQQnryFX/useControlledState.js
import * as React2 from "react";

// /:https://framerusercontent.com/modules/5SM58HxZHxjjv7aLMOgQ/WXz9i6mVki0bBCrKdqB3/propUtils.js
import { useMemo as useMemo3 } from "react";
import { ControlType as ControlType3 } from "unframer";
var borderRadiusControl = {
	borderRadius: {
		title: "Radius",
		type: ControlType3.FusedNumber,
		toggleKey: "isMixedBorderRadius",
		toggleTitles: ["Radius", "Radius per corner"],
		valueKeys: [
			"topLeftRadius",
			"topRightRadius",
			"bottomRightRadius",
			"bottomLeftRadius",
		],
		valueLabels: ["TL", "TR", "BR", "BL"],
		min: 0,
	},
};
var paddingControl = {
	padding: {
		type: ControlType3.FusedNumber,
		toggleKey: "paddingPerSide",
		toggleTitles: ["Padding", "Padding per side"],
		valueKeys: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
		valueLabels: ["T", "R", "B", "L"],
		min: 0,
		title: "Padding",
	},
};

// /:https://framer.com/m/framer/useAutoMotionValue.js@0.3.0
import {
	useCallback as useCallback2,
	useEffect as useEffect7,
	useRef as useRef3,
} from "react";
import {
	motionValue as motionValue2,
	animate as animate2,
	RenderTarget as RenderTarget3,
} from "unframer";

// /:https://framerusercontent.com/modules/3mKFSGQqKHV82uOV1eBc/TbXI1XaZFNevVKcgIt7G/isMotionValue.js
import { MotionValue as MotionValue2 } from "unframer";
var isMotionValue2 = (v) => v instanceof MotionValue2;

// /:https://framer.com/m/framer/useAutoMotionValue.js@0.3.0
function useAutoMotionValue2(inputValue, options) {
	const optionsRef = useRef3(options);
	const animation = useRef3();
	const didInitialMount = useRef3(false);
	const isOnCanvas = RenderTarget3.current() === RenderTarget3.canvas;
	const onChangeDeps = (
		options === null || options === void 0
			? void 0
			: options.onChangeDeps
	)
		? options.onChangeDeps
		: [];
	const onChange = useCallback2(
		options === null || options === void 0 ? void 0 : options.onChange,
		[...onChangeDeps],
	);
	const transformer = useCallback2((value2) => {
		var ref;
		return (
			(ref = optionsRef.current) === null || ref === void 0
				? void 0
				: ref.transform
		)
			? optionsRef.current.transform(value2)
			: value2;
	}, []);
	const value1 = useConstant(() =>
		isMotionValue2(inputValue)
			? inputValue
			: motionValue2(transformer(inputValue)),
	);
	useEffect7(() => {
		if (!isMotionValue2(inputValue) && didInitialMount.current) {
			var ref, ref1;
			const newValue = transformer(inputValue);
			(ref = animation.current) === null || ref === void 0
				? void 0
				: ref.stop();
			if (onChange) onChange(newValue, value1);
			if (
				((ref1 = optionsRef.current) === null || ref1 === void 0
					? void 0
					: ref1.animate) &&
				!isOnCanvas
			) {
				var ref2;
				animation.current = animate2(
					value1,
					newValue,
					(ref2 = optionsRef.current) === null || ref2 === void 0
						? void 0
						: ref2.transition,
				);
			} else {
				value1.set(newValue);
			}
		}
		didInitialMount.current = true;
	}, [inputValue, ...onChangeDeps]);
	return value1;
}

// /:https://jspm.dev/npm:lottie-web@5.7.8!cjs
var __unframerNavigator = typeof window !== "undefined" ? navigator : void 0;
var _global =
	typeof globalThis !== "undefined"
		? globalThis
		: typeof self !== "undefined"
			? self
			: globalThis;
var exports = {};
typeof __unframerNavigator !== "undefined" &&
	(function (root, factory) {
		if (exports) {
			exports = factory(root);
		} else {
			root.lottie = factory(root);
			root.bodymovin = root.lottie;
		}
	})(window || {}, function (window) {
		"use strict";

		var svgNS = "http://www.w3.org/2000/svg";
		var locationHref = "";
		var initialDefaultFrame = -999999;
		var subframeEnabled = true;
		var expressionsPlugin;
		var isSafari = /^((?!chrome|android).)*safari/i.test(
			__unframerNavigator.userAgent,
		);
		var cachedColors = {};
		var bmRnd;
		var bmPow = Math.pow;
		var bmSqrt = Math.sqrt;
		var bmFloor = Math.floor;
		var bmMax = Math.max;
		var bmMin = Math.min;
		var BMMath = {};
		(function () {
			var propertyNames = [
				"abs",
				"acos",
				"acosh",
				"asin",
				"asinh",
				"atan",
				"atanh",
				"atan2",
				"ceil",
				"cbrt",
				"expm1",
				"clz32",
				"cos",
				"cosh",
				"exp",
				"floor",
				"fround",
				"hypot",
				"imul",
				"log",
				"log1p",
				"log2",
				"log10",
				"max",
				"min",
				"pow",
				"random",
				"round",
				"sign",
				"sin",
				"sinh",
				"sqrt",
				"tan",
				"tanh",
				"trunc",
				"E",
				"LN10",
				"LN2",
				"LOG10E",
				"LOG2E",
				"PI",
				"SQRT1_2",
				"SQRT2",
			];
			var i;
			var len = propertyNames.length;
			for (i = 0; i < len; i += 1) {
				BMMath[propertyNames[i]] = Math[propertyNames[i]];
			}
		})();
		function ProjectInterface() {
			return {};
		}
		BMMath.random = Math.random;
		BMMath.abs = function (val2) {
			var tOfVal = typeof val2;
			if (tOfVal === "object" && val2.length) {
				var absArr = createSizedArray(val2.length);
				var i;
				var len = val2.length;
				for (i = 0; i < len; i += 1) {
					absArr[i] = Math.abs(val2[i]);
				}
				return absArr;
			}
			return Math.abs(val2);
		};
		var defaultCurveSegments = 150;
		var degToRads = Math.PI / 180;
		var roundCorner = 0.5519;
		function roundValues(flag) {
			if (flag) {
				bmRnd = Math.round;
			} else {
				bmRnd = function (val2) {
					return val2;
				};
			}
		}
		roundValues(false);
		function styleDiv(element) {
			element.style.position = "absolute";
			element.style.top = 0;
			element.style.left = 0;
			element.style.display = "block";
			element.style.transformOrigin = "0 0";
			element.style.webkitTransformOrigin = "0 0";
			element.style.backfaceVisibility = "visible";
			element.style.webkitBackfaceVisibility = "visible";
			element.style.transformStyle = "preserve-3d";
			element.style.webkitTransformStyle = "preserve-3d";
			element.style.mozTransformStyle = "preserve-3d";
		}
		function BMEnterFrameEvent(type, currentTime, totalTime, frameMultiplier) {
			(this || _global).type = type;
			(this || _global).currentTime = currentTime;
			(this || _global).totalTime = totalTime;
			(this || _global).direction = frameMultiplier < 0 ? -1 : 1;
		}
		function BMCompleteEvent(type, frameMultiplier) {
			(this || _global).type = type;
			(this || _global).direction = frameMultiplier < 0 ? -1 : 1;
		}
		function BMCompleteLoopEvent(
			type,
			totalLoops,
			currentLoop,
			frameMultiplier,
		) {
			(this || _global).type = type;
			(this || _global).currentLoop = currentLoop;
			(this || _global).totalLoops = totalLoops;
			(this || _global).direction = frameMultiplier < 0 ? -1 : 1;
		}
		function BMSegmentStartEvent(type, firstFrame, totalFrames) {
			(this || _global).type = type;
			(this || _global).firstFrame = firstFrame;
			(this || _global).totalFrames = totalFrames;
		}
		function BMDestroyEvent(type, target) {
			(this || _global).type = type;
			(this || _global).target = target;
		}
		function BMRenderFrameErrorEvent(nativeError, currentTime) {
			(this || _global).type = "renderFrameError";
			(this || _global).nativeError = nativeError;
			(this || _global).currentTime = currentTime;
		}
		function BMConfigErrorEvent(nativeError) {
			(this || _global).type = "configError";
			(this || _global).nativeError = nativeError;
		}
		function BMAnimationConfigErrorEvent(type, nativeError) {
			(this || _global).type = type;
			(this || _global).nativeError = nativeError;
		}
		var createElementID = /* @__PURE__ */ (function () {
			var _count = 0;
			return function createID() {
				_count += 1;
				return "__lottie_element_" + _count;
			};
		})();
		function HSVtoRGB(h, s, v) {
			var r;
			var g;
			var b;
			var i;
			var f;
			var p;
			var q;
			var t;
			i = Math.floor(h * 6);
			f = h * 6 - i;
			p = v * (1 - s);
			q = v * (1 - f * s);
			t = v * (1 - (1 - f) * s);
			switch (i % 6) {
				case 0:
					r = v;
					g = t;
					b = p;
					break;
				case 1:
					r = q;
					g = v;
					b = p;
					break;
				case 2:
					r = p;
					g = v;
					b = t;
					break;
				case 3:
					r = p;
					g = q;
					b = v;
					break;
				case 4:
					r = t;
					g = p;
					b = v;
					break;
				case 5:
					r = v;
					g = p;
					b = q;
					break;
				default:
					break;
			}
			return [r, g, b];
		}
		function RGBtoHSV(r, g, b) {
			var max = Math.max(r, g, b);
			var min = Math.min(r, g, b);
			var d = max - min;
			var h;
			var s = max === 0 ? 0 : d / max;
			var v = max / 255;
			switch (max) {
				case min:
					h = 0;
					break;
				case r:
					h = g - b + d * (g < b ? 6 : 0);
					h /= 6 * d;
					break;
				case g:
					h = b - r + d * 2;
					h /= 6 * d;
					break;
				case b:
					h = r - g + d * 4;
					h /= 6 * d;
					break;
				default:
					break;
			}
			return [h, s, v];
		}
		function addSaturationToRGB(color, offset) {
			var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
			hsv[1] += offset;
			if (hsv[1] > 1) {
				hsv[1] = 1;
			} else if (hsv[1] <= 0) {
				hsv[1] = 0;
			}
			return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
		}
		function addBrightnessToRGB(color, offset) {
			var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
			hsv[2] += offset;
			if (hsv[2] > 1) {
				hsv[2] = 1;
			} else if (hsv[2] < 0) {
				hsv[2] = 0;
			}
			return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
		}
		function addHueToRGB(color, offset) {
			var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
			hsv[0] += offset / 360;
			if (hsv[0] > 1) {
				hsv[0] -= 1;
			} else if (hsv[0] < 0) {
				hsv[0] += 1;
			}
			return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
		}
		var rgbToHex = (function () {
			var colorMap = [];
			var i;
			var hex;
			for (i = 0; i < 256; i += 1) {
				hex = i.toString(16);
				colorMap[i] = hex.length === 1 ? "0" + hex : hex;
			}
			return function (r, g, b) {
				if (r < 0) {
					r = 0;
				}
				if (g < 0) {
					g = 0;
				}
				if (b < 0) {
					b = 0;
				}
				return "#" + colorMap[r] + colorMap[g] + colorMap[b];
			};
		})();
		function BaseEvent() {}
		BaseEvent.prototype = {
			triggerEvent: function (eventName, args) {
				if ((this || _global)._cbs[eventName]) {
					var len = (this || _global)._cbs[eventName].length;
					for (var i = 0; i < len; i += 1) {
						(this || _global)._cbs[eventName][i](args);
					}
				}
			},
			addEventListener: function (eventName, callback) {
				if (!(this || _global)._cbs[eventName]) {
					(this || _global)._cbs[eventName] = [];
				}
				(this || _global)._cbs[eventName].push(callback);
				return function () {
					this.removeEventListener(eventName, callback);
				}.bind(this || _global);
			},
			removeEventListener: function (eventName, callback) {
				if (!callback) {
					(this || _global)._cbs[eventName] = null;
				} else if ((this || _global)._cbs[eventName]) {
					var i = 0;
					var len = (this || _global)._cbs[eventName].length;
					while (i < len) {
						if ((this || _global)._cbs[eventName][i] === callback) {
							(this || _global)._cbs[eventName].splice(i, 1);
							i -= 1;
							len -= 1;
						}
						i += 1;
					}
					if (!(this || _global)._cbs[eventName].length) {
						(this || _global)._cbs[eventName] = null;
					}
				}
			},
		};
		var createTypedArray = (function () {
			function createRegularArray(type, len) {
				var i = 0;
				var arr = [];
				var value2;
				switch (type) {
					case "int16":
					case "uint8c":
						value2 = 1;
						break;
					default:
						value2 = 1.1;
						break;
				}
				for (i = 0; i < len; i += 1) {
					arr.push(value2);
				}
				return arr;
			}
			function createTypedArrayFactory(type, len) {
				if (type === "float32") {
					return new Float32Array(len);
				}
				if (type === "int16") {
					return new Int16Array(len);
				}
				if (type === "uint8c") {
					return new Uint8ClampedArray(len);
				}
				return createRegularArray(type, len);
			}
			if (
				typeof Uint8ClampedArray === "function" &&
				typeof Float32Array === "function"
			) {
				return createTypedArrayFactory;
			}
			return createRegularArray;
		})();
		function createSizedArray(len) {
			return Array.apply(null, {
				length: len,
			});
		}
		function createNS(type) {
			return document.createElementNS(svgNS, type);
		}
		function createTag(type) {
			return document.createElement(type);
		}
		function DynamicPropertyContainer() {}
		DynamicPropertyContainer.prototype = {
			addDynamicProperty: function (prop) {
				if ((this || _global).dynamicProperties.indexOf(prop) === -1) {
					(this || _global).dynamicProperties.push(prop);
					(this || _global).container.addDynamicProperty(this || _global);
					(this || _global)._isAnimated = true;
				}
			},
			iterateDynamicProperties: function () {
				(this || _global)._mdf = false;
				var i;
				var len = (this || _global).dynamicProperties.length;
				for (i = 0; i < len; i += 1) {
					(this || _global).dynamicProperties[i].getValue();
					if ((this || _global).dynamicProperties[i]._mdf) {
						(this || _global)._mdf = true;
					}
				}
			},
			initDynamicPropertyContainer: function (container) {
				(this || _global).container = container;
				(this || _global).dynamicProperties = [];
				(this || _global)._mdf = false;
				(this || _global)._isAnimated = false;
			},
		};
		var getBlendMode = /* @__PURE__ */ (function () {
			var blendModeEnums = {
				0: "source-over",
				1: "multiply",
				2: "screen",
				3: "overlay",
				4: "darken",
				5: "lighten",
				6: "color-dodge",
				7: "color-burn",
				8: "hard-light",
				9: "soft-light",
				10: "difference",
				11: "exclusion",
				12: "hue",
				13: "saturation",
				14: "color",
				15: "luminosity",
			};
			return function (mode) {
				return blendModeEnums[mode] || "";
			};
		})();
		var Matrix = /* @__PURE__ */ (function () {
			var _cos = Math.cos;
			var _sin = Math.sin;
			var _tan = Math.tan;
			var _rnd = Math.round;
			function reset() {
				(this || _global).props[0] = 1;
				(this || _global).props[1] = 0;
				(this || _global).props[2] = 0;
				(this || _global).props[3] = 0;
				(this || _global).props[4] = 0;
				(this || _global).props[5] = 1;
				(this || _global).props[6] = 0;
				(this || _global).props[7] = 0;
				(this || _global).props[8] = 0;
				(this || _global).props[9] = 0;
				(this || _global).props[10] = 1;
				(this || _global).props[11] = 0;
				(this || _global).props[12] = 0;
				(this || _global).props[13] = 0;
				(this || _global).props[14] = 0;
				(this || _global).props[15] = 1;
				return this || _global;
			}
			function rotate(angle) {
				if (angle === 0) {
					return this || _global;
				}
				var mCos = _cos(angle);
				var mSin = _sin(angle);
				return this._t(
					mCos,
					-mSin,
					0,
					0,
					mSin,
					mCos,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
				);
			}
			function rotateX(angle) {
				if (angle === 0) {
					return this || _global;
				}
				var mCos = _cos(angle);
				var mSin = _sin(angle);
				return this._t(
					1,
					0,
					0,
					0,
					0,
					mCos,
					-mSin,
					0,
					0,
					mSin,
					mCos,
					0,
					0,
					0,
					0,
					1,
				);
			}
			function rotateY(angle) {
				if (angle === 0) {
					return this || _global;
				}
				var mCos = _cos(angle);
				var mSin = _sin(angle);
				return this._t(
					mCos,
					0,
					mSin,
					0,
					0,
					1,
					0,
					0,
					-mSin,
					0,
					mCos,
					0,
					0,
					0,
					0,
					1,
				);
			}
			function rotateZ(angle) {
				if (angle === 0) {
					return this || _global;
				}
				var mCos = _cos(angle);
				var mSin = _sin(angle);
				return this._t(
					mCos,
					-mSin,
					0,
					0,
					mSin,
					mCos,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
				);
			}
			function shear(sx, sy) {
				return this._t(1, sy, sx, 1, 0, 0);
			}
			function skew(ax, ay) {
				return this.shear(_tan(ax), _tan(ay));
			}
			function skewFromAxis(ax, angle) {
				var mCos = _cos(angle);
				var mSin = _sin(angle);
				return this._t(
					mCos,
					mSin,
					0,
					0,
					-mSin,
					mCos,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
				)
					._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
					._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
			}
			function scale2(sx, sy, sz) {
				if (!sz && sz !== 0) {
					sz = 1;
				}
				if (sx === 1 && sy === 1 && sz === 1) {
					return this || _global;
				}
				return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
			}
			function setTransform(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
				(this || _global).props[0] = a;
				(this || _global).props[1] = b;
				(this || _global).props[2] = c;
				(this || _global).props[3] = d;
				(this || _global).props[4] = e;
				(this || _global).props[5] = f;
				(this || _global).props[6] = g;
				(this || _global).props[7] = h;
				(this || _global).props[8] = i;
				(this || _global).props[9] = j;
				(this || _global).props[10] = k;
				(this || _global).props[11] = l;
				(this || _global).props[12] = m;
				(this || _global).props[13] = n;
				(this || _global).props[14] = o;
				(this || _global).props[15] = p;
				return this || _global;
			}
			function translate(tx, ty, tz) {
				tz = tz || 0;
				if (tx !== 0 || ty !== 0 || tz !== 0) {
					return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);
				}
				return this || _global;
			}
			function transform2(
				a2,
				b2,
				c2,
				d2,
				e2,
				f2,
				g2,
				h2,
				i2,
				j2,
				k2,
				l2,
				m2,
				n2,
				o2,
				p2,
			) {
				var _p = (this || _global).props;
				if (
					a2 === 1 &&
					b2 === 0 &&
					c2 === 0 &&
					d2 === 0 &&
					e2 === 0 &&
					f2 === 1 &&
					g2 === 0 &&
					h2 === 0 &&
					i2 === 0 &&
					j2 === 0 &&
					k2 === 1 &&
					l2 === 0
				) {
					_p[12] = _p[12] * a2 + _p[15] * m2;
					_p[13] = _p[13] * f2 + _p[15] * n2;
					_p[14] = _p[14] * k2 + _p[15] * o2;
					_p[15] *= p2;
					(this || _global)._identityCalculated = false;
					return this || _global;
				}
				var a1 = _p[0];
				var b1 = _p[1];
				var c1 = _p[2];
				var d1 = _p[3];
				var e1 = _p[4];
				var f1 = _p[5];
				var g1 = _p[6];
				var h1 = _p[7];
				var i1 = _p[8];
				var j1 = _p[9];
				var k1 = _p[10];
				var l1 = _p[11];
				var m1 = _p[12];
				var n1 = _p[13];
				var o1 = _p[14];
				var p1 = _p[15];
				_p[0] = a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2;
				_p[1] = a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2;
				_p[2] = a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2;
				_p[3] = a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2;
				_p[4] = e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2;
				_p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2;
				_p[6] = e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2;
				_p[7] = e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2;
				_p[8] = i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2;
				_p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2;
				_p[10] = i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2;
				_p[11] = i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2;
				_p[12] = m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2;
				_p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2;
				_p[14] = m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2;
				_p[15] = m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2;
				(this || _global)._identityCalculated = false;
				return this || _global;
			}
			function isIdentity() {
				if (!(this || _global)._identityCalculated) {
					(this || _global)._identity = !(
						(this || _global).props[0] !== 1 ||
						(this || _global).props[1] !== 0 ||
						(this || _global).props[2] !== 0 ||
						(this || _global).props[3] !== 0 ||
						(this || _global).props[4] !== 0 ||
						(this || _global).props[5] !== 1 ||
						(this || _global).props[6] !== 0 ||
						(this || _global).props[7] !== 0 ||
						(this || _global).props[8] !== 0 ||
						(this || _global).props[9] !== 0 ||
						(this || _global).props[10] !== 1 ||
						(this || _global).props[11] !== 0 ||
						(this || _global).props[12] !== 0 ||
						(this || _global).props[13] !== 0 ||
						(this || _global).props[14] !== 0 ||
						(this || _global).props[15] !== 1
					);
					(this || _global)._identityCalculated = true;
				}
				return (this || _global)._identity;
			}
			function equals(matr) {
				var i = 0;
				while (i < 16) {
					if (matr.props[i] !== (this || _global).props[i]) {
						return false;
					}
					i += 1;
				}
				return true;
			}
			function clone(matr) {
				var i;
				for (i = 0; i < 16; i += 1) {
					matr.props[i] = (this || _global).props[i];
				}
				return matr;
			}
			function cloneFromProps(props) {
				var i;
				for (i = 0; i < 16; i += 1) {
					(this || _global).props[i] = props[i];
				}
			}
			function applyToPoint(x, y, z) {
				return {
					x:
						x * (this || _global).props[0] +
						y * (this || _global).props[4] +
						z * (this || _global).props[8] +
						(this || _global).props[12],
					y:
						x * (this || _global).props[1] +
						y * (this || _global).props[5] +
						z * (this || _global).props[9] +
						(this || _global).props[13],
					z:
						x * (this || _global).props[2] +
						y * (this || _global).props[6] +
						z * (this || _global).props[10] +
						(this || _global).props[14],
				};
			}
			function applyToX(x, y, z) {
				return (
					x * (this || _global).props[0] +
					y * (this || _global).props[4] +
					z * (this || _global).props[8] +
					(this || _global).props[12]
				);
			}
			function applyToY(x, y, z) {
				return (
					x * (this || _global).props[1] +
					y * (this || _global).props[5] +
					z * (this || _global).props[9] +
					(this || _global).props[13]
				);
			}
			function applyToZ(x, y, z) {
				return (
					x * (this || _global).props[2] +
					y * (this || _global).props[6] +
					z * (this || _global).props[10] +
					(this || _global).props[14]
				);
			}
			function getInverseMatrix() {
				var determinant =
					(this || _global).props[0] * (this || _global).props[5] -
					(this || _global).props[1] * (this || _global).props[4];
				var a = (this || _global).props[5] / determinant;
				var b = -(this || _global).props[1] / determinant;
				var c = -(this || _global).props[4] / determinant;
				var d = (this || _global).props[0] / determinant;
				var e =
					((this || _global).props[4] * (this || _global).props[13] -
						(this || _global).props[5] * (this || _global).props[12]) /
					determinant;
				var f =
					-(
						(this || _global).props[0] * (this || _global).props[13] -
						(this || _global).props[1] * (this || _global).props[12]
					) / determinant;
				var inverseMatrix = new Matrix();
				inverseMatrix.props[0] = a;
				inverseMatrix.props[1] = b;
				inverseMatrix.props[4] = c;
				inverseMatrix.props[5] = d;
				inverseMatrix.props[12] = e;
				inverseMatrix.props[13] = f;
				return inverseMatrix;
			}
			function inversePoint(pt) {
				var inverseMatrix = this.getInverseMatrix();
				return inverseMatrix.applyToPointArray(pt[0], pt[1], pt[2] || 0);
			}
			function inversePoints(pts) {
				var i;
				var len = pts.length;
				var retPts = [];
				for (i = 0; i < len; i += 1) {
					retPts[i] = inversePoint(pts[i]);
				}
				return retPts;
			}
			function applyToTriplePoints(pt1, pt2, pt3) {
				var arr = createTypedArray("float32", 6);
				if (this.isIdentity()) {
					arr[0] = pt1[0];
					arr[1] = pt1[1];
					arr[2] = pt2[0];
					arr[3] = pt2[1];
					arr[4] = pt3[0];
					arr[5] = pt3[1];
				} else {
					var p0 = (this || _global).props[0];
					var p1 = (this || _global).props[1];
					var p4 = (this || _global).props[4];
					var p5 = (this || _global).props[5];
					var p12 = (this || _global).props[12];
					var p13 = (this || _global).props[13];
					arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
					arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
					arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
					arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
					arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
					arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
				}
				return arr;
			}
			function applyToPointArray(x, y, z) {
				var arr;
				if (this.isIdentity()) {
					arr = [x, y, z];
				} else {
					arr = [
						x * (this || _global).props[0] +
							y * (this || _global).props[4] +
							z * (this || _global).props[8] +
							(this || _global).props[12],
						x * (this || _global).props[1] +
							y * (this || _global).props[5] +
							z * (this || _global).props[9] +
							(this || _global).props[13],
						x * (this || _global).props[2] +
							y * (this || _global).props[6] +
							z * (this || _global).props[10] +
							(this || _global).props[14],
					];
				}
				return arr;
			}
			function applyToPointStringified(x, y) {
				if (this.isIdentity()) {
					return x + "," + y;
				}
				var _p = (this || _global).props;
				return (
					Math.round((x * _p[0] + y * _p[4] + _p[12]) * 100) / 100 +
					"," +
					Math.round((x * _p[1] + y * _p[5] + _p[13]) * 100) / 100
				);
			}
			function toCSS() {
				var i = 0;
				var props = (this || _global).props;
				var cssValue = "matrix3d(";
				var v = 1e4;
				while (i < 16) {
					cssValue += _rnd(props[i] * v) / v;
					cssValue += i === 15 ? ")" : ",";
					i += 1;
				}
				return cssValue;
			}
			function roundMatrixProperty(val2) {
				var v = 1e4;
				if ((val2 < 1e-6 && val2 > 0) || (val2 > -1e-6 && val2 < 0)) {
					return _rnd(val2 * v) / v;
				}
				return val2;
			}
			function to2dCSS() {
				var props = (this || _global).props;
				var _a = roundMatrixProperty(props[0]);
				var _b = roundMatrixProperty(props[1]);
				var _c = roundMatrixProperty(props[4]);
				var _d = roundMatrixProperty(props[5]);
				var _e = roundMatrixProperty(props[12]);
				var _f = roundMatrixProperty(props[13]);
				return (
					"matrix(" +
					_a +
					"," +
					_b +
					"," +
					_c +
					"," +
					_d +
					"," +
					_e +
					"," +
					_f +
					")"
				);
			}
			return function () {
				(this || _global).reset = reset;
				(this || _global).rotate = rotate;
				(this || _global).rotateX = rotateX;
				(this || _global).rotateY = rotateY;
				(this || _global).rotateZ = rotateZ;
				(this || _global).skew = skew;
				(this || _global).skewFromAxis = skewFromAxis;
				(this || _global).shear = shear;
				(this || _global).scale = scale2;
				(this || _global).setTransform = setTransform;
				(this || _global).translate = translate;
				(this || _global).transform = transform2;
				(this || _global).applyToPoint = applyToPoint;
				(this || _global).applyToX = applyToX;
				(this || _global).applyToY = applyToY;
				(this || _global).applyToZ = applyToZ;
				(this || _global).applyToPointArray = applyToPointArray;
				(this || _global).applyToTriplePoints = applyToTriplePoints;
				(this || _global).applyToPointStringified = applyToPointStringified;
				(this || _global).toCSS = toCSS;
				(this || _global).to2dCSS = to2dCSS;
				(this || _global).clone = clone;
				(this || _global).cloneFromProps = cloneFromProps;
				(this || _global).equals = equals;
				(this || _global).inversePoints = inversePoints;
				(this || _global).inversePoint = inversePoint;
				(this || _global).getInverseMatrix = getInverseMatrix;
				(this || _global)._t = (this || _global).transform;
				(this || _global).isIdentity = isIdentity;
				(this || _global)._identity = true;
				(this || _global)._identityCalculated = false;
				(this || _global).props = createTypedArray("float32", 16);
				this.reset();
			};
		})();
		(function (pool, math) {
			var global2 = this || _global,
				width2 = 256,
				chunks = 6,
				digits = 52,
				rngname = "random",
				startdenom = math.pow(width2, chunks),
				significance = math.pow(2, digits),
				overflow = significance * 2,
				mask22 = width2 - 1,
				nodecrypto;
			function seedrandom(seed, options, callback) {
				var key2 = [];
				options =
					options === true
						? {
								entropy: true,
							}
						: options || {};
				var shortseed = mixkey(
					flatten(
						options.entropy
							? [seed, tostring(pool)]
							: seed === null
								? autoseed()
								: seed,
						3,
					),
					key2,
				);
				var arc4 = new ARC4(key2);
				var prng = function () {
					var n = arc4.g(chunks),
						d = startdenom,
						x = 0;
					while (n < significance) {
						n = (n + x) * width2;
						d *= width2;
						x = arc4.g(1);
					}
					while (n >= overflow) {
						n /= 2;
						d /= 2;
						x >>>= 1;
					}
					return (n + x) / d;
				};
				prng.int32 = function () {
					return arc4.g(4) | 0;
				};
				prng.quick = function () {
					return arc4.g(4) / 4294967296;
				};
				prng.double = prng;
				mixkey(tostring(arc4.S), pool);
				return (
					options.pass ||
					callback ||
					function (prng2, seed2, is_math_call, state) {
						if (state) {
							if (state.S) {
								copy(state, arc4);
							}
							prng2.state = function () {
								return copy(arc4, {});
							};
						}
						if (is_math_call) {
							math[rngname] = prng2;
							return seed2;
						} else return prng2;
					}
				)(
					prng,
					shortseed,
					"global" in options ? options.global : (this || _global) == math,
					options.state,
				);
			}
			math["seed" + rngname] = seedrandom;
			function ARC4(key2) {
				var t,
					keylen = key2.length,
					me = this || _global,
					i = 0,
					j = (me.i = me.j = 0),
					s = (me.S = []);
				if (!keylen) {
					key2 = [keylen++];
				}
				while (i < width2) {
					s[i] = i++;
				}
				for (i = 0; i < width2; i++) {
					s[i] = s[(j = mask22 & (j + key2[i % keylen] + (t = s[i])))];
					s[j] = t;
				}
				me.g = function (count) {
					var t2,
						r = 0,
						i2 = me.i,
						j2 = me.j,
						s2 = me.S;
					while (count--) {
						t2 = s2[(i2 = mask22 & (i2 + 1))];
						r =
							r * width2 +
							s2[
								mask22 &
									((s2[i2] = s2[(j2 = mask22 & (j2 + t2))]) + (s2[j2] = t2))
							];
					}
					me.i = i2;
					me.j = j2;
					return r;
				};
			}
			function copy(f, t) {
				t.i = f.i;
				t.j = f.j;
				t.S = f.S.slice();
				return t;
			}
			function flatten(obj, depth) {
				var result = [],
					typ = typeof obj,
					prop;
				if (depth && typ == "object") {
					for (prop in obj) {
						try {
							result.push(flatten(obj[prop], depth - 1));
						} catch (e) {}
					}
				}
				return result.length ? result : typ == "string" ? obj : obj + "\0";
			}
			function mixkey(seed, key2) {
				var stringseed = seed + "",
					smear,
					j = 0;
				while (j < stringseed.length) {
					key2[mask22 & j] =
						mask22 &
						((smear ^= key2[mask22 & j] * 19) + stringseed.charCodeAt(j++));
				}
				return tostring(key2);
			}
			function autoseed() {
				try {
					if (nodecrypto) {
						return tostring(nodecrypto.randomBytes(width2));
					}
					var out = new Uint8Array(width2);
					(global2.crypto || global2.msCrypto).getRandomValues(out);
					return tostring(out);
				} catch (e) {
					var browser = global2.navigator,
						plugins = browser && browser.plugins;
					return [
						+(/* @__PURE__ */ new Date()),
						global2,
						plugins,
						global2.screen,
						tostring(pool),
					];
				}
			}
			function tostring(a) {
				return String.fromCharCode.apply(0, a);
			}
			mixkey(math.random(), pool);
		})(
			[],
			// pool: entropy pool starts empty
			BMMath,
			// math: package containing random, pow, and seedrandom
		);
		var BezierFactory = (function () {
			var ob2 = {};
			ob2.getBezierEasing = getBezierEasing;
			var beziers = {};
			function getBezierEasing(a, b, c, d, nm) {
				var str =
					nm || ("bez_" + a + "_" + b + "_" + c + "_" + d).replace(/\./g, "p");
				if (beziers[str]) {
					return beziers[str];
				}
				var bezEasing = new BezierEasing([a, b, c, d]);
				beziers[str] = bezEasing;
				return bezEasing;
			}
			var NEWTON_ITERATIONS = 4;
			var NEWTON_MIN_SLOPE = 1e-3;
			var SUBDIVISION_PRECISION = 1e-7;
			var SUBDIVISION_MAX_ITERATIONS = 10;
			var kSplineTableSize = 11;
			var kSampleStepSize = 1 / (kSplineTableSize - 1);
			var float32ArraySupported = typeof Float32Array === "function";
			function A(aA1, aA2) {
				return 1 - 3 * aA2 + 3 * aA1;
			}
			function B(aA1, aA2) {
				return 3 * aA2 - 6 * aA1;
			}
			function C(aA1) {
				return 3 * aA1;
			}
			function calcBezier(aT, aA1, aA2) {
				return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
			}
			function getSlope(aT, aA1, aA2) {
				return 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1);
			}
			function binarySubdivide(aX, aA, aB, mX1, mX2) {
				var currentX,
					currentT,
					i = 0;
				do {
					currentT = aA + (aB - aA) / 2;
					currentX = calcBezier(currentT, mX1, mX2) - aX;
					if (currentX > 0) {
						aB = currentT;
					} else {
						aA = currentT;
					}
				} while (
					Math.abs(currentX) > SUBDIVISION_PRECISION &&
					++i < SUBDIVISION_MAX_ITERATIONS
				);
				return currentT;
			}
			function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
				for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
					var currentSlope = getSlope(aGuessT, mX1, mX2);
					if (currentSlope === 0) return aGuessT;
					var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
					aGuessT -= currentX / currentSlope;
				}
				return aGuessT;
			}
			function BezierEasing(points) {
				(this || _global)._p = points;
				(this || _global)._mSampleValues = float32ArraySupported
					? new Float32Array(kSplineTableSize)
					: new Array(kSplineTableSize);
				(this || _global)._precomputed = false;
				(this || _global).get = (this || _global).get.bind(this || _global);
			}
			BezierEasing.prototype = {
				get: function (x) {
					var mX1 = (this || _global)._p[0],
						mY1 = (this || _global)._p[1],
						mX2 = (this || _global)._p[2],
						mY2 = (this || _global)._p[3];
					if (!(this || _global)._precomputed) this._precompute();
					if (mX1 === mY1 && mX2 === mY2) return x;
					if (x === 0) return 0;
					if (x === 1) return 1;
					return calcBezier(this._getTForX(x), mY1, mY2);
				},
				// Private part
				_precompute: function () {
					var mX1 = (this || _global)._p[0],
						mY1 = (this || _global)._p[1],
						mX2 = (this || _global)._p[2],
						mY2 = (this || _global)._p[3];
					(this || _global)._precomputed = true;
					if (mX1 !== mY1 || mX2 !== mY2) {
						this._calcSampleValues();
					}
				},
				_calcSampleValues: function () {
					var mX1 = (this || _global)._p[0],
						mX2 = (this || _global)._p[2];
					for (var i = 0; i < kSplineTableSize; ++i) {
						(this || _global)._mSampleValues[i] = calcBezier(
							i * kSampleStepSize,
							mX1,
							mX2,
						);
					}
				},
				/**
				 * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
				 */
				_getTForX: function (aX) {
					var mX1 = (this || _global)._p[0],
						mX2 = (this || _global)._p[2],
						mSampleValues = (this || _global)._mSampleValues;
					var intervalStart = 0;
					var currentSample = 1;
					var lastSample = kSplineTableSize - 1;
					for (
						;
						currentSample !== lastSample && mSampleValues[currentSample] <= aX;
						++currentSample
					) {
						intervalStart += kSampleStepSize;
					}
					--currentSample;
					var dist =
						(aX - mSampleValues[currentSample]) /
						(mSampleValues[currentSample + 1] - mSampleValues[currentSample]);
					var guessForT = intervalStart + dist * kSampleStepSize;
					var initialSlope = getSlope(guessForT, mX1, mX2);
					if (initialSlope >= NEWTON_MIN_SLOPE) {
						return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
					}
					if (initialSlope === 0) {
						return guessForT;
					}
					return binarySubdivide(
						aX,
						intervalStart,
						intervalStart + kSampleStepSize,
						mX1,
						mX2,
					);
				},
			};
			return ob2;
		})();
		(function () {
			var lastTime = 0;
			var vendors = ["ms", "moz", "webkit", "o"];
			for (
				var x = 0;
				x < vendors.length && !window.requestAnimationFrame;
				++x
			) {
				window.requestAnimationFrame =
					window[vendors[x] + "RequestAnimationFrame"];
				window.cancelAnimationFrame =
					window[vendors[x] + "CancelAnimationFrame"] ||
					window[vendors[x] + "CancelRequestAnimationFrame"];
			}
			if (!window.requestAnimationFrame) {
				window.requestAnimationFrame = function (callback) {
					var currTime = /* @__PURE__ */ new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = setTimeout(function () {
						callback(currTime + timeToCall);
					}, timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			}
			if (!window.cancelAnimationFrame) {
				window.cancelAnimationFrame = function (id) {
					clearTimeout(id);
				};
			}
		})();
		function extendPrototype(sources, destination) {
			var i;
			var len = sources.length;
			var sourcePrototype;
			for (i = 0; i < len; i += 1) {
				sourcePrototype = sources[i].prototype;
				for (var attr in sourcePrototype) {
					if (Object.prototype.hasOwnProperty.call(sourcePrototype, attr))
						destination.prototype[attr] = sourcePrototype[attr];
				}
			}
		}
		function getDescriptor(object, prop) {
			return Object.getOwnPropertyDescriptor(object, prop);
		}
		function createProxyFunction(prototype) {
			function ProxyFunction() {}
			ProxyFunction.prototype = prototype;
			return ProxyFunction;
		}
		function bezFunction() {
			var math = Math;
			function pointOnLine2D(x1, y1, x2, y2, x3, y3) {
				var det1 = x1 * y2 + y1 * x3 + x2 * y3 - x3 * y2 - y3 * x1 - x2 * y1;
				return det1 > -1e-3 && det1 < 1e-3;
			}
			function pointOnLine3D(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
				if (z1 === 0 && z2 === 0 && z3 === 0) {
					return pointOnLine2D(x1, y1, x2, y2, x3, y3);
				}
				var dist1 = math.sqrt(
					math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2) + math.pow(z2 - z1, 2),
				);
				var dist2 = math.sqrt(
					math.pow(x3 - x1, 2) + math.pow(y3 - y1, 2) + math.pow(z3 - z1, 2),
				);
				var dist3 = math.sqrt(
					math.pow(x3 - x2, 2) + math.pow(y3 - y2, 2) + math.pow(z3 - z2, 2),
				);
				var diffDist;
				if (dist1 > dist2) {
					if (dist1 > dist3) {
						diffDist = dist1 - dist2 - dist3;
					} else {
						diffDist = dist3 - dist2 - dist1;
					}
				} else if (dist3 > dist2) {
					diffDist = dist3 - dist2 - dist1;
				} else {
					diffDist = dist2 - dist1 - dist3;
				}
				return diffDist > -1e-4 && diffDist < 1e-4;
			}
			var getBezierLength = /* @__PURE__ */ (function () {
				return function (pt1, pt2, pt3, pt4) {
					var curveSegments = defaultCurveSegments;
					var k;
					var i;
					var len;
					var ptCoord;
					var perc;
					var addedLength = 0;
					var ptDistance;
					var point = [];
					var lastPoint = [];
					var lengthData = bezierLengthPool.newElement();
					len = pt3.length;
					for (k = 0; k < curveSegments; k += 1) {
						perc = k / (curveSegments - 1);
						ptDistance = 0;
						for (i = 0; i < len; i += 1) {
							ptCoord =
								bmPow(1 - perc, 3) * pt1[i] +
								3 * bmPow(1 - perc, 2) * perc * pt3[i] +
								3 * (1 - perc) * bmPow(perc, 2) * pt4[i] +
								bmPow(perc, 3) * pt2[i];
							point[i] = ptCoord;
							if (lastPoint[i] !== null) {
								ptDistance += bmPow(point[i] - lastPoint[i], 2);
							}
							lastPoint[i] = point[i];
						}
						if (ptDistance) {
							ptDistance = bmSqrt(ptDistance);
							addedLength += ptDistance;
						}
						lengthData.percents[k] = perc;
						lengthData.lengths[k] = addedLength;
					}
					lengthData.addedLength = addedLength;
					return lengthData;
				};
			})();
			function getSegmentsLength(shapeData) {
				var segmentsLength = segmentsLengthPool.newElement();
				var closed = shapeData.c;
				var pathV = shapeData.v;
				var pathO = shapeData.o;
				var pathI = shapeData.i;
				var i;
				var len = shapeData._length;
				var lengths = segmentsLength.lengths;
				var totalLength = 0;
				for (i = 0; i < len - 1; i += 1) {
					lengths[i] = getBezierLength(
						pathV[i],
						pathV[i + 1],
						pathO[i],
						pathI[i + 1],
					);
					totalLength += lengths[i].addedLength;
				}
				if (closed && len) {
					lengths[i] = getBezierLength(pathV[i], pathV[0], pathO[i], pathI[0]);
					totalLength += lengths[i].addedLength;
				}
				segmentsLength.totalLength = totalLength;
				return segmentsLength;
			}
			function BezierData(length2) {
				(this || _global).segmentLength = 0;
				(this || _global).points = new Array(length2);
			}
			function PointData(partial, point) {
				(this || _global).partialLength = partial;
				(this || _global).point = point;
			}
			var buildBezierData = /* @__PURE__ */ (function () {
				var storedData = {};
				return function (pt1, pt2, pt3, pt4) {
					var bezierName = (
						pt1[0] +
						"_" +
						pt1[1] +
						"_" +
						pt2[0] +
						"_" +
						pt2[1] +
						"_" +
						pt3[0] +
						"_" +
						pt3[1] +
						"_" +
						pt4[0] +
						"_" +
						pt4[1]
					).replace(/\./g, "p");
					if (!storedData[bezierName]) {
						var curveSegments = defaultCurveSegments;
						var k;
						var i;
						var len;
						var ptCoord;
						var perc;
						var addedLength = 0;
						var ptDistance;
						var point;
						var lastPoint = null;
						if (
							pt1.length === 2 &&
							(pt1[0] !== pt2[0] || pt1[1] !== pt2[1]) &&
							pointOnLine2D(
								pt1[0],
								pt1[1],
								pt2[0],
								pt2[1],
								pt1[0] + pt3[0],
								pt1[1] + pt3[1],
							) &&
							pointOnLine2D(
								pt1[0],
								pt1[1],
								pt2[0],
								pt2[1],
								pt2[0] + pt4[0],
								pt2[1] + pt4[1],
							)
						) {
							curveSegments = 2;
						}
						var bezierData = new BezierData(curveSegments);
						len = pt3.length;
						for (k = 0; k < curveSegments; k += 1) {
							point = createSizedArray(len);
							perc = k / (curveSegments - 1);
							ptDistance = 0;
							for (i = 0; i < len; i += 1) {
								ptCoord =
									bmPow(1 - perc, 3) * pt1[i] +
									3 * bmPow(1 - perc, 2) * perc * (pt1[i] + pt3[i]) +
									3 * (1 - perc) * bmPow(perc, 2) * (pt2[i] + pt4[i]) +
									bmPow(perc, 3) * pt2[i];
								point[i] = ptCoord;
								if (lastPoint !== null) {
									ptDistance += bmPow(point[i] - lastPoint[i], 2);
								}
							}
							ptDistance = bmSqrt(ptDistance);
							addedLength += ptDistance;
							bezierData.points[k] = new PointData(ptDistance, point);
							lastPoint = point;
						}
						bezierData.segmentLength = addedLength;
						storedData[bezierName] = bezierData;
					}
					return storedData[bezierName];
				};
			})();
			function getDistancePerc(perc, bezierData) {
				var percents = bezierData.percents;
				var lengths = bezierData.lengths;
				var len = percents.length;
				var initPos = bmFloor((len - 1) * perc);
				var lengthPos = perc * bezierData.addedLength;
				var lPerc = 0;
				if (
					initPos === len - 1 ||
					initPos === 0 ||
					lengthPos === lengths[initPos]
				) {
					return percents[initPos];
				}
				var dir = lengths[initPos] > lengthPos ? -1 : 1;
				var flag = true;
				while (flag) {
					if (
						lengths[initPos] <= lengthPos &&
						lengths[initPos + 1] > lengthPos
					) {
						lPerc =
							(lengthPos - lengths[initPos]) /
							(lengths[initPos + 1] - lengths[initPos]);
						flag = false;
					} else {
						initPos += dir;
					}
					if (initPos < 0 || initPos >= len - 1) {
						if (initPos === len - 1) {
							return percents[initPos];
						}
						flag = false;
					}
				}
				return (
					percents[initPos] +
					(percents[initPos + 1] - percents[initPos]) * lPerc
				);
			}
			function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
				var t1 = getDistancePerc(percent, bezierData);
				var u1 = 1 - t1;
				var ptX =
					math.round(
						(u1 * u1 * u1 * pt1[0] +
							(t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] +
							(t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] +
							t1 * t1 * t1 * pt2[0]) *
							1e3,
					) / 1e3;
				var ptY =
					math.round(
						(u1 * u1 * u1 * pt1[1] +
							(t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] +
							(t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] +
							t1 * t1 * t1 * pt2[1]) *
							1e3,
					) / 1e3;
				return [ptX, ptY];
			}
			var bezierSegmentPoints = createTypedArray("float32", 8);
			function getNewSegment(
				pt1,
				pt2,
				pt3,
				pt4,
				startPerc,
				endPerc,
				bezierData,
			) {
				if (startPerc < 0) {
					startPerc = 0;
				} else if (startPerc > 1) {
					startPerc = 1;
				}
				var t0 = getDistancePerc(startPerc, bezierData);
				endPerc = endPerc > 1 ? 1 : endPerc;
				var t1 = getDistancePerc(endPerc, bezierData);
				var i;
				var len = pt1.length;
				var u0 = 1 - t0;
				var u1 = 1 - t1;
				var u0u0u0 = u0 * u0 * u0;
				var t0u0u0_3 = t0 * u0 * u0 * 3;
				var t0t0u0_3 = t0 * t0 * u0 * 3;
				var t0t0t0 = t0 * t0 * t0;
				var u0u0u1 = u0 * u0 * u1;
				var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1;
				var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1;
				var t0t0t1 = t0 * t0 * t1;
				var u0u1u1 = u0 * u1 * u1;
				var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1;
				var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1;
				var t0t1t1 = t0 * t1 * t1;
				var u1u1u1 = u1 * u1 * u1;
				var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1;
				var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1;
				var t1t1t1 = t1 * t1 * t1;
				for (i = 0; i < len; i += 1) {
					bezierSegmentPoints[i * 4] =
						math.round(
							(u0u0u0 * pt1[i] +
								t0u0u0_3 * pt3[i] +
								t0t0u0_3 * pt4[i] +
								t0t0t0 * pt2[i]) *
								1e3,
						) / 1e3;
					bezierSegmentPoints[i * 4 + 1] =
						math.round(
							(u0u0u1 * pt1[i] +
								t0u0u1_3 * pt3[i] +
								t0t0u1_3 * pt4[i] +
								t0t0t1 * pt2[i]) *
								1e3,
						) / 1e3;
					bezierSegmentPoints[i * 4 + 2] =
						math.round(
							(u0u1u1 * pt1[i] +
								t0u1u1_3 * pt3[i] +
								t0t1u1_3 * pt4[i] +
								t0t1t1 * pt2[i]) *
								1e3,
						) / 1e3;
					bezierSegmentPoints[i * 4 + 3] =
						math.round(
							(u1u1u1 * pt1[i] +
								t1u1u1_3 * pt3[i] +
								t1t1u1_3 * pt4[i] +
								t1t1t1 * pt2[i]) *
								1e3,
						) / 1e3;
				}
				return bezierSegmentPoints;
			}
			return {
				getSegmentsLength,
				getNewSegment,
				getPointInSegment,
				buildBezierData,
				pointOnLine2D,
				pointOnLine3D,
			};
		}
		var bez = bezFunction();
		function dataFunctionManager() {
			function completeLayers(layers, comps, fontManager) {
				var layerData;
				var i;
				var len = layers.length;
				var j;
				var jLen;
				var k;
				var kLen;
				for (i = 0; i < len; i += 1) {
					layerData = layers[i];
					if ("ks" in layerData && !layerData.completed) {
						layerData.completed = true;
						if (layerData.tt) {
							layers[i - 1].td = layerData.tt;
						}
						if (layerData.hasMask) {
							var maskProps = layerData.masksProperties;
							jLen = maskProps.length;
							for (j = 0; j < jLen; j += 1) {
								if (maskProps[j].pt.k.i) {
									convertPathsToAbsoluteValues(maskProps[j].pt.k);
								} else {
									kLen = maskProps[j].pt.k.length;
									for (k = 0; k < kLen; k += 1) {
										if (maskProps[j].pt.k[k].s) {
											convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);
										}
										if (maskProps[j].pt.k[k].e) {
											convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);
										}
									}
								}
							}
						}
						if (layerData.ty === 0) {
							layerData.layers = findCompLayers(layerData.refId, comps);
							completeLayers(layerData.layers, comps, fontManager);
						} else if (layerData.ty === 4) {
							completeShapes(layerData.shapes);
						} else if (layerData.ty === 5) {
							completeText(layerData, fontManager);
						}
					}
				}
			}
			function findCompLayers(id, comps) {
				var i = 0;
				var len = comps.length;
				while (i < len) {
					if (comps[i].id === id) {
						if (!comps[i].layers.__used) {
							comps[i].layers.__used = true;
							return comps[i].layers;
						}
						return JSON.parse(JSON.stringify(comps[i].layers));
					}
					i += 1;
				}
				return null;
			}
			function completeShapes(arr) {
				var i;
				var len = arr.length;
				var j;
				var jLen;
				for (i = len - 1; i >= 0; i -= 1) {
					if (arr[i].ty === "sh") {
						if (arr[i].ks.k.i) {
							convertPathsToAbsoluteValues(arr[i].ks.k);
						} else {
							jLen = arr[i].ks.k.length;
							for (j = 0; j < jLen; j += 1) {
								if (arr[i].ks.k[j].s) {
									convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);
								}
								if (arr[i].ks.k[j].e) {
									convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);
								}
							}
						}
					} else if (arr[i].ty === "gr") {
						completeShapes(arr[i].it);
					}
				}
			}
			function convertPathsToAbsoluteValues(path) {
				var i;
				var len = path.i.length;
				for (i = 0; i < len; i += 1) {
					path.i[i][0] += path.v[i][0];
					path.i[i][1] += path.v[i][1];
					path.o[i][0] += path.v[i][0];
					path.o[i][1] += path.v[i][1];
				}
			}
			function checkVersion(minimum, animVersionString) {
				var animVersion = animVersionString
					? animVersionString.split(".")
					: [100, 100, 100];
				if (minimum[0] > animVersion[0]) {
					return true;
				}
				if (animVersion[0] > minimum[0]) {
					return false;
				}
				if (minimum[1] > animVersion[1]) {
					return true;
				}
				if (animVersion[1] > minimum[1]) {
					return false;
				}
				if (minimum[2] > animVersion[2]) {
					return true;
				}
				if (animVersion[2] > minimum[2]) {
					return false;
				}
				return null;
			}
			var checkText = /* @__PURE__ */ (function () {
				var minimumVersion = [4, 4, 14];
				function updateTextLayer(textLayer) {
					var documentData = textLayer.t.d;
					textLayer.t.d = {
						k: [
							{
								s: documentData,
								t: 0,
							},
						],
					};
				}
				function iterateLayers(layers) {
					var i;
					var len = layers.length;
					for (i = 0; i < len; i += 1) {
						if (layers[i].ty === 5) {
							updateTextLayer(layers[i]);
						}
					}
				}
				return function (animationData2) {
					if (checkVersion(minimumVersion, animationData2.v)) {
						iterateLayers(animationData2.layers);
						if (animationData2.assets) {
							var i;
							var len = animationData2.assets.length;
							for (i = 0; i < len; i += 1) {
								if (animationData2.assets[i].layers) {
									iterateLayers(animationData2.assets[i].layers);
								}
							}
						}
					}
				};
			})();
			var checkChars = /* @__PURE__ */ (function () {
				var minimumVersion = [4, 7, 99];
				return function (animationData2) {
					if (
						animationData2.chars &&
						!checkVersion(minimumVersion, animationData2.v)
					) {
						var i;
						var len = animationData2.chars.length;
						var j;
						var jLen;
						var pathData;
						var paths;
						for (i = 0; i < len; i += 1) {
							if (
								animationData2.chars[i].data &&
								animationData2.chars[i].data.shapes
							) {
								paths = animationData2.chars[i].data.shapes[0].it;
								jLen = paths.length;
								for (j = 0; j < jLen; j += 1) {
									pathData = paths[j].ks.k;
									if (!pathData.__converted) {
										convertPathsToAbsoluteValues(paths[j].ks.k);
										pathData.__converted = true;
									}
								}
							}
						}
					}
				};
			})();
			var checkColors = /* @__PURE__ */ (function () {
				var minimumVersion = [4, 1, 9];
				function iterateShapes(shapes) {
					var i;
					var len = shapes.length;
					var j;
					var jLen;
					for (i = 0; i < len; i += 1) {
						if (shapes[i].ty === "gr") {
							iterateShapes(shapes[i].it);
						} else if (shapes[i].ty === "fl" || shapes[i].ty === "st") {
							if (shapes[i].c.k && shapes[i].c.k[0].i) {
								jLen = shapes[i].c.k.length;
								for (j = 0; j < jLen; j += 1) {
									if (shapes[i].c.k[j].s) {
										shapes[i].c.k[j].s[0] /= 255;
										shapes[i].c.k[j].s[1] /= 255;
										shapes[i].c.k[j].s[2] /= 255;
										shapes[i].c.k[j].s[3] /= 255;
									}
									if (shapes[i].c.k[j].e) {
										shapes[i].c.k[j].e[0] /= 255;
										shapes[i].c.k[j].e[1] /= 255;
										shapes[i].c.k[j].e[2] /= 255;
										shapes[i].c.k[j].e[3] /= 255;
									}
								}
							} else {
								shapes[i].c.k[0] /= 255;
								shapes[i].c.k[1] /= 255;
								shapes[i].c.k[2] /= 255;
								shapes[i].c.k[3] /= 255;
							}
						}
					}
				}
				function iterateLayers(layers) {
					var i;
					var len = layers.length;
					for (i = 0; i < len; i += 1) {
						if (layers[i].ty === 4) {
							iterateShapes(layers[i].shapes);
						}
					}
				}
				return function (animationData2) {
					if (checkVersion(minimumVersion, animationData2.v)) {
						iterateLayers(animationData2.layers);
						if (animationData2.assets) {
							var i;
							var len = animationData2.assets.length;
							for (i = 0; i < len; i += 1) {
								if (animationData2.assets[i].layers) {
									iterateLayers(animationData2.assets[i].layers);
								}
							}
						}
					}
				};
			})();
			var checkShapes = /* @__PURE__ */ (function () {
				var minimumVersion = [4, 4, 18];
				function completeClosingShapes(arr) {
					var i;
					var len = arr.length;
					var j;
					var jLen;
					for (i = len - 1; i >= 0; i -= 1) {
						if (arr[i].ty === "sh") {
							if (arr[i].ks.k.i) {
								arr[i].ks.k.c = arr[i].closed;
							} else {
								jLen = arr[i].ks.k.length;
								for (j = 0; j < jLen; j += 1) {
									if (arr[i].ks.k[j].s) {
										arr[i].ks.k[j].s[0].c = arr[i].closed;
									}
									if (arr[i].ks.k[j].e) {
										arr[i].ks.k[j].e[0].c = arr[i].closed;
									}
								}
							}
						} else if (arr[i].ty === "gr") {
							completeClosingShapes(arr[i].it);
						}
					}
				}
				function iterateLayers(layers) {
					var layerData;
					var i;
					var len = layers.length;
					var j;
					var jLen;
					var k;
					var kLen;
					for (i = 0; i < len; i += 1) {
						layerData = layers[i];
						if (layerData.hasMask) {
							var maskProps = layerData.masksProperties;
							jLen = maskProps.length;
							for (j = 0; j < jLen; j += 1) {
								if (maskProps[j].pt.k.i) {
									maskProps[j].pt.k.c = maskProps[j].cl;
								} else {
									kLen = maskProps[j].pt.k.length;
									for (k = 0; k < kLen; k += 1) {
										if (maskProps[j].pt.k[k].s) {
											maskProps[j].pt.k[k].s[0].c = maskProps[j].cl;
										}
										if (maskProps[j].pt.k[k].e) {
											maskProps[j].pt.k[k].e[0].c = maskProps[j].cl;
										}
									}
								}
							}
						}
						if (layerData.ty === 4) {
							completeClosingShapes(layerData.shapes);
						}
					}
				}
				return function (animationData2) {
					if (checkVersion(minimumVersion, animationData2.v)) {
						iterateLayers(animationData2.layers);
						if (animationData2.assets) {
							var i;
							var len = animationData2.assets.length;
							for (i = 0; i < len; i += 1) {
								if (animationData2.assets[i].layers) {
									iterateLayers(animationData2.assets[i].layers);
								}
							}
						}
					}
				};
			})();
			function completeData(animationData2, fontManager) {
				if (animationData2.__complete) {
					return;
				}
				checkColors(animationData2);
				checkText(animationData2);
				checkChars(animationData2);
				checkShapes(animationData2);
				completeLayers(
					animationData2.layers,
					animationData2.assets,
					fontManager,
				);
				animationData2.__complete = true;
			}
			function completeText(data2) {
				if (data2.t.a.length === 0 && !("m" in data2.t.p)) {
					data2.singleShape = true;
				}
			}
			var moduleOb = {};
			moduleOb.completeData = completeData;
			moduleOb.checkColors = checkColors;
			moduleOb.checkChars = checkChars;
			moduleOb.checkShapes = checkShapes;
			moduleOb.completeLayers = completeLayers;
			return moduleOb;
		}
		var dataManager = dataFunctionManager();
		function getFontProperties(fontData) {
			var styles = fontData.fStyle ? fontData.fStyle.split(" ") : [];
			var fWeight = "normal";
			var fStyle = "normal";
			var len = styles.length;
			var styleName;
			for (var i = 0; i < len; i += 1) {
				styleName = styles[i].toLowerCase();
				switch (styleName) {
					case "italic":
						fStyle = "italic";
						break;
					case "bold":
						fWeight = "700";
						break;
					case "black":
						fWeight = "900";
						break;
					case "medium":
						fWeight = "500";
						break;
					case "regular":
					case "normal":
						fWeight = "400";
						break;
					case "light":
					case "thin":
						fWeight = "200";
						break;
					default:
						break;
				}
			}
			return {
				style: fStyle,
				weight: fontData.fWeight || fWeight,
			};
		}
		var FontManager = (function () {
			var maxWaitingTime = 5e3;
			var emptyChar = {
				w: 0,
				size: 0,
				shapes: [],
			};
			var combinedCharacters = [];
			combinedCharacters = combinedCharacters.concat([
				2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366, 2367, 2368, 2369,
				2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381,
				2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403,
			]);
			function trimFontOptions(font) {
				var familyArray = font.split(",");
				var i;
				var len = familyArray.length;
				var enabledFamilies = [];
				for (i = 0; i < len; i += 1) {
					if (
						familyArray[i] !== "sans-serif" &&
						familyArray[i] !== "monospace"
					) {
						enabledFamilies.push(familyArray[i]);
					}
				}
				return enabledFamilies.join(",");
			}
			function setUpNode(font, family) {
				var parentNode = createTag("span");
				parentNode.setAttribute("aria-hidden", true);
				parentNode.style.fontFamily = family;
				var node = createTag("span");
				node.innerText = "giItT1WQy@!-/#";
				parentNode.style.position = "absolute";
				parentNode.style.left = "-10000px";
				parentNode.style.top = "-10000px";
				parentNode.style.fontSize = "300px";
				parentNode.style.fontVariant = "normal";
				parentNode.style.fontStyle = "normal";
				parentNode.style.fontWeight = "normal";
				parentNode.style.letterSpacing = "0";
				parentNode.appendChild(node);
				document.body.appendChild(parentNode);
				var width2 = node.offsetWidth;
				node.style.fontFamily = trimFontOptions(font) + ", " + family;
				return {
					node,
					w: width2,
					parent: parentNode,
				};
			}
			function checkLoadedFonts() {
				var i;
				var len = (this || _global).fonts.length;
				var node;
				var w;
				var loadedCount = len;
				for (i = 0; i < len; i += 1) {
					if ((this || _global).fonts[i].loaded) {
						loadedCount -= 1;
					} else if (
						(this || _global).fonts[i].fOrigin === "n" ||
						(this || _global).fonts[i].origin === 0
					) {
						(this || _global).fonts[i].loaded = true;
					} else {
						node = (this || _global).fonts[i].monoCase.node;
						w = (this || _global).fonts[i].monoCase.w;
						if (node.offsetWidth !== w) {
							loadedCount -= 1;
							(this || _global).fonts[i].loaded = true;
						} else {
							node = (this || _global).fonts[i].sansCase.node;
							w = (this || _global).fonts[i].sansCase.w;
							if (node.offsetWidth !== w) {
								loadedCount -= 1;
								(this || _global).fonts[i].loaded = true;
							}
						}
						if ((this || _global).fonts[i].loaded) {
							(this || _global).fonts[i].sansCase.parent.parentNode.removeChild(
								(this || _global).fonts[i].sansCase.parent,
							);
							(this || _global).fonts[i].monoCase.parent.parentNode.removeChild(
								(this || _global).fonts[i].monoCase.parent,
							);
						}
					}
				}
				if (
					loadedCount !== 0 &&
					Date.now() - (this || _global).initTime < maxWaitingTime
				) {
					setTimeout((this || _global).checkLoadedFontsBinded, 20);
				} else {
					setTimeout((this || _global).setIsLoadedBinded, 10);
				}
			}
			function createHelper(def, fontData) {
				var tHelper = createNS("text");
				tHelper.style.fontSize = "100px";
				var fontProps = getFontProperties(fontData);
				tHelper.setAttribute("font-family", fontData.fFamily);
				tHelper.setAttribute("font-style", fontProps.style);
				tHelper.setAttribute("font-weight", fontProps.weight);
				tHelper.textContent = "1";
				if (fontData.fClass) {
					tHelper.style.fontFamily = "inherit";
					tHelper.setAttribute("class", fontData.fClass);
				} else {
					tHelper.style.fontFamily = fontData.fFamily;
				}
				def.appendChild(tHelper);
				var tCanvasHelper = createTag("canvas").getContext("2d");
				tCanvasHelper.font =
					fontData.fWeight +
					" " +
					fontData.fStyle +
					" 100px " +
					fontData.fFamily;
				return tHelper;
			}
			function addFonts4(fontData, defs) {
				if (!fontData) {
					(this || _global).isLoaded = true;
					return;
				}
				if ((this || _global).chars) {
					(this || _global).isLoaded = true;
					(this || _global).fonts = fontData.list;
					return;
				}
				var fontArr = fontData.list;
				var i;
				var len = fontArr.length;
				var _pendingFonts = len;
				for (i = 0; i < len; i += 1) {
					var shouldLoadFont = true;
					var loadedSelector;
					var j;
					fontArr[i].loaded = false;
					fontArr[i].monoCase = setUpNode(fontArr[i].fFamily, "monospace");
					fontArr[i].sansCase = setUpNode(fontArr[i].fFamily, "sans-serif");
					if (!fontArr[i].fPath) {
						fontArr[i].loaded = true;
						_pendingFonts -= 1;
					} else if (fontArr[i].fOrigin === "p" || fontArr[i].origin === 3) {
						loadedSelector = document.querySelectorAll(
							'style[f-forigin="p"][f-family="' +
								fontArr[i].fFamily +
								'"], style[f-origin="3"][f-family="' +
								fontArr[i].fFamily +
								'"]',
						);
						if (loadedSelector.length > 0) {
							shouldLoadFont = false;
						}
						if (shouldLoadFont) {
							var s = createTag("style");
							s.setAttribute("f-forigin", fontArr[i].fOrigin);
							s.setAttribute("f-origin", fontArr[i].origin);
							s.setAttribute("f-family", fontArr[i].fFamily);
							s.type = "text/css";
							s.innerText =
								"@font-face {font-family: " +
								fontArr[i].fFamily +
								"; font-style: normal; src: url('" +
								fontArr[i].fPath +
								"');}";
							defs.appendChild(s);
						}
					} else if (fontArr[i].fOrigin === "g" || fontArr[i].origin === 1) {
						loadedSelector = document.querySelectorAll(
							'link[f-forigin="g"], link[f-origin="1"]',
						);
						for (j = 0; j < loadedSelector.length; j += 1) {
							if (loadedSelector[j].href.indexOf(fontArr[i].fPath) !== -1) {
								shouldLoadFont = false;
							}
						}
						if (shouldLoadFont) {
							var l = createTag("link");
							l.setAttribute("f-forigin", fontArr[i].fOrigin);
							l.setAttribute("f-origin", fontArr[i].origin);
							l.type = "text/css";
							l.rel = "stylesheet";
							l.href = fontArr[i].fPath;
							document.body.appendChild(l);
						}
					} else if (fontArr[i].fOrigin === "t" || fontArr[i].origin === 2) {
						loadedSelector = document.querySelectorAll(
							'script[f-forigin="t"], script[f-origin="2"]',
						);
						for (j = 0; j < loadedSelector.length; j += 1) {
							if (fontArr[i].fPath === loadedSelector[j].src) {
								shouldLoadFont = false;
							}
						}
						if (shouldLoadFont) {
							var sc = createTag("link");
							sc.setAttribute("f-forigin", fontArr[i].fOrigin);
							sc.setAttribute("f-origin", fontArr[i].origin);
							sc.setAttribute("rel", "stylesheet");
							sc.setAttribute("href", fontArr[i].fPath);
							defs.appendChild(sc);
						}
					}
					fontArr[i].helper = createHelper(defs, fontArr[i]);
					fontArr[i].cache = {};
					(this || _global).fonts.push(fontArr[i]);
				}
				if (_pendingFonts === 0) {
					(this || _global).isLoaded = true;
				} else {
					setTimeout(
						(this || _global).checkLoadedFonts.bind(this || _global),
						100,
					);
				}
			}
			function addChars(chars) {
				if (!chars) {
					return;
				}
				if (!(this || _global).chars) {
					(this || _global).chars = [];
				}
				var i;
				var len = chars.length;
				var j;
				var jLen = (this || _global).chars.length;
				var found;
				for (i = 0; i < len; i += 1) {
					j = 0;
					found = false;
					while (j < jLen) {
						if (
							(this || _global).chars[j].style === chars[i].style &&
							(this || _global).chars[j].fFamily === chars[i].fFamily &&
							(this || _global).chars[j].ch === chars[i].ch
						) {
							found = true;
						}
						j += 1;
					}
					if (!found) {
						(this || _global).chars.push(chars[i]);
						jLen += 1;
					}
				}
			}
			function getCharData(char, style, font) {
				var i = 0;
				var len = (this || _global).chars.length;
				while (i < len) {
					if (
						(this || _global).chars[i].ch === char &&
						(this || _global).chars[i].style === style &&
						(this || _global).chars[i].fFamily === font
					) {
						return (this || _global).chars[i];
					}
					i += 1;
				}
				if (
					((typeof char === "string" && char.charCodeAt(0) !== 13) || !char) &&
					console &&
					console.warn &&
					!(this || _global)._warned
				) {
					(this || _global)._warned = true;
					console.warn(
						"Missing character from exported characters list: ",
						char,
						style,
						font,
					);
				}
				return emptyChar;
			}
			function measureText(char, fontName, size) {
				var fontData = this.getFontByName(fontName);
				var index2 = char.charCodeAt(0);
				if (!fontData.cache[index2 + 1]) {
					var tHelper = fontData.helper;
					if (char === " ") {
						tHelper.textContent = "|" + char + "|";
						var doubleSize = tHelper.getComputedTextLength();
						tHelper.textContent = "||";
						var singleSize = tHelper.getComputedTextLength();
						fontData.cache[index2 + 1] = (doubleSize - singleSize) / 100;
					} else {
						tHelper.textContent = char;
						fontData.cache[index2 + 1] = tHelper.getComputedTextLength() / 100;
					}
				}
				return fontData.cache[index2 + 1] * size;
			}
			function getFontByName(name2) {
				var i = 0;
				var len = (this || _global).fonts.length;
				while (i < len) {
					if ((this || _global).fonts[i].fName === name2) {
						return (this || _global).fonts[i];
					}
					i += 1;
				}
				return (this || _global).fonts[0];
			}
			function getCombinedCharacterCodes() {
				return combinedCharacters;
			}
			function setIsLoaded() {
				(this || _global).isLoaded = true;
			}
			var Font = function () {
				(this || _global).fonts = [];
				(this || _global).chars = null;
				(this || _global).typekitLoaded = 0;
				(this || _global).isLoaded = false;
				(this || _global)._warned = false;
				(this || _global).initTime = Date.now();
				(this || _global).setIsLoadedBinded = (
					this || _global
				).setIsLoaded.bind(this || _global);
				(this || _global).checkLoadedFontsBinded = (
					this || _global
				).checkLoadedFonts.bind(this || _global);
			};
			Font.getCombinedCharacterCodes = getCombinedCharacterCodes;
			var fontPrototype = {
				addChars,
				addFonts: addFonts4,
				getCharData,
				getFontByName,
				measureText,
				checkLoadedFonts,
				setIsLoaded,
			};
			Font.prototype = fontPrototype;
			return Font;
		})();
		var PropertyFactory = /* @__PURE__ */ (function () {
			var initFrame = initialDefaultFrame;
			var mathAbs = Math.abs;
			function interpolateValue(frameNum, caching) {
				var offsetTime = (this || _global).offsetTime;
				var newValue;
				if ((this || _global).propType === "multidimensional") {
					newValue = createTypedArray("float32", (this || _global).pv.length);
				}
				var iterationIndex = caching.lastIndex;
				var i = iterationIndex;
				var len = (this || _global).keyframes.length - 1;
				var flag = true;
				var keyData;
				var nextKeyData;
				while (flag) {
					keyData = (this || _global).keyframes[i];
					nextKeyData = (this || _global).keyframes[i + 1];
					if (i === len - 1 && frameNum >= nextKeyData.t - offsetTime) {
						if (keyData.h) {
							keyData = nextKeyData;
						}
						iterationIndex = 0;
						break;
					}
					if (nextKeyData.t - offsetTime > frameNum) {
						iterationIndex = i;
						break;
					}
					if (i < len - 1) {
						i += 1;
					} else {
						iterationIndex = 0;
						flag = false;
					}
				}
				var k;
				var kLen;
				var perc;
				var jLen;
				var j;
				var fnc;
				var nextKeyTime = nextKeyData.t - offsetTime;
				var keyTime = keyData.t - offsetTime;
				var endValue;
				if (keyData.to) {
					if (!keyData.bezierData) {
						keyData.bezierData = bez.buildBezierData(
							keyData.s,
							nextKeyData.s || keyData.e,
							keyData.to,
							keyData.ti,
						);
					}
					var bezierData = keyData.bezierData;
					if (frameNum >= nextKeyTime || frameNum < keyTime) {
						var ind =
							frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
						kLen = bezierData.points[ind].point.length;
						for (k = 0; k < kLen; k += 1) {
							newValue[k] = bezierData.points[ind].point[k];
						}
					} else {
						if (keyData.__fnct) {
							fnc = keyData.__fnct;
						} else {
							fnc = BezierFactory.getBezierEasing(
								keyData.o.x,
								keyData.o.y,
								keyData.i.x,
								keyData.i.y,
								keyData.n,
							).get;
							keyData.__fnct = fnc;
						}
						perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
						var distanceInLine = bezierData.segmentLength * perc;
						var segmentPerc;
						var addedLength =
							caching.lastFrame < frameNum && caching._lastKeyframeIndex === i
								? caching._lastAddedLength
								: 0;
						j =
							caching.lastFrame < frameNum && caching._lastKeyframeIndex === i
								? caching._lastPoint
								: 0;
						flag = true;
						jLen = bezierData.points.length;
						while (flag) {
							addedLength += bezierData.points[j].partialLength;
							if (
								distanceInLine === 0 ||
								perc === 0 ||
								j === bezierData.points.length - 1
							) {
								kLen = bezierData.points[j].point.length;
								for (k = 0; k < kLen; k += 1) {
									newValue[k] = bezierData.points[j].point[k];
								}
								break;
							} else if (
								distanceInLine >= addedLength &&
								distanceInLine <
									addedLength + bezierData.points[j + 1].partialLength
							) {
								segmentPerc =
									(distanceInLine - addedLength) /
									bezierData.points[j + 1].partialLength;
								kLen = bezierData.points[j].point.length;
								for (k = 0; k < kLen; k += 1) {
									newValue[k] =
										bezierData.points[j].point[k] +
										(bezierData.points[j + 1].point[k] -
											bezierData.points[j].point[k]) *
											segmentPerc;
								}
								break;
							}
							if (j < jLen - 1) {
								j += 1;
							} else {
								flag = false;
							}
						}
						caching._lastPoint = j;
						caching._lastAddedLength =
							addedLength - bezierData.points[j].partialLength;
						caching._lastKeyframeIndex = i;
					}
				} else {
					var outX;
					var outY;
					var inX;
					var inY;
					var keyValue;
					len = keyData.s.length;
					endValue = nextKeyData.s || keyData.e;
					if ((this || _global).sh && keyData.h !== 1) {
						if (frameNum >= nextKeyTime) {
							newValue[0] = endValue[0];
							newValue[1] = endValue[1];
							newValue[2] = endValue[2];
						} else if (frameNum <= keyTime) {
							newValue[0] = keyData.s[0];
							newValue[1] = keyData.s[1];
							newValue[2] = keyData.s[2];
						} else {
							var quatStart = createQuaternion(keyData.s);
							var quatEnd = createQuaternion(endValue);
							var time2 = (frameNum - keyTime) / (nextKeyTime - keyTime);
							quaternionToEuler(newValue, slerp(quatStart, quatEnd, time2));
						}
					} else {
						for (i = 0; i < len; i += 1) {
							if (keyData.h !== 1) {
								if (frameNum >= nextKeyTime) {
									perc = 1;
								} else if (frameNum < keyTime) {
									perc = 0;
								} else {
									if (keyData.o.x.constructor === Array) {
										if (!keyData.__fnct) {
											keyData.__fnct = [];
										}
										if (!keyData.__fnct[i]) {
											outX =
												typeof keyData.o.x[i] === "undefined"
													? keyData.o.x[0]
													: keyData.o.x[i];
											outY =
												typeof keyData.o.y[i] === "undefined"
													? keyData.o.y[0]
													: keyData.o.y[i];
											inX =
												typeof keyData.i.x[i] === "undefined"
													? keyData.i.x[0]
													: keyData.i.x[i];
											inY =
												typeof keyData.i.y[i] === "undefined"
													? keyData.i.y[0]
													: keyData.i.y[i];
											fnc = BezierFactory.getBezierEasing(
												outX,
												outY,
												inX,
												inY,
											).get;
											keyData.__fnct[i] = fnc;
										} else {
											fnc = keyData.__fnct[i];
										}
									} else if (!keyData.__fnct) {
										outX = keyData.o.x;
										outY = keyData.o.y;
										inX = keyData.i.x;
										inY = keyData.i.y;
										fnc = BezierFactory.getBezierEasing(
											outX,
											outY,
											inX,
											inY,
										).get;
										keyData.__fnct = fnc;
									} else {
										fnc = keyData.__fnct;
									}
									perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
								}
							}
							endValue = nextKeyData.s || keyData.e;
							keyValue =
								keyData.h === 1
									? keyData.s[i]
									: keyData.s[i] + (endValue[i] - keyData.s[i]) * perc;
							if ((this || _global).propType === "multidimensional") {
								newValue[i] = keyValue;
							} else {
								newValue = keyValue;
							}
						}
					}
				}
				caching.lastIndex = iterationIndex;
				return newValue;
			}
			function slerp(a, b, t) {
				var out = [];
				var ax = a[0];
				var ay = a[1];
				var az = a[2];
				var aw = a[3];
				var bx = b[0];
				var by = b[1];
				var bz = b[2];
				var bw = b[3];
				var omega;
				var cosom;
				var sinom;
				var scale0;
				var scale1;
				cosom = ax * bx + ay * by + az * bz + aw * bw;
				if (cosom < 0) {
					cosom = -cosom;
					bx = -bx;
					by = -by;
					bz = -bz;
					bw = -bw;
				}
				if (1 - cosom > 1e-6) {
					omega = Math.acos(cosom);
					sinom = Math.sin(omega);
					scale0 = Math.sin((1 - t) * omega) / sinom;
					scale1 = Math.sin(t * omega) / sinom;
				} else {
					scale0 = 1 - t;
					scale1 = t;
				}
				out[0] = scale0 * ax + scale1 * bx;
				out[1] = scale0 * ay + scale1 * by;
				out[2] = scale0 * az + scale1 * bz;
				out[3] = scale0 * aw + scale1 * bw;
				return out;
			}
			function quaternionToEuler(out, quat) {
				var qx = quat[0];
				var qy = quat[1];
				var qz = quat[2];
				var qw = quat[3];
				var heading = Math.atan2(
					2 * qy * qw - 2 * qx * qz,
					1 - 2 * qy * qy - 2 * qz * qz,
				);
				var attitude = Math.asin(2 * qx * qy + 2 * qz * qw);
				var bank = Math.atan2(
					2 * qx * qw - 2 * qy * qz,
					1 - 2 * qx * qx - 2 * qz * qz,
				);
				out[0] = heading / degToRads;
				out[1] = attitude / degToRads;
				out[2] = bank / degToRads;
			}
			function createQuaternion(values) {
				var heading = values[0] * degToRads;
				var attitude = values[1] * degToRads;
				var bank = values[2] * degToRads;
				var c1 = Math.cos(heading / 2);
				var c2 = Math.cos(attitude / 2);
				var c3 = Math.cos(bank / 2);
				var s1 = Math.sin(heading / 2);
				var s2 = Math.sin(attitude / 2);
				var s3 = Math.sin(bank / 2);
				var w = c1 * c2 * c3 - s1 * s2 * s3;
				var x = s1 * s2 * c3 + c1 * c2 * s3;
				var y = s1 * c2 * c3 + c1 * s2 * s3;
				var z = c1 * s2 * c3 - s1 * c2 * s3;
				return [x, y, z, w];
			}
			function getValueAtCurrentTime() {
				var frameNum =
					(this || _global).comp.renderedFrame - (this || _global).offsetTime;
				var initTime =
					(this || _global).keyframes[0].t - (this || _global).offsetTime;
				var endTime =
					(this || _global).keyframes[(this || _global).keyframes.length - 1]
						.t - (this || _global).offsetTime;
				if (
					!(
						frameNum === (this || _global)._caching.lastFrame ||
						((this || _global)._caching.lastFrame !== initFrame &&
							(((this || _global)._caching.lastFrame >= endTime &&
								frameNum >= endTime) ||
								((this || _global)._caching.lastFrame < initTime &&
									frameNum < initTime)))
					)
				) {
					if ((this || _global)._caching.lastFrame >= frameNum) {
						(this || _global)._caching._lastKeyframeIndex = -1;
						(this || _global)._caching.lastIndex = 0;
					}
					var renderResult = this.interpolateValue(
						frameNum,
						(this || _global)._caching,
					);
					(this || _global).pv = renderResult;
				}
				(this || _global)._caching.lastFrame = frameNum;
				return (this || _global).pv;
			}
			function setVValue(val2) {
				var multipliedValue;
				if ((this || _global).propType === "unidimensional") {
					multipliedValue = val2 * (this || _global).mult;
					if (mathAbs((this || _global).v - multipliedValue) > 1e-5) {
						(this || _global).v = multipliedValue;
						(this || _global)._mdf = true;
					}
				} else {
					var i = 0;
					var len = (this || _global).v.length;
					while (i < len) {
						multipliedValue = val2[i] * (this || _global).mult;
						if (mathAbs((this || _global).v[i] - multipliedValue) > 1e-5) {
							(this || _global).v[i] = multipliedValue;
							(this || _global)._mdf = true;
						}
						i += 1;
					}
				}
			}
			function processEffectsSequence() {
				if (
					(this || _global).elem.globalData.frameId ===
						(this || _global).frameId ||
					!(this || _global).effectsSequence.length
				) {
					return;
				}
				if ((this || _global).lock) {
					this.setVValue((this || _global).pv);
					return;
				}
				(this || _global).lock = true;
				(this || _global)._mdf = (this || _global)._isFirstFrame;
				var i;
				var len = (this || _global).effectsSequence.length;
				var finalValue = (this || _global).kf
					? (this || _global).pv
					: (this || _global).data.k;
				for (i = 0; i < len; i += 1) {
					finalValue = (this || _global).effectsSequence[i](finalValue);
				}
				this.setVValue(finalValue);
				(this || _global)._isFirstFrame = false;
				(this || _global).lock = false;
				(this || _global).frameId = (this || _global).elem.globalData.frameId;
			}
			function addEffect(effectFunction) {
				(this || _global).effectsSequence.push(effectFunction);
				(this || _global).container.addDynamicProperty(this || _global);
			}
			function ValueProperty(elem2, data2, mult, container) {
				(this || _global).propType = "unidimensional";
				(this || _global).mult = mult || 1;
				(this || _global).data = data2;
				(this || _global).v = mult ? data2.k * mult : data2.k;
				(this || _global).pv = data2.k;
				(this || _global)._mdf = false;
				(this || _global).elem = elem2;
				(this || _global).container = container;
				(this || _global).comp = elem2.comp;
				(this || _global).k = false;
				(this || _global).kf = false;
				(this || _global).vel = 0;
				(this || _global).effectsSequence = [];
				(this || _global)._isFirstFrame = true;
				(this || _global).getValue = processEffectsSequence;
				(this || _global).setVValue = setVValue;
				(this || _global).addEffect = addEffect;
			}
			function MultiDimensionalProperty(elem2, data2, mult, container) {
				(this || _global).propType = "multidimensional";
				(this || _global).mult = mult || 1;
				(this || _global).data = data2;
				(this || _global)._mdf = false;
				(this || _global).elem = elem2;
				(this || _global).container = container;
				(this || _global).comp = elem2.comp;
				(this || _global).k = false;
				(this || _global).kf = false;
				(this || _global).frameId = -1;
				var i;
				var len = data2.k.length;
				(this || _global).v = createTypedArray("float32", len);
				(this || _global).pv = createTypedArray("float32", len);
				(this || _global).vel = createTypedArray("float32", len);
				for (i = 0; i < len; i += 1) {
					(this || _global).v[i] = data2.k[i] * (this || _global).mult;
					(this || _global).pv[i] = data2.k[i];
				}
				(this || _global)._isFirstFrame = true;
				(this || _global).effectsSequence = [];
				(this || _global).getValue = processEffectsSequence;
				(this || _global).setVValue = setVValue;
				(this || _global).addEffect = addEffect;
			}
			function KeyframedValueProperty(elem2, data2, mult, container) {
				(this || _global).propType = "unidimensional";
				(this || _global).keyframes = data2.k;
				(this || _global).offsetTime = elem2.data.st;
				(this || _global).frameId = -1;
				(this || _global)._caching = {
					lastFrame: initFrame,
					lastIndex: 0,
					value: 0,
					_lastKeyframeIndex: -1,
				};
				(this || _global).k = true;
				(this || _global).kf = true;
				(this || _global).data = data2;
				(this || _global).mult = mult || 1;
				(this || _global).elem = elem2;
				(this || _global).container = container;
				(this || _global).comp = elem2.comp;
				(this || _global).v = initFrame;
				(this || _global).pv = initFrame;
				(this || _global)._isFirstFrame = true;
				(this || _global).getValue = processEffectsSequence;
				(this || _global).setVValue = setVValue;
				(this || _global).interpolateValue = interpolateValue;
				(this || _global).effectsSequence = [
					getValueAtCurrentTime.bind(this || _global),
				];
				(this || _global).addEffect = addEffect;
			}
			function KeyframedMultidimensionalProperty(
				elem2,
				data2,
				mult,
				container,
			) {
				(this || _global).propType = "multidimensional";
				var i;
				var len = data2.k.length;
				var s;
				var e;
				var to;
				var ti;
				for (i = 0; i < len - 1; i += 1) {
					if (
						data2.k[i].to &&
						data2.k[i].s &&
						data2.k[i + 1] &&
						data2.k[i + 1].s
					) {
						s = data2.k[i].s;
						e = data2.k[i + 1].s;
						to = data2.k[i].to;
						ti = data2.k[i].ti;
						if (
							(s.length === 2 &&
								!(s[0] === e[0] && s[1] === e[1]) &&
								bez.pointOnLine2D(
									s[0],
									s[1],
									e[0],
									e[1],
									s[0] + to[0],
									s[1] + to[1],
								) &&
								bez.pointOnLine2D(
									s[0],
									s[1],
									e[0],
									e[1],
									e[0] + ti[0],
									e[1] + ti[1],
								)) ||
							(s.length === 3 &&
								!(s[0] === e[0] && s[1] === e[1] && s[2] === e[2]) &&
								bez.pointOnLine3D(
									s[0],
									s[1],
									s[2],
									e[0],
									e[1],
									e[2],
									s[0] + to[0],
									s[1] + to[1],
									s[2] + to[2],
								) &&
								bez.pointOnLine3D(
									s[0],
									s[1],
									s[2],
									e[0],
									e[1],
									e[2],
									e[0] + ti[0],
									e[1] + ti[1],
									e[2] + ti[2],
								))
						) {
							data2.k[i].to = null;
							data2.k[i].ti = null;
						}
						if (
							s[0] === e[0] &&
							s[1] === e[1] &&
							to[0] === 0 &&
							to[1] === 0 &&
							ti[0] === 0 &&
							ti[1] === 0
						) {
							if (
								s.length === 2 ||
								(s[2] === e[2] && to[2] === 0 && ti[2] === 0)
							) {
								data2.k[i].to = null;
								data2.k[i].ti = null;
							}
						}
					}
				}
				(this || _global).effectsSequence = [
					getValueAtCurrentTime.bind(this || _global),
				];
				(this || _global).data = data2;
				(this || _global).keyframes = data2.k;
				(this || _global).offsetTime = elem2.data.st;
				(this || _global).k = true;
				(this || _global).kf = true;
				(this || _global)._isFirstFrame = true;
				(this || _global).mult = mult || 1;
				(this || _global).elem = elem2;
				(this || _global).container = container;
				(this || _global).comp = elem2.comp;
				(this || _global).getValue = processEffectsSequence;
				(this || _global).setVValue = setVValue;
				(this || _global).interpolateValue = interpolateValue;
				(this || _global).frameId = -1;
				var arrLen = data2.k[0].s.length;
				(this || _global).v = createTypedArray("float32", arrLen);
				(this || _global).pv = createTypedArray("float32", arrLen);
				for (i = 0; i < arrLen; i += 1) {
					(this || _global).v[i] = initFrame;
					(this || _global).pv[i] = initFrame;
				}
				(this || _global)._caching = {
					lastFrame: initFrame,
					lastIndex: 0,
					value: createTypedArray("float32", arrLen),
				};
				(this || _global).addEffect = addEffect;
			}
			function getProp(elem2, data2, type, mult, container) {
				var p;
				if (!data2.k.length) {
					p = new ValueProperty(elem2, data2, mult, container);
				} else if (typeof data2.k[0] === "number") {
					p = new MultiDimensionalProperty(elem2, data2, mult, container);
				} else {
					switch (type) {
						case 0:
							p = new KeyframedValueProperty(elem2, data2, mult, container);
							break;
						case 1:
							p = new KeyframedMultidimensionalProperty(
								elem2,
								data2,
								mult,
								container,
							);
							break;
						default:
							break;
					}
				}
				if (p.effectsSequence.length) {
					container.addDynamicProperty(p);
				}
				return p;
			}
			var ob2 = {
				getProp,
			};
			return ob2;
		})();
		var TransformPropertyFactory = (function () {
			var defaultVector = [0, 0];
			function applyToMatrix(mat) {
				var _mdf = (this || _global)._mdf;
				this.iterateDynamicProperties();
				(this || _global)._mdf = (this || _global)._mdf || _mdf;
				if ((this || _global).a) {
					mat.translate(
						-(this || _global).a.v[0],
						-(this || _global).a.v[1],
						(this || _global).a.v[2],
					);
				}
				if ((this || _global).s) {
					mat.scale(
						(this || _global).s.v[0],
						(this || _global).s.v[1],
						(this || _global).s.v[2],
					);
				}
				if ((this || _global).sk) {
					mat.skewFromAxis(-(this || _global).sk.v, (this || _global).sa.v);
				}
				if ((this || _global).r) {
					mat.rotate(-(this || _global).r.v);
				} else {
					mat
						.rotateZ(-(this || _global).rz.v)
						.rotateY((this || _global).ry.v)
						.rotateX((this || _global).rx.v)
						.rotateZ(-(this || _global).or.v[2])
						.rotateY((this || _global).or.v[1])
						.rotateX((this || _global).or.v[0]);
				}
				if ((this || _global).data.p.s) {
					if ((this || _global).data.p.z) {
						mat.translate(
							(this || _global).px.v,
							(this || _global).py.v,
							-(this || _global).pz.v,
						);
					} else {
						mat.translate((this || _global).px.v, (this || _global).py.v, 0);
					}
				} else {
					mat.translate(
						(this || _global).p.v[0],
						(this || _global).p.v[1],
						-(this || _global).p.v[2],
					);
				}
			}
			function processKeys(forceRender) {
				if (
					(this || _global).elem.globalData.frameId ===
					(this || _global).frameId
				) {
					return;
				}
				if ((this || _global)._isDirty) {
					this.precalculateMatrix();
					(this || _global)._isDirty = false;
				}
				this.iterateDynamicProperties();
				if ((this || _global)._mdf || forceRender) {
					var frameRate;
					(this || _global).v.cloneFromProps((this || _global).pre.props);
					if ((this || _global).appliedTransformations < 1) {
						(this || _global).v.translate(
							-(this || _global).a.v[0],
							-(this || _global).a.v[1],
							(this || _global).a.v[2],
						);
					}
					if ((this || _global).appliedTransformations < 2) {
						(this || _global).v.scale(
							(this || _global).s.v[0],
							(this || _global).s.v[1],
							(this || _global).s.v[2],
						);
					}
					if (
						(this || _global).sk &&
						(this || _global).appliedTransformations < 3
					) {
						(this || _global).v.skewFromAxis(
							-(this || _global).sk.v,
							(this || _global).sa.v,
						);
					}
					if (
						(this || _global).r &&
						(this || _global).appliedTransformations < 4
					) {
						(this || _global).v.rotate(-(this || _global).r.v);
					} else if (
						!(this || _global).r &&
						(this || _global).appliedTransformations < 4
					) {
						(this || _global).v
							.rotateZ(-(this || _global).rz.v)
							.rotateY((this || _global).ry.v)
							.rotateX((this || _global).rx.v)
							.rotateZ(-(this || _global).or.v[2])
							.rotateY((this || _global).or.v[1])
							.rotateX((this || _global).or.v[0]);
					}
					if ((this || _global).autoOriented) {
						var v1;
						var v2;
						frameRate = (this || _global).elem.globalData.frameRate;
						if (
							(this || _global).p &&
							(this || _global).p.keyframes &&
							(this || _global).p.getValueAtTime
						) {
							if (
								(this || _global).p._caching.lastFrame +
									(this || _global).p.offsetTime <=
								(this || _global).p.keyframes[0].t
							) {
								v1 = (this || _global).p.getValueAtTime(
									((this || _global).p.keyframes[0].t + 0.01) / frameRate,
									0,
								);
								v2 = (this || _global).p.getValueAtTime(
									(this || _global).p.keyframes[0].t / frameRate,
									0,
								);
							} else if (
								(this || _global).p._caching.lastFrame +
									(this || _global).p.offsetTime >=
								(this || _global).p.keyframes[
									(this || _global).p.keyframes.length - 1
								].t
							) {
								v1 = (this || _global).p.getValueAtTime(
									(this || _global).p.keyframes[
										(this || _global).p.keyframes.length - 1
									].t / frameRate,
									0,
								);
								v2 = (this || _global).p.getValueAtTime(
									((this || _global).p.keyframes[
										(this || _global).p.keyframes.length - 1
									].t -
										0.05) /
										frameRate,
									0,
								);
							} else {
								v1 = (this || _global).p.pv;
								v2 = (this || _global).p.getValueAtTime(
									((this || _global).p._caching.lastFrame +
										(this || _global).p.offsetTime -
										0.01) /
										frameRate,
									(this || _global).p.offsetTime,
								);
							}
						} else if (
							(this || _global).px &&
							(this || _global).px.keyframes &&
							(this || _global).py.keyframes &&
							(this || _global).px.getValueAtTime &&
							(this || _global).py.getValueAtTime
						) {
							v1 = [];
							v2 = [];
							var px = (this || _global).px;
							var py = (this || _global).py;
							if (px._caching.lastFrame + px.offsetTime <= px.keyframes[0].t) {
								v1[0] = px.getValueAtTime(
									(px.keyframes[0].t + 0.01) / frameRate,
									0,
								);
								v1[1] = py.getValueAtTime(
									(py.keyframes[0].t + 0.01) / frameRate,
									0,
								);
								v2[0] = px.getValueAtTime(px.keyframes[0].t / frameRate, 0);
								v2[1] = py.getValueAtTime(py.keyframes[0].t / frameRate, 0);
							} else if (
								px._caching.lastFrame + px.offsetTime >=
								px.keyframes[px.keyframes.length - 1].t
							) {
								v1[0] = px.getValueAtTime(
									px.keyframes[px.keyframes.length - 1].t / frameRate,
									0,
								);
								v1[1] = py.getValueAtTime(
									py.keyframes[py.keyframes.length - 1].t / frameRate,
									0,
								);
								v2[0] = px.getValueAtTime(
									(px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate,
									0,
								);
								v2[1] = py.getValueAtTime(
									(py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate,
									0,
								);
							} else {
								v1 = [px.pv, py.pv];
								v2[0] = px.getValueAtTime(
									(px._caching.lastFrame + px.offsetTime - 0.01) / frameRate,
									px.offsetTime,
								);
								v2[1] = py.getValueAtTime(
									(py._caching.lastFrame + py.offsetTime - 0.01) / frameRate,
									py.offsetTime,
								);
							}
						} else {
							v2 = defaultVector;
							v1 = v2;
						}
						(this || _global).v.rotate(
							-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]),
						);
					}
					if ((this || _global).data.p && (this || _global).data.p.s) {
						if ((this || _global).data.p.z) {
							(this || _global).v.translate(
								(this || _global).px.v,
								(this || _global).py.v,
								-(this || _global).pz.v,
							);
						} else {
							(this || _global).v.translate(
								(this || _global).px.v,
								(this || _global).py.v,
								0,
							);
						}
					} else {
						(this || _global).v.translate(
							(this || _global).p.v[0],
							(this || _global).p.v[1],
							-(this || _global).p.v[2],
						);
					}
				}
				(this || _global).frameId = (this || _global).elem.globalData.frameId;
			}
			function precalculateMatrix() {
				if (!(this || _global).a.k) {
					(this || _global).pre.translate(
						-(this || _global).a.v[0],
						-(this || _global).a.v[1],
						(this || _global).a.v[2],
					);
					(this || _global).appliedTransformations = 1;
				} else {
					return;
				}
				if (!(this || _global).s.effectsSequence.length) {
					(this || _global).pre.scale(
						(this || _global).s.v[0],
						(this || _global).s.v[1],
						(this || _global).s.v[2],
					);
					(this || _global).appliedTransformations = 2;
				} else {
					return;
				}
				if ((this || _global).sk) {
					if (
						!(this || _global).sk.effectsSequence.length &&
						!(this || _global).sa.effectsSequence.length
					) {
						(this || _global).pre.skewFromAxis(
							-(this || _global).sk.v,
							(this || _global).sa.v,
						);
						(this || _global).appliedTransformations = 3;
					} else {
						return;
					}
				}
				if ((this || _global).r) {
					if (!(this || _global).r.effectsSequence.length) {
						(this || _global).pre.rotate(-(this || _global).r.v);
						(this || _global).appliedTransformations = 4;
					}
				} else if (
					!(this || _global).rz.effectsSequence.length &&
					!(this || _global).ry.effectsSequence.length &&
					!(this || _global).rx.effectsSequence.length &&
					!(this || _global).or.effectsSequence.length
				) {
					(this || _global).pre
						.rotateZ(-(this || _global).rz.v)
						.rotateY((this || _global).ry.v)
						.rotateX((this || _global).rx.v)
						.rotateZ(-(this || _global).or.v[2])
						.rotateY((this || _global).or.v[1])
						.rotateX((this || _global).or.v[0]);
					(this || _global).appliedTransformations = 4;
				}
			}
			function autoOrient() {}
			function addDynamicProperty(prop) {
				this._addDynamicProperty(prop);
				(this || _global).elem.addDynamicProperty(prop);
				(this || _global)._isDirty = true;
			}
			function TransformProperty(elem2, data2, container) {
				(this || _global).elem = elem2;
				(this || _global).frameId = -1;
				(this || _global).propType = "transform";
				(this || _global).data = data2;
				(this || _global).v = new Matrix();
				(this || _global).pre = new Matrix();
				(this || _global).appliedTransformations = 0;
				this.initDynamicPropertyContainer(container || elem2);
				if (data2.p && data2.p.s) {
					(this || _global).px = PropertyFactory.getProp(
						elem2,
						data2.p.x,
						0,
						0,
						this || _global,
					);
					(this || _global).py = PropertyFactory.getProp(
						elem2,
						data2.p.y,
						0,
						0,
						this || _global,
					);
					if (data2.p.z) {
						(this || _global).pz = PropertyFactory.getProp(
							elem2,
							data2.p.z,
							0,
							0,
							this || _global,
						);
					}
				} else {
					(this || _global).p = PropertyFactory.getProp(
						elem2,
						data2.p || {
							k: [0, 0, 0],
						},
						1,
						0,
						this || _global,
					);
				}
				if (data2.rx) {
					(this || _global).rx = PropertyFactory.getProp(
						elem2,
						data2.rx,
						0,
						degToRads,
						this || _global,
					);
					(this || _global).ry = PropertyFactory.getProp(
						elem2,
						data2.ry,
						0,
						degToRads,
						this || _global,
					);
					(this || _global).rz = PropertyFactory.getProp(
						elem2,
						data2.rz,
						0,
						degToRads,
						this || _global,
					);
					if (data2.or.k[0].ti) {
						var i;
						var len = data2.or.k.length;
						for (i = 0; i < len; i += 1) {
							data2.or.k[i].to = null;
							data2.or.k[i].ti = null;
						}
					}
					(this || _global).or = PropertyFactory.getProp(
						elem2,
						data2.or,
						1,
						degToRads,
						this || _global,
					);
					(this || _global).or.sh = true;
				} else {
					(this || _global).r = PropertyFactory.getProp(
						elem2,
						data2.r || {
							k: 0,
						},
						0,
						degToRads,
						this || _global,
					);
				}
				if (data2.sk) {
					(this || _global).sk = PropertyFactory.getProp(
						elem2,
						data2.sk,
						0,
						degToRads,
						this || _global,
					);
					(this || _global).sa = PropertyFactory.getProp(
						elem2,
						data2.sa,
						0,
						degToRads,
						this || _global,
					);
				}
				(this || _global).a = PropertyFactory.getProp(
					elem2,
					data2.a || {
						k: [0, 0, 0],
					},
					1,
					0,
					this || _global,
				);
				(this || _global).s = PropertyFactory.getProp(
					elem2,
					data2.s || {
						k: [100, 100, 100],
					},
					1,
					0.01,
					this || _global,
				);
				if (data2.o) {
					(this || _global).o = PropertyFactory.getProp(
						elem2,
						data2.o,
						0,
						0.01,
						elem2,
					);
				} else {
					(this || _global).o = {
						_mdf: false,
						v: 1,
					};
				}
				(this || _global)._isDirty = true;
				if (!(this || _global).dynamicProperties.length) {
					this.getValue(true);
				}
			}
			TransformProperty.prototype = {
				applyToMatrix,
				getValue: processKeys,
				precalculateMatrix,
				autoOrient,
			};
			extendPrototype([DynamicPropertyContainer], TransformProperty);
			TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
			TransformProperty.prototype._addDynamicProperty =
				DynamicPropertyContainer.prototype.addDynamicProperty;
			function getTransformProperty(elem2, data2, container) {
				return new TransformProperty(elem2, data2, container);
			}
			return {
				getTransformProperty,
			};
		})();
		function ShapePath() {
			(this || _global).c = false;
			(this || _global)._length = 0;
			(this || _global)._maxLength = 8;
			(this || _global).v = createSizedArray((this || _global)._maxLength);
			(this || _global).o = createSizedArray((this || _global)._maxLength);
			(this || _global).i = createSizedArray((this || _global)._maxLength);
		}
		ShapePath.prototype.setPathData = function (closed, len) {
			(this || _global).c = closed;
			this.setLength(len);
			var i = 0;
			while (i < len) {
				(this || _global).v[i] = pointPool.newElement();
				(this || _global).o[i] = pointPool.newElement();
				(this || _global).i[i] = pointPool.newElement();
				i += 1;
			}
		};
		ShapePath.prototype.setLength = function (len) {
			while ((this || _global)._maxLength < len) {
				this.doubleArrayLength();
			}
			(this || _global)._length = len;
		};
		ShapePath.prototype.doubleArrayLength = function () {
			(this || _global).v = (this || _global).v.concat(
				createSizedArray((this || _global)._maxLength),
			);
			(this || _global).i = (this || _global).i.concat(
				createSizedArray((this || _global)._maxLength),
			);
			(this || _global).o = (this || _global).o.concat(
				createSizedArray((this || _global)._maxLength),
			);
			(this || _global)._maxLength *= 2;
		};
		ShapePath.prototype.setXYAt = function (x, y, type, pos, replace) {
			var arr;
			(this || _global)._length = Math.max((this || _global)._length, pos + 1);
			if ((this || _global)._length >= (this || _global)._maxLength) {
				this.doubleArrayLength();
			}
			switch (type) {
				case "v":
					arr = (this || _global).v;
					break;
				case "i":
					arr = (this || _global).i;
					break;
				case "o":
					arr = (this || _global).o;
					break;
				default:
					arr = [];
					break;
			}
			if (!arr[pos] || (arr[pos] && !replace)) {
				arr[pos] = pointPool.newElement();
			}
			arr[pos][0] = x;
			arr[pos][1] = y;
		};
		ShapePath.prototype.setTripleAt = function (
			vX,
			vY,
			oX,
			oY,
			iX,
			iY,
			pos,
			replace,
		) {
			this.setXYAt(vX, vY, "v", pos, replace);
			this.setXYAt(oX, oY, "o", pos, replace);
			this.setXYAt(iX, iY, "i", pos, replace);
		};
		ShapePath.prototype.reverse = function () {
			var newPath = new ShapePath();
			newPath.setPathData((this || _global).c, (this || _global)._length);
			var vertices = (this || _global).v;
			var outPoints = (this || _global).o;
			var inPoints = (this || _global).i;
			var init = 0;
			if ((this || _global).c) {
				newPath.setTripleAt(
					vertices[0][0],
					vertices[0][1],
					inPoints[0][0],
					inPoints[0][1],
					outPoints[0][0],
					outPoints[0][1],
					0,
					false,
				);
				init = 1;
			}
			var cnt = (this || _global)._length - 1;
			var len = (this || _global)._length;
			var i;
			for (i = init; i < len; i += 1) {
				newPath.setTripleAt(
					vertices[cnt][0],
					vertices[cnt][1],
					inPoints[cnt][0],
					inPoints[cnt][1],
					outPoints[cnt][0],
					outPoints[cnt][1],
					i,
					false,
				);
				cnt -= 1;
			}
			return newPath;
		};
		var ShapePropertyFactory = (function () {
			var initFrame = -999999;
			function interpolateShape(frameNum, previousValue, caching) {
				var iterationIndex = caching.lastIndex;
				var keyPropS;
				var keyPropE;
				var isHold;
				var j;
				var k;
				var jLen;
				var kLen;
				var perc;
				var vertexValue;
				var kf = (this || _global).keyframes;
				if (frameNum < kf[0].t - (this || _global).offsetTime) {
					keyPropS = kf[0].s[0];
					isHold = true;
					iterationIndex = 0;
				} else if (
					frameNum >=
					kf[kf.length - 1].t - (this || _global).offsetTime
				) {
					keyPropS = kf[kf.length - 1].s
						? kf[kf.length - 1].s[0]
						: kf[kf.length - 2].e[0];
					isHold = true;
				} else {
					var i = iterationIndex;
					var len = kf.length - 1;
					var flag = true;
					var keyData;
					var nextKeyData;
					while (flag) {
						keyData = kf[i];
						nextKeyData = kf[i + 1];
						if (nextKeyData.t - (this || _global).offsetTime > frameNum) {
							break;
						}
						if (i < len - 1) {
							i += 1;
						} else {
							flag = false;
						}
					}
					isHold = keyData.h === 1;
					iterationIndex = i;
					if (!isHold) {
						if (frameNum >= nextKeyData.t - (this || _global).offsetTime) {
							perc = 1;
						} else if (frameNum < keyData.t - (this || _global).offsetTime) {
							perc = 0;
						} else {
							var fnc;
							if (keyData.__fnct) {
								fnc = keyData.__fnct;
							} else {
								fnc = BezierFactory.getBezierEasing(
									keyData.o.x,
									keyData.o.y,
									keyData.i.x,
									keyData.i.y,
								).get;
								keyData.__fnct = fnc;
							}
							perc = fnc(
								(frameNum - (keyData.t - (this || _global).offsetTime)) /
									(nextKeyData.t -
										(this || _global).offsetTime -
										(keyData.t - (this || _global).offsetTime)),
							);
						}
						keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
					}
					keyPropS = keyData.s[0];
				}
				jLen = previousValue._length;
				kLen = keyPropS.i[0].length;
				caching.lastIndex = iterationIndex;
				for (j = 0; j < jLen; j += 1) {
					for (k = 0; k < kLen; k += 1) {
						vertexValue = isHold
							? keyPropS.i[j][k]
							: keyPropS.i[j][k] + (keyPropE.i[j][k] - keyPropS.i[j][k]) * perc;
						previousValue.i[j][k] = vertexValue;
						vertexValue = isHold
							? keyPropS.o[j][k]
							: keyPropS.o[j][k] + (keyPropE.o[j][k] - keyPropS.o[j][k]) * perc;
						previousValue.o[j][k] = vertexValue;
						vertexValue = isHold
							? keyPropS.v[j][k]
							: keyPropS.v[j][k] + (keyPropE.v[j][k] - keyPropS.v[j][k]) * perc;
						previousValue.v[j][k] = vertexValue;
					}
				}
			}
			function interpolateShapeCurrentTime() {
				var frameNum =
					(this || _global).comp.renderedFrame - (this || _global).offsetTime;
				var initTime =
					(this || _global).keyframes[0].t - (this || _global).offsetTime;
				var endTime =
					(this || _global).keyframes[(this || _global).keyframes.length - 1]
						.t - (this || _global).offsetTime;
				var lastFrame = (this || _global)._caching.lastFrame;
				if (
					!(
						lastFrame !== initFrame &&
						((lastFrame < initTime && frameNum < initTime) ||
							(lastFrame > endTime && frameNum > endTime))
					)
				) {
					(this || _global)._caching.lastIndex =
						lastFrame < frameNum ? (this || _global)._caching.lastIndex : 0;
					this.interpolateShape(
						frameNum,
						(this || _global).pv,
						(this || _global)._caching,
					);
				}
				(this || _global)._caching.lastFrame = frameNum;
				return (this || _global).pv;
			}
			function resetShape() {
				(this || _global).paths = (this || _global).localShapeCollection;
			}
			function shapesEqual(shape1, shape2) {
				if (shape1._length !== shape2._length || shape1.c !== shape2.c) {
					return false;
				}
				var i;
				var len = shape1._length;
				for (i = 0; i < len; i += 1) {
					if (
						shape1.v[i][0] !== shape2.v[i][0] ||
						shape1.v[i][1] !== shape2.v[i][1] ||
						shape1.o[i][0] !== shape2.o[i][0] ||
						shape1.o[i][1] !== shape2.o[i][1] ||
						shape1.i[i][0] !== shape2.i[i][0] ||
						shape1.i[i][1] !== shape2.i[i][1]
					) {
						return false;
					}
				}
				return true;
			}
			function setVValue(newPath) {
				if (!shapesEqual((this || _global).v, newPath)) {
					(this || _global).v = shapePool.clone(newPath);
					(this || _global).localShapeCollection.releaseShapes();
					(this || _global).localShapeCollection.addShape((this || _global).v);
					(this || _global)._mdf = true;
					(this || _global).paths = (this || _global).localShapeCollection;
				}
			}
			function processEffectsSequence() {
				if (
					(this || _global).elem.globalData.frameId ===
					(this || _global).frameId
				) {
					return;
				}
				if (!(this || _global).effectsSequence.length) {
					(this || _global)._mdf = false;
					return;
				}
				if ((this || _global).lock) {
					this.setVValue((this || _global).pv);
					return;
				}
				(this || _global).lock = true;
				(this || _global)._mdf = false;
				var finalValue;
				if ((this || _global).kf) {
					finalValue = (this || _global).pv;
				} else if ((this || _global).data.ks) {
					finalValue = (this || _global).data.ks.k;
				} else {
					finalValue = (this || _global).data.pt.k;
				}
				var i;
				var len = (this || _global).effectsSequence.length;
				for (i = 0; i < len; i += 1) {
					finalValue = (this || _global).effectsSequence[i](finalValue);
				}
				this.setVValue(finalValue);
				(this || _global).lock = false;
				(this || _global).frameId = (this || _global).elem.globalData.frameId;
			}
			function ShapeProperty(elem2, data2, type) {
				(this || _global).propType = "shape";
				(this || _global).comp = elem2.comp;
				(this || _global).container = elem2;
				(this || _global).elem = elem2;
				(this || _global).data = data2;
				(this || _global).k = false;
				(this || _global).kf = false;
				(this || _global)._mdf = false;
				var pathData = type === 3 ? data2.pt.k : data2.ks.k;
				(this || _global).v = shapePool.clone(pathData);
				(this || _global).pv = shapePool.clone((this || _global).v);
				(this || _global).localShapeCollection =
					shapeCollectionPool.newShapeCollection();
				(this || _global).paths = (this || _global).localShapeCollection;
				(this || _global).paths.addShape((this || _global).v);
				(this || _global).reset = resetShape;
				(this || _global).effectsSequence = [];
			}
			function addEffect(effectFunction) {
				(this || _global).effectsSequence.push(effectFunction);
				(this || _global).container.addDynamicProperty(this || _global);
			}
			ShapeProperty.prototype.interpolateShape = interpolateShape;
			ShapeProperty.prototype.getValue = processEffectsSequence;
			ShapeProperty.prototype.setVValue = setVValue;
			ShapeProperty.prototype.addEffect = addEffect;
			function KeyframedShapeProperty(elem2, data2, type) {
				(this || _global).propType = "shape";
				(this || _global).comp = elem2.comp;
				(this || _global).elem = elem2;
				(this || _global).container = elem2;
				(this || _global).offsetTime = elem2.data.st;
				(this || _global).keyframes = type === 3 ? data2.pt.k : data2.ks.k;
				(this || _global).k = true;
				(this || _global).kf = true;
				var len = (this || _global).keyframes[0].s[0].i.length;
				(this || _global).v = shapePool.newElement();
				(this || _global).v.setPathData(
					(this || _global).keyframes[0].s[0].c,
					len,
				);
				(this || _global).pv = shapePool.clone((this || _global).v);
				(this || _global).localShapeCollection =
					shapeCollectionPool.newShapeCollection();
				(this || _global).paths = (this || _global).localShapeCollection;
				(this || _global).paths.addShape((this || _global).v);
				(this || _global).lastFrame = initFrame;
				(this || _global).reset = resetShape;
				(this || _global)._caching = {
					lastFrame: initFrame,
					lastIndex: 0,
				};
				(this || _global).effectsSequence = [
					interpolateShapeCurrentTime.bind(this || _global),
				];
			}
			KeyframedShapeProperty.prototype.getValue = processEffectsSequence;
			KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
			KeyframedShapeProperty.prototype.setVValue = setVValue;
			KeyframedShapeProperty.prototype.addEffect = addEffect;
			var EllShapeProperty = (function () {
				var cPoint = roundCorner;
				function EllShapePropertyFactory(elem2, data2) {
					(this || _global).v = shapePool.newElement();
					(this || _global).v.setPathData(true, 4);
					(this || _global).localShapeCollection =
						shapeCollectionPool.newShapeCollection();
					(this || _global).paths = (this || _global).localShapeCollection;
					(this || _global).localShapeCollection.addShape((this || _global).v);
					(this || _global).d = data2.d;
					(this || _global).elem = elem2;
					(this || _global).comp = elem2.comp;
					(this || _global).frameId = -1;
					this.initDynamicPropertyContainer(elem2);
					(this || _global).p = PropertyFactory.getProp(
						elem2,
						data2.p,
						1,
						0,
						this || _global,
					);
					(this || _global).s = PropertyFactory.getProp(
						elem2,
						data2.s,
						1,
						0,
						this || _global,
					);
					if ((this || _global).dynamicProperties.length) {
						(this || _global).k = true;
					} else {
						(this || _global).k = false;
						this.convertEllToPath();
					}
				}
				EllShapePropertyFactory.prototype = {
					reset: resetShape,
					getValue: function () {
						if (
							(this || _global).elem.globalData.frameId ===
							(this || _global).frameId
						) {
							return;
						}
						(this || _global).frameId = (
							this || _global
						).elem.globalData.frameId;
						this.iterateDynamicProperties();
						if ((this || _global)._mdf) {
							this.convertEllToPath();
						}
					},
					convertEllToPath: function () {
						var p0 = (this || _global).p.v[0];
						var p1 = (this || _global).p.v[1];
						var s0 = (this || _global).s.v[0] / 2;
						var s1 = (this || _global).s.v[1] / 2;
						var _cw = (this || _global).d !== 3;
						var _v = (this || _global).v;
						_v.v[0][0] = p0;
						_v.v[0][1] = p1 - s1;
						_v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
						_v.v[1][1] = p1;
						_v.v[2][0] = p0;
						_v.v[2][1] = p1 + s1;
						_v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
						_v.v[3][1] = p1;
						_v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
						_v.i[0][1] = p1 - s1;
						_v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
						_v.i[1][1] = p1 - s1 * cPoint;
						_v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
						_v.i[2][1] = p1 + s1;
						_v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
						_v.i[3][1] = p1 + s1 * cPoint;
						_v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
						_v.o[0][1] = p1 - s1;
						_v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
						_v.o[1][1] = p1 + s1 * cPoint;
						_v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
						_v.o[2][1] = p1 + s1;
						_v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
						_v.o[3][1] = p1 - s1 * cPoint;
					},
				};
				extendPrototype([DynamicPropertyContainer], EllShapePropertyFactory);
				return EllShapePropertyFactory;
			})();
			var StarShapeProperty = (function () {
				function StarShapePropertyFactory(elem2, data2) {
					(this || _global).v = shapePool.newElement();
					(this || _global).v.setPathData(true, 0);
					(this || _global).elem = elem2;
					(this || _global).comp = elem2.comp;
					(this || _global).data = data2;
					(this || _global).frameId = -1;
					(this || _global).d = data2.d;
					this.initDynamicPropertyContainer(elem2);
					if (data2.sy === 1) {
						(this || _global).ir = PropertyFactory.getProp(
							elem2,
							data2.ir,
							0,
							0,
							this || _global,
						);
						(this || _global).is = PropertyFactory.getProp(
							elem2,
							data2.is,
							0,
							0.01,
							this || _global,
						);
						(this || _global).convertToPath = (
							this || _global
						).convertStarToPath;
					} else {
						(this || _global).convertToPath = (
							this || _global
						).convertPolygonToPath;
					}
					(this || _global).pt = PropertyFactory.getProp(
						elem2,
						data2.pt,
						0,
						0,
						this || _global,
					);
					(this || _global).p = PropertyFactory.getProp(
						elem2,
						data2.p,
						1,
						0,
						this || _global,
					);
					(this || _global).r = PropertyFactory.getProp(
						elem2,
						data2.r,
						0,
						degToRads,
						this || _global,
					);
					(this || _global).or = PropertyFactory.getProp(
						elem2,
						data2.or,
						0,
						0,
						this || _global,
					);
					(this || _global).os = PropertyFactory.getProp(
						elem2,
						data2.os,
						0,
						0.01,
						this || _global,
					);
					(this || _global).localShapeCollection =
						shapeCollectionPool.newShapeCollection();
					(this || _global).localShapeCollection.addShape((this || _global).v);
					(this || _global).paths = (this || _global).localShapeCollection;
					if ((this || _global).dynamicProperties.length) {
						(this || _global).k = true;
					} else {
						(this || _global).k = false;
						this.convertToPath();
					}
				}
				StarShapePropertyFactory.prototype = {
					reset: resetShape,
					getValue: function () {
						if (
							(this || _global).elem.globalData.frameId ===
							(this || _global).frameId
						) {
							return;
						}
						(this || _global).frameId = (
							this || _global
						).elem.globalData.frameId;
						this.iterateDynamicProperties();
						if ((this || _global)._mdf) {
							this.convertToPath();
						}
					},
					convertStarToPath: function () {
						var numPts = Math.floor((this || _global).pt.v) * 2;
						var angle = (Math.PI * 2) / numPts;
						var longFlag = true;
						var longRad = (this || _global).or.v;
						var shortRad = (this || _global).ir.v;
						var longRound = (this || _global).os.v;
						var shortRound = (this || _global).is.v;
						var longPerimSegment = (2 * Math.PI * longRad) / (numPts * 2);
						var shortPerimSegment = (2 * Math.PI * shortRad) / (numPts * 2);
						var i;
						var rad;
						var roundness;
						var perimSegment;
						var currentAng = -Math.PI / 2;
						currentAng += (this || _global).r.v;
						var dir = (this || _global).data.d === 3 ? -1 : 1;
						(this || _global).v._length = 0;
						for (i = 0; i < numPts; i += 1) {
							rad = longFlag ? longRad : shortRad;
							roundness = longFlag ? longRound : shortRound;
							perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
							var x = rad * Math.cos(currentAng);
							var y = rad * Math.sin(currentAng);
							var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
							var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
							x += +(this || _global).p.v[0];
							y += +(this || _global).p.v[1];
							(this || _global).v.setTripleAt(
								x,
								y,
								x - ox * perimSegment * roundness * dir,
								y - oy * perimSegment * roundness * dir,
								x + ox * perimSegment * roundness * dir,
								y + oy * perimSegment * roundness * dir,
								i,
								true,
							);
							longFlag = !longFlag;
							currentAng += angle * dir;
						}
					},
					convertPolygonToPath: function () {
						var numPts = Math.floor((this || _global).pt.v);
						var angle = (Math.PI * 2) / numPts;
						var rad = (this || _global).or.v;
						var roundness = (this || _global).os.v;
						var perimSegment = (2 * Math.PI * rad) / (numPts * 4);
						var i;
						var currentAng = -Math.PI * 0.5;
						var dir = (this || _global).data.d === 3 ? -1 : 1;
						currentAng += (this || _global).r.v;
						(this || _global).v._length = 0;
						for (i = 0; i < numPts; i += 1) {
							var x = rad * Math.cos(currentAng);
							var y = rad * Math.sin(currentAng);
							var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
							var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
							x += +(this || _global).p.v[0];
							y += +(this || _global).p.v[1];
							(this || _global).v.setTripleAt(
								x,
								y,
								x - ox * perimSegment * roundness * dir,
								y - oy * perimSegment * roundness * dir,
								x + ox * perimSegment * roundness * dir,
								y + oy * perimSegment * roundness * dir,
								i,
								true,
							);
							currentAng += angle * dir;
						}
						(this || _global).paths.length = 0;
						(this || _global).paths[0] = (this || _global).v;
					},
				};
				extendPrototype([DynamicPropertyContainer], StarShapePropertyFactory);
				return StarShapePropertyFactory;
			})();
			var RectShapeProperty = (function () {
				function RectShapePropertyFactory(elem2, data2) {
					(this || _global).v = shapePool.newElement();
					(this || _global).v.c = true;
					(this || _global).localShapeCollection =
						shapeCollectionPool.newShapeCollection();
					(this || _global).localShapeCollection.addShape((this || _global).v);
					(this || _global).paths = (this || _global).localShapeCollection;
					(this || _global).elem = elem2;
					(this || _global).comp = elem2.comp;
					(this || _global).frameId = -1;
					(this || _global).d = data2.d;
					this.initDynamicPropertyContainer(elem2);
					(this || _global).p = PropertyFactory.getProp(
						elem2,
						data2.p,
						1,
						0,
						this || _global,
					);
					(this || _global).s = PropertyFactory.getProp(
						elem2,
						data2.s,
						1,
						0,
						this || _global,
					);
					(this || _global).r = PropertyFactory.getProp(
						elem2,
						data2.r,
						0,
						0,
						this || _global,
					);
					if ((this || _global).dynamicProperties.length) {
						(this || _global).k = true;
					} else {
						(this || _global).k = false;
						this.convertRectToPath();
					}
				}
				RectShapePropertyFactory.prototype = {
					convertRectToPath: function () {
						var p0 = (this || _global).p.v[0];
						var p1 = (this || _global).p.v[1];
						var v0 = (this || _global).s.v[0] / 2;
						var v1 = (this || _global).s.v[1] / 2;
						var round = bmMin(v0, v1, (this || _global).r.v);
						var cPoint = round * (1 - roundCorner);
						(this || _global).v._length = 0;
						if ((this || _global).d === 2 || (this || _global).d === 1) {
							(this || _global).v.setTripleAt(
								p0 + v0,
								p1 - v1 + round,
								p0 + v0,
								p1 - v1 + round,
								p0 + v0,
								p1 - v1 + cPoint,
								0,
								true,
							);
							(this || _global).v.setTripleAt(
								p0 + v0,
								p1 + v1 - round,
								p0 + v0,
								p1 + v1 - cPoint,
								p0 + v0,
								p1 + v1 - round,
								1,
								true,
							);
							if (round !== 0) {
								(this || _global).v.setTripleAt(
									p0 + v0 - round,
									p1 + v1,
									p0 + v0 - round,
									p1 + v1,
									p0 + v0 - cPoint,
									p1 + v1,
									2,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 - v0 + round,
									p1 + v1,
									p0 - v0 + cPoint,
									p1 + v1,
									p0 - v0 + round,
									p1 + v1,
									3,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 - v0,
									p1 + v1 - round,
									p0 - v0,
									p1 + v1 - round,
									p0 - v0,
									p1 + v1 - cPoint,
									4,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 - v0,
									p1 - v1 + round,
									p0 - v0,
									p1 - v1 + cPoint,
									p0 - v0,
									p1 - v1 + round,
									5,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 - v0 + round,
									p1 - v1,
									p0 - v0 + round,
									p1 - v1,
									p0 - v0 + cPoint,
									p1 - v1,
									6,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 + v0 - round,
									p1 - v1,
									p0 + v0 - cPoint,
									p1 - v1,
									p0 + v0 - round,
									p1 - v1,
									7,
									true,
								);
							} else {
								(this || _global).v.setTripleAt(
									p0 - v0,
									p1 + v1,
									p0 - v0 + cPoint,
									p1 + v1,
									p0 - v0,
									p1 + v1,
									2,
								);
								(this || _global).v.setTripleAt(
									p0 - v0,
									p1 - v1,
									p0 - v0,
									p1 - v1 + cPoint,
									p0 - v0,
									p1 - v1,
									3,
								);
							}
						} else {
							(this || _global).v.setTripleAt(
								p0 + v0,
								p1 - v1 + round,
								p0 + v0,
								p1 - v1 + cPoint,
								p0 + v0,
								p1 - v1 + round,
								0,
								true,
							);
							if (round !== 0) {
								(this || _global).v.setTripleAt(
									p0 + v0 - round,
									p1 - v1,
									p0 + v0 - round,
									p1 - v1,
									p0 + v0 - cPoint,
									p1 - v1,
									1,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 - v0 + round,
									p1 - v1,
									p0 - v0 + cPoint,
									p1 - v1,
									p0 - v0 + round,
									p1 - v1,
									2,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 - v0,
									p1 - v1 + round,
									p0 - v0,
									p1 - v1 + round,
									p0 - v0,
									p1 - v1 + cPoint,
									3,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 - v0,
									p1 + v1 - round,
									p0 - v0,
									p1 + v1 - cPoint,
									p0 - v0,
									p1 + v1 - round,
									4,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 - v0 + round,
									p1 + v1,
									p0 - v0 + round,
									p1 + v1,
									p0 - v0 + cPoint,
									p1 + v1,
									5,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 + v0 - round,
									p1 + v1,
									p0 + v0 - cPoint,
									p1 + v1,
									p0 + v0 - round,
									p1 + v1,
									6,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 + v0,
									p1 + v1 - round,
									p0 + v0,
									p1 + v1 - round,
									p0 + v0,
									p1 + v1 - cPoint,
									7,
									true,
								);
							} else {
								(this || _global).v.setTripleAt(
									p0 - v0,
									p1 - v1,
									p0 - v0 + cPoint,
									p1 - v1,
									p0 - v0,
									p1 - v1,
									1,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 - v0,
									p1 + v1,
									p0 - v0,
									p1 + v1 - cPoint,
									p0 - v0,
									p1 + v1,
									2,
									true,
								);
								(this || _global).v.setTripleAt(
									p0 + v0,
									p1 + v1,
									p0 + v0 - cPoint,
									p1 + v1,
									p0 + v0,
									p1 + v1,
									3,
									true,
								);
							}
						}
					},
					getValue: function () {
						if (
							(this || _global).elem.globalData.frameId ===
							(this || _global).frameId
						) {
							return;
						}
						(this || _global).frameId = (
							this || _global
						).elem.globalData.frameId;
						this.iterateDynamicProperties();
						if ((this || _global)._mdf) {
							this.convertRectToPath();
						}
					},
					reset: resetShape,
				};
				extendPrototype([DynamicPropertyContainer], RectShapePropertyFactory);
				return RectShapePropertyFactory;
			})();
			function getShapeProp(elem2, data2, type) {
				var prop;
				if (type === 3 || type === 4) {
					var dataProp = type === 3 ? data2.pt : data2.ks;
					var keys = dataProp.k;
					if (keys.length) {
						prop = new KeyframedShapeProperty(elem2, data2, type);
					} else {
						prop = new ShapeProperty(elem2, data2, type);
					}
				} else if (type === 5) {
					prop = new RectShapeProperty(elem2, data2);
				} else if (type === 6) {
					prop = new EllShapeProperty(elem2, data2);
				} else if (type === 7) {
					prop = new StarShapeProperty(elem2, data2);
				}
				if (prop.k) {
					elem2.addDynamicProperty(prop);
				}
				return prop;
			}
			function getConstructorFunction() {
				return ShapeProperty;
			}
			function getKeyframedConstructorFunction() {
				return KeyframedShapeProperty;
			}
			var ob2 = {};
			ob2.getShapeProp = getShapeProp;
			ob2.getConstructorFunction = getConstructorFunction;
			ob2.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
			return ob2;
		})();
		var ShapeModifiers = (function () {
			var ob2 = {};
			var modifiers = {};
			ob2.registerModifier = registerModifier;
			ob2.getModifier = getModifier;
			function registerModifier(nm, factory) {
				if (!modifiers[nm]) {
					modifiers[nm] = factory;
				}
			}
			function getModifier(nm, elem2, data2) {
				return new modifiers[nm](elem2, data2);
			}
			return ob2;
		})();
		function ShapeModifier() {}
		ShapeModifier.prototype.initModifierProperties = function () {};
		ShapeModifier.prototype.addShapeToModifier = function () {};
		ShapeModifier.prototype.addShape = function (data2) {
			if (!(this || _global).closed) {
				data2.sh.container.addDynamicProperty(data2.sh);
				var shapeData = {
					shape: data2.sh,
					data: data2,
					localShapeCollection: shapeCollectionPool.newShapeCollection(),
				};
				(this || _global).shapes.push(shapeData);
				this.addShapeToModifier(shapeData);
				if ((this || _global)._isAnimated) {
					data2.setAsAnimated();
				}
			}
		};
		ShapeModifier.prototype.init = function (elem2, data2) {
			(this || _global).shapes = [];
			(this || _global).elem = elem2;
			this.initDynamicPropertyContainer(elem2);
			this.initModifierProperties(elem2, data2);
			(this || _global).frameId = initialDefaultFrame;
			(this || _global).closed = false;
			(this || _global).k = false;
			if ((this || _global).dynamicProperties.length) {
				(this || _global).k = true;
			} else {
				this.getValue(true);
			}
		};
		ShapeModifier.prototype.processKeys = function () {
			if (
				(this || _global).elem.globalData.frameId === (this || _global).frameId
			) {
				return;
			}
			(this || _global).frameId = (this || _global).elem.globalData.frameId;
			this.iterateDynamicProperties();
		};
		extendPrototype([DynamicPropertyContainer], ShapeModifier);
		function TrimModifier() {}
		extendPrototype([ShapeModifier], TrimModifier);
		TrimModifier.prototype.initModifierProperties = function (elem2, data2) {
			(this || _global).s = PropertyFactory.getProp(
				elem2,
				data2.s,
				0,
				0.01,
				this || _global,
			);
			(this || _global).e = PropertyFactory.getProp(
				elem2,
				data2.e,
				0,
				0.01,
				this || _global,
			);
			(this || _global).o = PropertyFactory.getProp(
				elem2,
				data2.o,
				0,
				0,
				this || _global,
			);
			(this || _global).sValue = 0;
			(this || _global).eValue = 0;
			(this || _global).getValue = (this || _global).processKeys;
			(this || _global).m = data2.m;
			(this || _global)._isAnimated =
				!!(this || _global).s.effectsSequence.length ||
				!!(this || _global).e.effectsSequence.length ||
				!!(this || _global).o.effectsSequence.length;
		};
		TrimModifier.prototype.addShapeToModifier = function (shapeData) {
			shapeData.pathsData = [];
		};
		TrimModifier.prototype.calculateShapeEdges = function (
			s,
			e,
			shapeLength,
			addedLength,
			totalModifierLength,
		) {
			var segments = [];
			if (e <= 1) {
				segments.push({
					s,
					e,
				});
			} else if (s >= 1) {
				segments.push({
					s: s - 1,
					e: e - 1,
				});
			} else {
				segments.push({
					s,
					e: 1,
				});
				segments.push({
					s: 0,
					e: e - 1,
				});
			}
			var shapeSegments = [];
			var i;
			var len = segments.length;
			var segmentOb;
			for (i = 0; i < len; i += 1) {
				segmentOb = segments[i];
				if (
					!(
						segmentOb.e * totalModifierLength < addedLength ||
						segmentOb.s * totalModifierLength > addedLength + shapeLength
					)
				) {
					var shapeS;
					var shapeE;
					if (segmentOb.s * totalModifierLength <= addedLength) {
						shapeS = 0;
					} else {
						shapeS =
							(segmentOb.s * totalModifierLength - addedLength) / shapeLength;
					}
					if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
						shapeE = 1;
					} else {
						shapeE =
							(segmentOb.e * totalModifierLength - addedLength) / shapeLength;
					}
					shapeSegments.push([shapeS, shapeE]);
				}
			}
			if (!shapeSegments.length) {
				shapeSegments.push([0, 0]);
			}
			return shapeSegments;
		};
		TrimModifier.prototype.releasePathsData = function (pathsData) {
			var i;
			var len = pathsData.length;
			for (i = 0; i < len; i += 1) {
				segmentsLengthPool.release(pathsData[i]);
			}
			pathsData.length = 0;
			return pathsData;
		};
		TrimModifier.prototype.processShapes = function (_isFirstFrame) {
			var s;
			var e;
			if ((this || _global)._mdf || _isFirstFrame) {
				var o = ((this || _global).o.v % 360) / 360;
				if (o < 0) {
					o += 1;
				}
				if ((this || _global).s.v > 1) {
					s = 1 + o;
				} else if ((this || _global).s.v < 0) {
					s = 0 + o;
				} else {
					s = (this || _global).s.v + o;
				}
				if ((this || _global).e.v > 1) {
					e = 1 + o;
				} else if ((this || _global).e.v < 0) {
					e = 0 + o;
				} else {
					e = (this || _global).e.v + o;
				}
				if (s > e) {
					var _s = s;
					s = e;
					e = _s;
				}
				s = Math.round(s * 1e4) * 1e-4;
				e = Math.round(e * 1e4) * 1e-4;
				(this || _global).sValue = s;
				(this || _global).eValue = e;
			} else {
				s = (this || _global).sValue;
				e = (this || _global).eValue;
			}
			var shapePaths;
			var i;
			var len = (this || _global).shapes.length;
			var j;
			var jLen;
			var pathsData;
			var pathData;
			var totalShapeLength;
			var totalModifierLength = 0;
			if (e === s) {
				for (i = 0; i < len; i += 1) {
					(this || _global).shapes[i].localShapeCollection.releaseShapes();
					(this || _global).shapes[i].shape._mdf = true;
					(this || _global).shapes[i].shape.paths = (this || _global).shapes[
						i
					].localShapeCollection;
					if ((this || _global)._mdf) {
						(this || _global).shapes[i].pathsData.length = 0;
					}
				}
			} else if (!((e === 1 && s === 0) || (e === 0 && s === 1))) {
				var segments = [];
				var shapeData;
				var localShapeCollection;
				for (i = 0; i < len; i += 1) {
					shapeData = (this || _global).shapes[i];
					if (
						!shapeData.shape._mdf &&
						!(this || _global)._mdf &&
						!_isFirstFrame &&
						(this || _global).m !== 2
					) {
						shapeData.shape.paths = shapeData.localShapeCollection;
					} else {
						shapePaths = shapeData.shape.paths;
						jLen = shapePaths._length;
						totalShapeLength = 0;
						if (!shapeData.shape._mdf && shapeData.pathsData.length) {
							totalShapeLength = shapeData.totalShapeLength;
						} else {
							pathsData = this.releasePathsData(shapeData.pathsData);
							for (j = 0; j < jLen; j += 1) {
								pathData = bez.getSegmentsLength(shapePaths.shapes[j]);
								pathsData.push(pathData);
								totalShapeLength += pathData.totalLength;
							}
							shapeData.totalShapeLength = totalShapeLength;
							shapeData.pathsData = pathsData;
						}
						totalModifierLength += totalShapeLength;
						shapeData.shape._mdf = true;
					}
				}
				var shapeS = s;
				var shapeE = e;
				var addedLength = 0;
				var edges;
				for (i = len - 1; i >= 0; i -= 1) {
					shapeData = (this || _global).shapes[i];
					if (shapeData.shape._mdf) {
						localShapeCollection = shapeData.localShapeCollection;
						localShapeCollection.releaseShapes();
						if ((this || _global).m === 2 && len > 1) {
							edges = this.calculateShapeEdges(
								s,
								e,
								shapeData.totalShapeLength,
								addedLength,
								totalModifierLength,
							);
							addedLength += shapeData.totalShapeLength;
						} else {
							edges = [[shapeS, shapeE]];
						}
						jLen = edges.length;
						for (j = 0; j < jLen; j += 1) {
							shapeS = edges[j][0];
							shapeE = edges[j][1];
							segments.length = 0;
							if (shapeE <= 1) {
								segments.push({
									s: shapeData.totalShapeLength * shapeS,
									e: shapeData.totalShapeLength * shapeE,
								});
							} else if (shapeS >= 1) {
								segments.push({
									s: shapeData.totalShapeLength * (shapeS - 1),
									e: shapeData.totalShapeLength * (shapeE - 1),
								});
							} else {
								segments.push({
									s: shapeData.totalShapeLength * shapeS,
									e: shapeData.totalShapeLength,
								});
								segments.push({
									s: 0,
									e: shapeData.totalShapeLength * (shapeE - 1),
								});
							}
							var newShapesData = this.addShapes(shapeData, segments[0]);
							if (segments[0].s !== segments[0].e) {
								if (segments.length > 1) {
									var lastShapeInCollection =
										shapeData.shape.paths.shapes[
											shapeData.shape.paths._length - 1
										];
									if (lastShapeInCollection.c) {
										var lastShape = newShapesData.pop();
										this.addPaths(newShapesData, localShapeCollection);
										newShapesData = this.addShapes(
											shapeData,
											segments[1],
											lastShape,
										);
									} else {
										this.addPaths(newShapesData, localShapeCollection);
										newShapesData = this.addShapes(shapeData, segments[1]);
									}
								}
								this.addPaths(newShapesData, localShapeCollection);
							}
						}
						shapeData.shape.paths = localShapeCollection;
					}
				}
			} else if ((this || _global)._mdf) {
				for (i = 0; i < len; i += 1) {
					(this || _global).shapes[i].pathsData.length = 0;
					(this || _global).shapes[i].shape._mdf = true;
				}
			}
		};
		TrimModifier.prototype.addPaths = function (
			newPaths,
			localShapeCollection,
		) {
			var i;
			var len = newPaths.length;
			for (i = 0; i < len; i += 1) {
				localShapeCollection.addShape(newPaths[i]);
			}
		};
		TrimModifier.prototype.addSegment = function (
			pt1,
			pt2,
			pt3,
			pt4,
			shapePath,
			pos,
			newShape,
		) {
			shapePath.setXYAt(pt2[0], pt2[1], "o", pos);
			shapePath.setXYAt(pt3[0], pt3[1], "i", pos + 1);
			if (newShape) {
				shapePath.setXYAt(pt1[0], pt1[1], "v", pos);
			}
			shapePath.setXYAt(pt4[0], pt4[1], "v", pos + 1);
		};
		TrimModifier.prototype.addSegmentFromArray = function (
			points,
			shapePath,
			pos,
			newShape,
		) {
			shapePath.setXYAt(points[1], points[5], "o", pos);
			shapePath.setXYAt(points[2], points[6], "i", pos + 1);
			if (newShape) {
				shapePath.setXYAt(points[0], points[4], "v", pos);
			}
			shapePath.setXYAt(points[3], points[7], "v", pos + 1);
		};
		TrimModifier.prototype.addShapes = function (
			shapeData,
			shapeSegment,
			shapePath,
		) {
			var pathsData = shapeData.pathsData;
			var shapePaths = shapeData.shape.paths.shapes;
			var i;
			var len = shapeData.shape.paths._length;
			var j;
			var jLen;
			var addedLength = 0;
			var currentLengthData;
			var segmentCount;
			var lengths;
			var segment;
			var shapes = [];
			var initPos;
			var newShape = true;
			if (!shapePath) {
				shapePath = shapePool.newElement();
				segmentCount = 0;
				initPos = 0;
			} else {
				segmentCount = shapePath._length;
				initPos = shapePath._length;
			}
			shapes.push(shapePath);
			for (i = 0; i < len; i += 1) {
				lengths = pathsData[i].lengths;
				shapePath.c = shapePaths[i].c;
				jLen = shapePaths[i].c ? lengths.length : lengths.length + 1;
				for (j = 1; j < jLen; j += 1) {
					currentLengthData = lengths[j - 1];
					if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
						addedLength += currentLengthData.addedLength;
						shapePath.c = false;
					} else if (addedLength > shapeSegment.e) {
						shapePath.c = false;
						break;
					} else {
						if (
							shapeSegment.s <= addedLength &&
							shapeSegment.e >= addedLength + currentLengthData.addedLength
						) {
							this.addSegment(
								shapePaths[i].v[j - 1],
								shapePaths[i].o[j - 1],
								shapePaths[i].i[j],
								shapePaths[i].v[j],
								shapePath,
								segmentCount,
								newShape,
							);
							newShape = false;
						} else {
							segment = bez.getNewSegment(
								shapePaths[i].v[j - 1],
								shapePaths[i].v[j],
								shapePaths[i].o[j - 1],
								shapePaths[i].i[j],
								(shapeSegment.s - addedLength) / currentLengthData.addedLength,
								(shapeSegment.e - addedLength) / currentLengthData.addedLength,
								lengths[j - 1],
							);
							this.addSegmentFromArray(
								segment,
								shapePath,
								segmentCount,
								newShape,
							);
							newShape = false;
							shapePath.c = false;
						}
						addedLength += currentLengthData.addedLength;
						segmentCount += 1;
					}
				}
				if (shapePaths[i].c && lengths.length) {
					currentLengthData = lengths[j - 1];
					if (addedLength <= shapeSegment.e) {
						var segmentLength = lengths[j - 1].addedLength;
						if (
							shapeSegment.s <= addedLength &&
							shapeSegment.e >= addedLength + segmentLength
						) {
							this.addSegment(
								shapePaths[i].v[j - 1],
								shapePaths[i].o[j - 1],
								shapePaths[i].i[0],
								shapePaths[i].v[0],
								shapePath,
								segmentCount,
								newShape,
							);
							newShape = false;
						} else {
							segment = bez.getNewSegment(
								shapePaths[i].v[j - 1],
								shapePaths[i].v[0],
								shapePaths[i].o[j - 1],
								shapePaths[i].i[0],
								(shapeSegment.s - addedLength) / segmentLength,
								(shapeSegment.e - addedLength) / segmentLength,
								lengths[j - 1],
							);
							this.addSegmentFromArray(
								segment,
								shapePath,
								segmentCount,
								newShape,
							);
							newShape = false;
							shapePath.c = false;
						}
					} else {
						shapePath.c = false;
					}
					addedLength += currentLengthData.addedLength;
					segmentCount += 1;
				}
				if (shapePath._length) {
					shapePath.setXYAt(
						shapePath.v[initPos][0],
						shapePath.v[initPos][1],
						"i",
						initPos,
					);
					shapePath.setXYAt(
						shapePath.v[shapePath._length - 1][0],
						shapePath.v[shapePath._length - 1][1],
						"o",
						shapePath._length - 1,
					);
				}
				if (addedLength > shapeSegment.e) {
					break;
				}
				if (i < len - 1) {
					shapePath = shapePool.newElement();
					newShape = true;
					shapes.push(shapePath);
					segmentCount = 0;
				}
			}
			return shapes;
		};
		ShapeModifiers.registerModifier("tm", TrimModifier);
		function RoundCornersModifier() {}
		extendPrototype([ShapeModifier], RoundCornersModifier);
		RoundCornersModifier.prototype.initModifierProperties = function (
			elem2,
			data2,
		) {
			(this || _global).getValue = (this || _global).processKeys;
			(this || _global).rd = PropertyFactory.getProp(
				elem2,
				data2.r,
				0,
				null,
				this || _global,
			);
			(this || _global)._isAnimated = !!(this || _global).rd.effectsSequence
				.length;
		};
		RoundCornersModifier.prototype.processPath = function (path, round) {
			var clonedPath = shapePool.newElement();
			clonedPath.c = path.c;
			var i;
			var len = path._length;
			var currentV;
			var currentI;
			var currentO;
			var closerV;
			var distance;
			var newPosPerc;
			var index2 = 0;
			var vX;
			var vY;
			var oX;
			var oY;
			var iX;
			var iY;
			for (i = 0; i < len; i += 1) {
				currentV = path.v[i];
				currentO = path.o[i];
				currentI = path.i[i];
				if (
					currentV[0] === currentO[0] &&
					currentV[1] === currentO[1] &&
					currentV[0] === currentI[0] &&
					currentV[1] === currentI[1]
				) {
					if ((i === 0 || i === len - 1) && !path.c) {
						clonedPath.setTripleAt(
							currentV[0],
							currentV[1],
							currentO[0],
							currentO[1],
							currentI[0],
							currentI[1],
							index2,
						);
						index2 += 1;
					} else {
						if (i === 0) {
							closerV = path.v[len - 1];
						} else {
							closerV = path.v[i - 1];
						}
						distance = Math.sqrt(
							Math.pow(currentV[0] - closerV[0], 2) +
								Math.pow(currentV[1] - closerV[1], 2),
						);
						newPosPerc = distance
							? Math.min(distance / 2, round) / distance
							: 0;
						iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
						vX = iX;
						iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;
						vY = iY;
						oX = vX - (vX - currentV[0]) * roundCorner;
						oY = vY - (vY - currentV[1]) * roundCorner;
						clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
						index2 += 1;
						if (i === len - 1) {
							closerV = path.v[0];
						} else {
							closerV = path.v[i + 1];
						}
						distance = Math.sqrt(
							Math.pow(currentV[0] - closerV[0], 2) +
								Math.pow(currentV[1] - closerV[1], 2),
						);
						newPosPerc = distance
							? Math.min(distance / 2, round) / distance
							: 0;
						oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
						vX = oX;
						oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;
						vY = oY;
						iX = vX - (vX - currentV[0]) * roundCorner;
						iY = vY - (vY - currentV[1]) * roundCorner;
						clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
						index2 += 1;
					}
				} else {
					clonedPath.setTripleAt(
						path.v[i][0],
						path.v[i][1],
						path.o[i][0],
						path.o[i][1],
						path.i[i][0],
						path.i[i][1],
						index2,
					);
					index2 += 1;
				}
			}
			return clonedPath;
		};
		RoundCornersModifier.prototype.processShapes = function (_isFirstFrame) {
			var shapePaths;
			var i;
			var len = (this || _global).shapes.length;
			var j;
			var jLen;
			var rd = (this || _global).rd.v;
			if (rd !== 0) {
				var shapeData;
				var localShapeCollection;
				for (i = 0; i < len; i += 1) {
					shapeData = (this || _global).shapes[i];
					localShapeCollection = shapeData.localShapeCollection;
					if (
						!(
							!shapeData.shape._mdf &&
							!(this || _global)._mdf &&
							!_isFirstFrame
						)
					) {
						localShapeCollection.releaseShapes();
						shapeData.shape._mdf = true;
						shapePaths = shapeData.shape.paths.shapes;
						jLen = shapeData.shape.paths._length;
						for (j = 0; j < jLen; j += 1) {
							localShapeCollection.addShape(
								this.processPath(shapePaths[j], rd),
							);
						}
					}
					shapeData.shape.paths = shapeData.localShapeCollection;
				}
			}
			if (!(this || _global).dynamicProperties.length) {
				(this || _global)._mdf = false;
			}
		};
		ShapeModifiers.registerModifier("rd", RoundCornersModifier);
		function PuckerAndBloatModifier() {}
		extendPrototype([ShapeModifier], PuckerAndBloatModifier);
		PuckerAndBloatModifier.prototype.initModifierProperties = function (
			elem2,
			data2,
		) {
			(this || _global).getValue = (this || _global).processKeys;
			(this || _global).amount = PropertyFactory.getProp(
				elem2,
				data2.a,
				0,
				null,
				this || _global,
			);
			(this || _global)._isAnimated = !!(this || _global).amount.effectsSequence
				.length;
		};
		PuckerAndBloatModifier.prototype.processPath = function (path, amount) {
			var percent = amount / 100;
			var centerPoint = [0, 0];
			var pathLength = path._length;
			var i = 0;
			for (i = 0; i < pathLength; i += 1) {
				centerPoint[0] += path.v[i][0];
				centerPoint[1] += path.v[i][1];
			}
			centerPoint[0] /= pathLength;
			centerPoint[1] /= pathLength;
			var clonedPath = shapePool.newElement();
			clonedPath.c = path.c;
			var vX;
			var vY;
			var oX;
			var oY;
			var iX;
			var iY;
			for (i = 0; i < pathLength; i += 1) {
				vX = path.v[i][0] + (centerPoint[0] - path.v[i][0]) * percent;
				vY = path.v[i][1] + (centerPoint[1] - path.v[i][1]) * percent;
				oX = path.o[i][0] + (centerPoint[0] - path.o[i][0]) * -percent;
				oY = path.o[i][1] + (centerPoint[1] - path.o[i][1]) * -percent;
				iX = path.i[i][0] + (centerPoint[0] - path.i[i][0]) * -percent;
				iY = path.i[i][1] + (centerPoint[1] - path.i[i][1]) * -percent;
				clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, i);
			}
			return clonedPath;
		};
		PuckerAndBloatModifier.prototype.processShapes = function (_isFirstFrame) {
			var shapePaths;
			var i;
			var len = (this || _global).shapes.length;
			var j;
			var jLen;
			var amount = (this || _global).amount.v;
			if (amount !== 0) {
				var shapeData;
				var localShapeCollection;
				for (i = 0; i < len; i += 1) {
					shapeData = (this || _global).shapes[i];
					localShapeCollection = shapeData.localShapeCollection;
					if (
						!(
							!shapeData.shape._mdf &&
							!(this || _global)._mdf &&
							!_isFirstFrame
						)
					) {
						localShapeCollection.releaseShapes();
						shapeData.shape._mdf = true;
						shapePaths = shapeData.shape.paths.shapes;
						jLen = shapeData.shape.paths._length;
						for (j = 0; j < jLen; j += 1) {
							localShapeCollection.addShape(
								this.processPath(shapePaths[j], amount),
							);
						}
					}
					shapeData.shape.paths = shapeData.localShapeCollection;
				}
			}
			if (!(this || _global).dynamicProperties.length) {
				(this || _global)._mdf = false;
			}
		};
		ShapeModifiers.registerModifier("pb", PuckerAndBloatModifier);
		function RepeaterModifier() {}
		extendPrototype([ShapeModifier], RepeaterModifier);
		RepeaterModifier.prototype.initModifierProperties = function (
			elem2,
			data2,
		) {
			(this || _global).getValue = (this || _global).processKeys;
			(this || _global).c = PropertyFactory.getProp(
				elem2,
				data2.c,
				0,
				null,
				this || _global,
			);
			(this || _global).o = PropertyFactory.getProp(
				elem2,
				data2.o,
				0,
				null,
				this || _global,
			);
			(this || _global).tr = TransformPropertyFactory.getTransformProperty(
				elem2,
				data2.tr,
				this || _global,
			);
			(this || _global).so = PropertyFactory.getProp(
				elem2,
				data2.tr.so,
				0,
				0.01,
				this || _global,
			);
			(this || _global).eo = PropertyFactory.getProp(
				elem2,
				data2.tr.eo,
				0,
				0.01,
				this || _global,
			);
			(this || _global).data = data2;
			if (!(this || _global).dynamicProperties.length) {
				this.getValue(true);
			}
			(this || _global)._isAnimated = !!(this || _global).dynamicProperties
				.length;
			(this || _global).pMatrix = new Matrix();
			(this || _global).rMatrix = new Matrix();
			(this || _global).sMatrix = new Matrix();
			(this || _global).tMatrix = new Matrix();
			(this || _global).matrix = new Matrix();
		};
		RepeaterModifier.prototype.applyTransforms = function (
			pMatrix,
			rMatrix,
			sMatrix,
			transform2,
			perc,
			inv,
		) {
			var dir = inv ? -1 : 1;
			var scaleX = transform2.s.v[0] + (1 - transform2.s.v[0]) * (1 - perc);
			var scaleY = transform2.s.v[1] + (1 - transform2.s.v[1]) * (1 - perc);
			pMatrix.translate(
				transform2.p.v[0] * dir * perc,
				transform2.p.v[1] * dir * perc,
				transform2.p.v[2],
			);
			rMatrix.translate(
				-transform2.a.v[0],
				-transform2.a.v[1],
				transform2.a.v[2],
			);
			rMatrix.rotate(-transform2.r.v * dir * perc);
			rMatrix.translate(
				transform2.a.v[0],
				transform2.a.v[1],
				transform2.a.v[2],
			);
			sMatrix.translate(
				-transform2.a.v[0],
				-transform2.a.v[1],
				transform2.a.v[2],
			);
			sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);
			sMatrix.translate(
				transform2.a.v[0],
				transform2.a.v[1],
				transform2.a.v[2],
			);
		};
		RepeaterModifier.prototype.init = function (elem2, arr, pos, elemsData) {
			(this || _global).elem = elem2;
			(this || _global).arr = arr;
			(this || _global).pos = pos;
			(this || _global).elemsData = elemsData;
			(this || _global)._currentCopies = 0;
			(this || _global)._elements = [];
			(this || _global)._groups = [];
			(this || _global).frameId = -1;
			this.initDynamicPropertyContainer(elem2);
			this.initModifierProperties(elem2, arr[pos]);
			while (pos > 0) {
				pos -= 1;
				(this || _global)._elements.unshift(arr[pos]);
			}
			if ((this || _global).dynamicProperties.length) {
				(this || _global).k = true;
			} else {
				this.getValue(true);
			}
		};
		RepeaterModifier.prototype.resetElements = function (elements) {
			var i;
			var len = elements.length;
			for (i = 0; i < len; i += 1) {
				elements[i]._processed = false;
				if (elements[i].ty === "gr") {
					this.resetElements(elements[i].it);
				}
			}
		};
		RepeaterModifier.prototype.cloneElements = function (elements) {
			var newElements = JSON.parse(JSON.stringify(elements));
			this.resetElements(newElements);
			return newElements;
		};
		RepeaterModifier.prototype.changeGroupRender = function (
			elements,
			renderFlag,
		) {
			var i;
			var len = elements.length;
			for (i = 0; i < len; i += 1) {
				elements[i]._render = renderFlag;
				if (elements[i].ty === "gr") {
					this.changeGroupRender(elements[i].it, renderFlag);
				}
			}
		};
		RepeaterModifier.prototype.processShapes = function (_isFirstFrame) {
			var items;
			var itemsTransform;
			var i;
			var dir;
			var cont;
			var hasReloaded = false;
			if ((this || _global)._mdf || _isFirstFrame) {
				var copies = Math.ceil((this || _global).c.v);
				if ((this || _global)._groups.length < copies) {
					while ((this || _global)._groups.length < copies) {
						var group = {
							it: this.cloneElements((this || _global)._elements),
							ty: "gr",
						};
						group.it.push({
							a: {
								a: 0,
								ix: 1,
								k: [0, 0],
							},
							nm: "Transform",
							o: {
								a: 0,
								ix: 7,
								k: 100,
							},
							p: {
								a: 0,
								ix: 2,
								k: [0, 0],
							},
							r: {
								a: 1,
								ix: 6,
								k: [
									{
										s: 0,
										e: 0,
										t: 0,
									},
									{
										s: 0,
										e: 0,
										t: 1,
									},
								],
							},
							s: {
								a: 0,
								ix: 3,
								k: [100, 100],
							},
							sa: {
								a: 0,
								ix: 5,
								k: 0,
							},
							sk: {
								a: 0,
								ix: 4,
								k: 0,
							},
							ty: "tr",
						});
						(this || _global).arr.splice(0, 0, group);
						(this || _global)._groups.splice(0, 0, group);
						(this || _global)._currentCopies += 1;
					}
					(this || _global).elem.reloadShapes();
					hasReloaded = true;
				}
				cont = 0;
				var renderFlag;
				for (i = 0; i <= (this || _global)._groups.length - 1; i += 1) {
					renderFlag = cont < copies;
					(this || _global)._groups[i]._render = renderFlag;
					this.changeGroupRender((this || _global)._groups[i].it, renderFlag);
					if (!renderFlag) {
						var elems = (this || _global).elemsData[i].it;
						var transformData = elems[elems.length - 1];
						if (transformData.transform.op.v !== 0) {
							transformData.transform.op._mdf = true;
							transformData.transform.op.v = 0;
						} else {
							transformData.transform.op._mdf = false;
						}
					}
					cont += 1;
				}
				(this || _global)._currentCopies = copies;
				var offset = (this || _global).o.v;
				var offsetModulo = offset % 1;
				var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
				var pProps = (this || _global).pMatrix.props;
				var rProps = (this || _global).rMatrix.props;
				var sProps = (this || _global).sMatrix.props;
				(this || _global).pMatrix.reset();
				(this || _global).rMatrix.reset();
				(this || _global).sMatrix.reset();
				(this || _global).tMatrix.reset();
				(this || _global).matrix.reset();
				var iteration = 0;
				if (offset > 0) {
					while (iteration < roundOffset) {
						this.applyTransforms(
							(this || _global).pMatrix,
							(this || _global).rMatrix,
							(this || _global).sMatrix,
							(this || _global).tr,
							1,
							false,
						);
						iteration += 1;
					}
					if (offsetModulo) {
						this.applyTransforms(
							(this || _global).pMatrix,
							(this || _global).rMatrix,
							(this || _global).sMatrix,
							(this || _global).tr,
							offsetModulo,
							false,
						);
						iteration += offsetModulo;
					}
				} else if (offset < 0) {
					while (iteration > roundOffset) {
						this.applyTransforms(
							(this || _global).pMatrix,
							(this || _global).rMatrix,
							(this || _global).sMatrix,
							(this || _global).tr,
							1,
							true,
						);
						iteration -= 1;
					}
					if (offsetModulo) {
						this.applyTransforms(
							(this || _global).pMatrix,
							(this || _global).rMatrix,
							(this || _global).sMatrix,
							(this || _global).tr,
							-offsetModulo,
							true,
						);
						iteration -= offsetModulo;
					}
				}
				i =
					(this || _global).data.m === 1
						? 0
						: (this || _global)._currentCopies - 1;
				dir = (this || _global).data.m === 1 ? 1 : -1;
				cont = (this || _global)._currentCopies;
				var j;
				var jLen;
				while (cont) {
					items = (this || _global).elemsData[i].it;
					itemsTransform = items[items.length - 1].transform.mProps.v.props;
					jLen = itemsTransform.length;
					items[items.length - 1].transform.mProps._mdf = true;
					items[items.length - 1].transform.op._mdf = true;
					items[items.length - 1].transform.op.v =
						(this || _global)._currentCopies === 1
							? (this || _global).so.v
							: (this || _global).so.v +
								((this || _global).eo.v - (this || _global).so.v) *
									(i / ((this || _global)._currentCopies - 1));
					if (iteration !== 0) {
						if (
							(i !== 0 && dir === 1) ||
							(i !== (this || _global)._currentCopies - 1 && dir === -1)
						) {
							this.applyTransforms(
								(this || _global).pMatrix,
								(this || _global).rMatrix,
								(this || _global).sMatrix,
								(this || _global).tr,
								1,
								false,
							);
						}
						(this || _global).matrix.transform(
							rProps[0],
							rProps[1],
							rProps[2],
							rProps[3],
							rProps[4],
							rProps[5],
							rProps[6],
							rProps[7],
							rProps[8],
							rProps[9],
							rProps[10],
							rProps[11],
							rProps[12],
							rProps[13],
							rProps[14],
							rProps[15],
						);
						(this || _global).matrix.transform(
							sProps[0],
							sProps[1],
							sProps[2],
							sProps[3],
							sProps[4],
							sProps[5],
							sProps[6],
							sProps[7],
							sProps[8],
							sProps[9],
							sProps[10],
							sProps[11],
							sProps[12],
							sProps[13],
							sProps[14],
							sProps[15],
						);
						(this || _global).matrix.transform(
							pProps[0],
							pProps[1],
							pProps[2],
							pProps[3],
							pProps[4],
							pProps[5],
							pProps[6],
							pProps[7],
							pProps[8],
							pProps[9],
							pProps[10],
							pProps[11],
							pProps[12],
							pProps[13],
							pProps[14],
							pProps[15],
						);
						for (j = 0; j < jLen; j += 1) {
							itemsTransform[j] = (this || _global).matrix.props[j];
						}
						(this || _global).matrix.reset();
					} else {
						(this || _global).matrix.reset();
						for (j = 0; j < jLen; j += 1) {
							itemsTransform[j] = (this || _global).matrix.props[j];
						}
					}
					iteration += 1;
					cont -= 1;
					i += dir;
				}
			} else {
				cont = (this || _global)._currentCopies;
				i = 0;
				dir = 1;
				while (cont) {
					items = (this || _global).elemsData[i].it;
					itemsTransform = items[items.length - 1].transform.mProps.v.props;
					items[items.length - 1].transform.mProps._mdf = false;
					items[items.length - 1].transform.op._mdf = false;
					cont -= 1;
					i += dir;
				}
			}
			return hasReloaded;
		};
		RepeaterModifier.prototype.addShape = function () {};
		ShapeModifiers.registerModifier("rp", RepeaterModifier);
		function ShapeCollection() {
			(this || _global)._length = 0;
			(this || _global)._maxLength = 4;
			(this || _global).shapes = createSizedArray((this || _global)._maxLength);
		}
		ShapeCollection.prototype.addShape = function (shapeData) {
			if ((this || _global)._length === (this || _global)._maxLength) {
				(this || _global).shapes = (this || _global).shapes.concat(
					createSizedArray((this || _global)._maxLength),
				);
				(this || _global)._maxLength *= 2;
			}
			(this || _global).shapes[(this || _global)._length] = shapeData;
			(this || _global)._length += 1;
		};
		ShapeCollection.prototype.releaseShapes = function () {
			var i;
			for (i = 0; i < (this || _global)._length; i += 1) {
				shapePool.release((this || _global).shapes[i]);
			}
			(this || _global)._length = 0;
		};
		function DashProperty(elem2, data2, renderer2, container) {
			(this || _global).elem = elem2;
			(this || _global).frameId = -1;
			(this || _global).dataProps = createSizedArray(data2.length);
			(this || _global).renderer = renderer2;
			(this || _global).k = false;
			(this || _global).dashStr = "";
			(this || _global).dashArray = createTypedArray(
				"float32",
				data2.length ? data2.length - 1 : 0,
			);
			(this || _global).dashoffset = createTypedArray("float32", 1);
			this.initDynamicPropertyContainer(container);
			var i;
			var len = data2.length || 0;
			var prop;
			for (i = 0; i < len; i += 1) {
				prop = PropertyFactory.getProp(
					elem2,
					data2[i].v,
					0,
					0,
					this || _global,
				);
				(this || _global).k = prop.k || (this || _global).k;
				(this || _global).dataProps[i] = {
					n: data2[i].n,
					p: prop,
				};
			}
			if (!(this || _global).k) {
				this.getValue(true);
			}
			(this || _global)._isAnimated = (this || _global).k;
		}
		DashProperty.prototype.getValue = function (forceRender) {
			if (
				(this || _global).elem.globalData.frameId ===
					(this || _global).frameId &&
				!forceRender
			) {
				return;
			}
			(this || _global).frameId = (this || _global).elem.globalData.frameId;
			this.iterateDynamicProperties();
			(this || _global)._mdf = (this || _global)._mdf || forceRender;
			if ((this || _global)._mdf) {
				var i = 0;
				var len = (this || _global).dataProps.length;
				if ((this || _global).renderer === "svg") {
					(this || _global).dashStr = "";
				}
				for (i = 0; i < len; i += 1) {
					if ((this || _global).dataProps[i].n !== "o") {
						if ((this || _global).renderer === "svg") {
							(this || _global).dashStr +=
								" " + (this || _global).dataProps[i].p.v;
						} else {
							(this || _global).dashArray[i] = (this || _global).dataProps[
								i
							].p.v;
						}
					} else {
						(this || _global).dashoffset[0] = (this || _global).dataProps[
							i
						].p.v;
					}
				}
			}
		};
		extendPrototype([DynamicPropertyContainer], DashProperty);
		function GradientProperty(elem2, data2, container) {
			(this || _global).data = data2;
			(this || _global).c = createTypedArray("uint8c", data2.p * 4);
			var cLength = data2.k.k[0].s
				? data2.k.k[0].s.length - data2.p * 4
				: data2.k.k.length - data2.p * 4;
			(this || _global).o = createTypedArray("float32", cLength);
			(this || _global)._cmdf = false;
			(this || _global)._omdf = false;
			(this || _global)._collapsable = this.checkCollapsable();
			(this || _global)._hasOpacity = cLength;
			this.initDynamicPropertyContainer(container);
			(this || _global).prop = PropertyFactory.getProp(
				elem2,
				data2.k,
				1,
				null,
				this || _global,
			);
			(this || _global).k = (this || _global).prop.k;
			this.getValue(true);
		}
		GradientProperty.prototype.comparePoints = function (values, points) {
			var i = 0;
			var len = (this || _global).o.length / 2;
			var diff;
			while (i < len) {
				diff = Math.abs(values[i * 4] - values[points * 4 + i * 2]);
				if (diff > 0.01) {
					return false;
				}
				i += 1;
			}
			return true;
		};
		GradientProperty.prototype.checkCollapsable = function () {
			if ((this || _global).o.length / 2 !== (this || _global).c.length / 4) {
				return false;
			}
			if ((this || _global).data.k.k[0].s) {
				var i = 0;
				var len = (this || _global).data.k.k.length;
				while (i < len) {
					if (
						!this.comparePoints(
							(this || _global).data.k.k[i].s,
							(this || _global).data.p,
						)
					) {
						return false;
					}
					i += 1;
				}
			} else if (
				!this.comparePoints(
					(this || _global).data.k.k,
					(this || _global).data.p,
				)
			) {
				return false;
			}
			return true;
		};
		GradientProperty.prototype.getValue = function (forceRender) {
			(this || _global).prop.getValue();
			(this || _global)._mdf = false;
			(this || _global)._cmdf = false;
			(this || _global)._omdf = false;
			if ((this || _global).prop._mdf || forceRender) {
				var i;
				var len = (this || _global).data.p * 4;
				var mult;
				var val2;
				for (i = 0; i < len; i += 1) {
					mult = i % 4 === 0 ? 100 : 255;
					val2 = Math.round((this || _global).prop.v[i] * mult);
					if ((this || _global).c[i] !== val2) {
						(this || _global).c[i] = val2;
						(this || _global)._cmdf = !forceRender;
					}
				}
				if ((this || _global).o.length) {
					len = (this || _global).prop.v.length;
					for (i = (this || _global).data.p * 4; i < len; i += 1) {
						mult = i % 2 === 0 ? 100 : 1;
						val2 =
							i % 2 === 0
								? Math.round((this || _global).prop.v[i] * 100)
								: (this || _global).prop.v[i];
						if (
							(this || _global).o[i - (this || _global).data.p * 4] !== val2
						) {
							(this || _global).o[i - (this || _global).data.p * 4] = val2;
							(this || _global)._omdf = !forceRender;
						}
					}
				}
				(this || _global)._mdf = !forceRender;
			}
		};
		extendPrototype([DynamicPropertyContainer], GradientProperty);
		var buildShapeString = function (pathNodes, length2, closed, mat) {
			if (length2 === 0) {
				return "";
			}
			var _o = pathNodes.o;
			var _i = pathNodes.i;
			var _v = pathNodes.v;
			var i;
			var shapeString = " M" + mat.applyToPointStringified(_v[0][0], _v[0][1]);
			for (i = 1; i < length2; i += 1) {
				shapeString +=
					" C" +
					mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) +
					" " +
					mat.applyToPointStringified(_i[i][0], _i[i][1]) +
					" " +
					mat.applyToPointStringified(_v[i][0], _v[i][1]);
			}
			if (closed && length2) {
				shapeString +=
					" C" +
					mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) +
					" " +
					mat.applyToPointStringified(_i[0][0], _i[0][1]) +
					" " +
					mat.applyToPointStringified(_v[0][0], _v[0][1]);
				shapeString += "z";
			}
			return shapeString;
		};
		var audioControllerFactory = (function () {
			function AudioController(audioFactory) {
				(this || _global).audios = [];
				(this || _global).audioFactory = audioFactory;
				(this || _global)._volume = 1;
				(this || _global)._isMuted = false;
			}
			AudioController.prototype = {
				addAudio: function (audio) {
					(this || _global).audios.push(audio);
				},
				pause: function () {
					var i;
					var len = (this || _global).audios.length;
					for (i = 0; i < len; i += 1) {
						(this || _global).audios[i].pause();
					}
				},
				resume: function () {
					var i;
					var len = (this || _global).audios.length;
					for (i = 0; i < len; i += 1) {
						(this || _global).audios[i].resume();
					}
				},
				setRate: function (rateValue) {
					var i;
					var len = (this || _global).audios.length;
					for (i = 0; i < len; i += 1) {
						(this || _global).audios[i].setRate(rateValue);
					}
				},
				createAudio: function (assetPath) {
					if ((this || _global).audioFactory) {
						return this.audioFactory(assetPath);
					}
					if (Howl) {
						return new Howl({
							src: [assetPath],
						});
					}
					return {
						isPlaying: false,
						play: function () {
							(this || _global).isPlaying = true;
						},
						seek: function () {
							(this || _global).isPlaying = false;
						},
						playing: function () {},
						rate: function () {},
						setVolume: function () {},
					};
				},
				setAudioFactory: function (audioFactory) {
					(this || _global).audioFactory = audioFactory;
				},
				setVolume: function (value2) {
					(this || _global)._volume = value2;
					this._updateVolume();
				},
				mute: function () {
					(this || _global)._isMuted = true;
					this._updateVolume();
				},
				unmute: function () {
					(this || _global)._isMuted = false;
					this._updateVolume();
				},
				getVolume: function () {
					return (this || _global)._volume;
				},
				_updateVolume: function () {
					var i;
					var len = (this || _global).audios.length;
					for (i = 0; i < len; i += 1) {
						(this || _global).audios[i].volume(
							(this || _global)._volume * ((this || _global)._isMuted ? 0 : 1),
						);
					}
				},
			};
			return function () {
				return new AudioController();
			};
		})();
		var ImagePreloader = (function () {
			var proxyImage = (function () {
				var canvas = createTag("canvas");
				canvas.width = 1;
				canvas.height = 1;
				var ctx = canvas.getContext("2d");
				ctx.fillStyle = "rgba(0,0,0,0)";
				ctx.fillRect(0, 0, 1, 1);
				return canvas;
			})();
			function imageLoaded() {
				(this || _global).loadedAssets += 1;
				if (
					(this || _global).loadedAssets === (this || _global).totalImages &&
					(this || _global).loadedFootagesCount ===
						(this || _global).totalFootages
				) {
					if ((this || _global).imagesLoadedCb) {
						this.imagesLoadedCb(null);
					}
				}
			}
			function footageLoaded() {
				(this || _global).loadedFootagesCount += 1;
				if (
					(this || _global).loadedAssets === (this || _global).totalImages &&
					(this || _global).loadedFootagesCount ===
						(this || _global).totalFootages
				) {
					if ((this || _global).imagesLoadedCb) {
						this.imagesLoadedCb(null);
					}
				}
			}
			function getAssetsPath(assetData, assetsPath, originalPath) {
				var path = "";
				if (assetData.e) {
					path = assetData.p;
				} else if (assetsPath) {
					var imagePath = assetData.p;
					if (imagePath.indexOf("images/") !== -1) {
						imagePath = imagePath.split("/")[1];
					}
					path = assetsPath + imagePath;
				} else {
					path = originalPath;
					path += assetData.u ? assetData.u : "";
					path += assetData.p;
				}
				return path;
			}
			function testImageLoaded(img) {
				var _count = 0;
				var intervalId = setInterval(
					function () {
						var box = img.getBBox();
						if (box.width || _count > 500) {
							this._imageLoaded();
							clearInterval(intervalId);
						}
						_count += 1;
					}.bind(this || _global),
					50,
				);
			}
			function createImageData(assetData) {
				var path = getAssetsPath(
					assetData,
					(this || _global).assetsPath,
					(this || _global).path,
				);
				var img = createNS("image");
				if (isSafari) {
					this.testImageLoaded(img);
				} else {
					img.addEventListener("load", (this || _global)._imageLoaded, false);
				}
				img.addEventListener(
					"error",
					function () {
						ob2.img = proxyImage;
						this._imageLoaded();
					}.bind(this || _global),
					false,
				);
				img.setAttributeNS("http://www.w3.org/1999/xlink", "href", path);
				if ((this || _global)._elementHelper.append) {
					(this || _global)._elementHelper.append(img);
				} else {
					(this || _global)._elementHelper.appendChild(img);
				}
				var ob2 = {
					img,
					assetData,
				};
				return ob2;
			}
			function createImgData(assetData) {
				var path = getAssetsPath(
					assetData,
					(this || _global).assetsPath,
					(this || _global).path,
				);
				var img = createTag("img");
				img.crossOrigin = "anonymous";
				img.addEventListener("load", (this || _global)._imageLoaded, false);
				img.addEventListener(
					"error",
					function () {
						ob2.img = proxyImage;
						this._imageLoaded();
					}.bind(this || _global),
					false,
				);
				img.src = path;
				var ob2 = {
					img,
					assetData,
				};
				return ob2;
			}
			function createFootageData(data2) {
				var ob2 = {
					assetData: data2,
				};
				var path = getAssetsPath(
					data2,
					(this || _global).assetsPath,
					(this || _global).path,
				);
				assetLoader.load(
					path,
					function (footageData) {
						ob2.img = footageData;
						this._footageLoaded();
					}.bind(this || _global),
					function () {
						ob2.img = {};
						this._footageLoaded();
					}.bind(this || _global),
				);
				return ob2;
			}
			function loadAssets(assets, cb) {
				(this || _global).imagesLoadedCb = cb;
				var i;
				var len = assets.length;
				for (i = 0; i < len; i += 1) {
					if (!assets[i].layers) {
						if (!assets[i].t) {
							(this || _global).totalImages += 1;
							(this || _global).images.push(this._createImageData(assets[i]));
						} else if (assets[i].t === 3) {
							(this || _global).totalFootages += 1;
							(this || _global).images.push(this.createFootageData(assets[i]));
						}
					}
				}
			}
			function setPath(path) {
				(this || _global).path = path || "";
			}
			function setAssetsPath(path) {
				(this || _global).assetsPath = path || "";
			}
			function getAsset(assetData) {
				var i = 0;
				var len = (this || _global).images.length;
				while (i < len) {
					if ((this || _global).images[i].assetData === assetData) {
						return (this || _global).images[i].img;
					}
					i += 1;
				}
				return null;
			}
			function destroy() {
				(this || _global).imagesLoadedCb = null;
				(this || _global).images.length = 0;
			}
			function loadedImages() {
				return (this || _global).totalImages === (this || _global).loadedAssets;
			}
			function loadedFootages() {
				return (
					(this || _global).totalFootages ===
					(this || _global).loadedFootagesCount
				);
			}
			function setCacheType(type, elementHelper) {
				if (type === "svg") {
					(this || _global)._elementHelper = elementHelper;
					(this || _global)._createImageData = (
						this || _global
					).createImageData.bind(this || _global);
				} else {
					(this || _global)._createImageData = (
						this || _global
					).createImgData.bind(this || _global);
				}
			}
			function ImagePreloaderFactory() {
				(this || _global)._imageLoaded = imageLoaded.bind(this || _global);
				(this || _global)._footageLoaded = footageLoaded.bind(this || _global);
				(this || _global).testImageLoaded = testImageLoaded.bind(
					this || _global,
				);
				(this || _global).createFootageData = createFootageData.bind(
					this || _global,
				);
				(this || _global).assetsPath = "";
				(this || _global).path = "";
				(this || _global).totalImages = 0;
				(this || _global).totalFootages = 0;
				(this || _global).loadedAssets = 0;
				(this || _global).loadedFootagesCount = 0;
				(this || _global).imagesLoadedCb = null;
				(this || _global).images = [];
			}
			ImagePreloaderFactory.prototype = {
				loadAssets,
				setAssetsPath,
				setPath,
				loadedImages,
				loadedFootages,
				destroy,
				getAsset,
				createImgData,
				createImageData,
				imageLoaded,
				footageLoaded,
				setCacheType,
			};
			return ImagePreloaderFactory;
		})();
		var featureSupport = (function () {
			var ob2 = {
				maskType: true,
			};
			if (
				/MSIE 10/i.test(__unframerNavigator.userAgent) ||
				/MSIE 9/i.test(__unframerNavigator.userAgent) ||
				/rv:11.0/i.test(__unframerNavigator.userAgent) ||
				/Edge\/\d./i.test(__unframerNavigator.userAgent)
			) {
				ob2.maskType = false;
			}
			return ob2;
		})();
		var filtersFactory = (function () {
			var ob2 = {};
			ob2.createFilter = createFilter;
			ob2.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;
			function createFilter(filId, skipCoordinates) {
				var fil = createNS("filter");
				fil.setAttribute("id", filId);
				if (skipCoordinates !== true) {
					fil.setAttribute("filterUnits", "objectBoundingBox");
					fil.setAttribute("x", "0%");
					fil.setAttribute("y", "0%");
					fil.setAttribute("width", "100%");
					fil.setAttribute("height", "100%");
				}
				return fil;
			}
			function createAlphaToLuminanceFilter() {
				var feColorMatrix = createNS("feColorMatrix");
				feColorMatrix.setAttribute("type", "matrix");
				feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
				feColorMatrix.setAttribute(
					"values",
					"0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1",
				);
				return feColorMatrix;
			}
			return ob2;
		})();
		var assetLoader = /* @__PURE__ */ (function () {
			function formatResponse(xhr) {
				if (xhr.response && typeof xhr.response === "object") {
					return xhr.response;
				}
				if (xhr.response && typeof xhr.response === "string") {
					return JSON.parse(xhr.response);
				}
				if (xhr.responseText) {
					return JSON.parse(xhr.responseText);
				}
				return null;
			}
			function loadAsset(path, callback, errorCallback) {
				var response;
				var xhr = new XMLHttpRequest();
				try {
					xhr.responseType = "json";
				} catch (err) {}
				xhr.onreadystatechange = function () {
					if (xhr.readyState === 4) {
						if (xhr.status === 200) {
							response = formatResponse(xhr);
							callback(response);
						} else {
							try {
								response = formatResponse(xhr);
								callback(response);
							} catch (err) {
								if (errorCallback) {
									errorCallback(err);
								}
							}
						}
					}
				};
				xhr.open("GET", path, true);
				xhr.send();
			}
			return {
				load: loadAsset,
			};
		})();
		function TextAnimatorProperty(textData, renderType, elem2) {
			(this || _global)._isFirstFrame = true;
			(this || _global)._hasMaskedPath = false;
			(this || _global)._frameId = -1;
			(this || _global)._textData = textData;
			(this || _global)._renderType = renderType;
			(this || _global)._elem = elem2;
			(this || _global)._animatorsData = createSizedArray(
				(this || _global)._textData.a.length,
			);
			(this || _global)._pathData = {};
			(this || _global)._moreOptions = {
				alignment: {},
			};
			(this || _global).renderedLetters = [];
			(this || _global).lettersChangedFlag = false;
			this.initDynamicPropertyContainer(elem2);
		}
		TextAnimatorProperty.prototype.searchProperties = function () {
			var i;
			var len = (this || _global)._textData.a.length;
			var animatorProps;
			var getProp = PropertyFactory.getProp;
			for (i = 0; i < len; i += 1) {
				animatorProps = (this || _global)._textData.a[i];
				(this || _global)._animatorsData[i] = new TextAnimatorDataProperty(
					(this || _global)._elem,
					animatorProps,
					this || _global,
				);
			}
			if (
				(this || _global)._textData.p &&
				"m" in (this || _global)._textData.p
			) {
				(this || _global)._pathData = {
					f: getProp(
						(this || _global)._elem,
						(this || _global)._textData.p.f,
						0,
						0,
						this || _global,
					),
					l: getProp(
						(this || _global)._elem,
						(this || _global)._textData.p.l,
						0,
						0,
						this || _global,
					),
					r: (this || _global)._textData.p.r,
					m: (this || _global)._elem.maskManager.getMaskProperty(
						(this || _global)._textData.p.m,
					),
				};
				(this || _global)._hasMaskedPath = true;
			} else {
				(this || _global)._hasMaskedPath = false;
			}
			(this || _global)._moreOptions.alignment = getProp(
				(this || _global)._elem,
				(this || _global)._textData.m.a,
				1,
				0,
				this || _global,
			);
		};
		TextAnimatorProperty.prototype.getMeasures = function (
			documentData,
			lettersChangedFlag,
		) {
			(this || _global).lettersChangedFlag = lettersChangedFlag;
			if (
				!(this || _global)._mdf &&
				!(this || _global)._isFirstFrame &&
				!lettersChangedFlag &&
				(!(this || _global)._hasMaskedPath ||
					!(this || _global)._pathData.m._mdf)
			) {
				return;
			}
			(this || _global)._isFirstFrame = false;
			var alignment = (this || _global)._moreOptions.alignment.v;
			var animators = (this || _global)._animatorsData;
			var textData = (this || _global)._textData;
			var matrixHelper = (this || _global).mHelper;
			var renderType = (this || _global)._renderType;
			var renderedLettersCount = (this || _global).renderedLetters.length;
			var xPos;
			var yPos;
			var i;
			var len;
			var letters = documentData.l;
			var pathInfo;
			var currentLength;
			var currentPoint;
			var segmentLength;
			var flag;
			var pointInd;
			var segmentInd;
			var prevPoint;
			var points;
			var segments;
			var partialLength;
			var totalLength;
			var perc;
			var tanAngle;
			var mask22;
			if ((this || _global)._hasMaskedPath) {
				mask22 = (this || _global)._pathData.m;
				if (
					!(this || _global)._pathData.n ||
					(this || _global)._pathData._mdf
				) {
					var paths = mask22.v;
					if ((this || _global)._pathData.r) {
						paths = paths.reverse();
					}
					pathInfo = {
						tLength: 0,
						segments: [],
					};
					len = paths._length - 1;
					var bezierData;
					totalLength = 0;
					for (i = 0; i < len; i += 1) {
						bezierData = bez.buildBezierData(
							paths.v[i],
							paths.v[i + 1],
							[paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]],
							[
								paths.i[i + 1][0] - paths.v[i + 1][0],
								paths.i[i + 1][1] - paths.v[i + 1][1],
							],
						);
						pathInfo.tLength += bezierData.segmentLength;
						pathInfo.segments.push(bezierData);
						totalLength += bezierData.segmentLength;
					}
					i = len;
					if (mask22.v.c) {
						bezierData = bez.buildBezierData(
							paths.v[i],
							paths.v[0],
							[paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]],
							[paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]],
						);
						pathInfo.tLength += bezierData.segmentLength;
						pathInfo.segments.push(bezierData);
						totalLength += bezierData.segmentLength;
					}
					(this || _global)._pathData.pi = pathInfo;
				}
				pathInfo = (this || _global)._pathData.pi;
				currentLength = (this || _global)._pathData.f.v;
				segmentInd = 0;
				pointInd = 1;
				segmentLength = 0;
				flag = true;
				segments = pathInfo.segments;
				if (currentLength < 0 && mask22.v.c) {
					if (pathInfo.tLength < Math.abs(currentLength)) {
						currentLength = -Math.abs(currentLength) % pathInfo.tLength;
					}
					segmentInd = segments.length - 1;
					points = segments[segmentInd].points;
					pointInd = points.length - 1;
					while (currentLength < 0) {
						currentLength += points[pointInd].partialLength;
						pointInd -= 1;
						if (pointInd < 0) {
							segmentInd -= 1;
							points = segments[segmentInd].points;
							pointInd = points.length - 1;
						}
					}
				}
				points = segments[segmentInd].points;
				prevPoint = points[pointInd - 1];
				currentPoint = points[pointInd];
				partialLength = currentPoint.partialLength;
			}
			len = letters.length;
			xPos = 0;
			yPos = 0;
			var yOff = documentData.finalSize * 1.2 * 0.714;
			var firstLine = true;
			var animatorProps;
			var animatorSelector;
			var j;
			var jLen;
			var letterValue;
			jLen = animators.length;
			var mult;
			var ind = -1;
			var offf;
			var xPathPos;
			var yPathPos;
			var initPathPos = currentLength;
			var initSegmentInd = segmentInd;
			var initPointInd = pointInd;
			var currentLine = -1;
			var elemOpacity;
			var sc;
			var sw;
			var fc;
			var k;
			var letterSw;
			var letterSc;
			var letterFc;
			var letterM = "";
			var letterP = (this || _global).defaultPropsArray;
			var letterO;
			if (documentData.j === 2 || documentData.j === 1) {
				var animatorJustifyOffset = 0;
				var animatorFirstCharOffset = 0;
				var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
				var lastIndex = 0;
				var isNewLine = true;
				for (i = 0; i < len; i += 1) {
					if (letters[i].n) {
						if (animatorJustifyOffset) {
							animatorJustifyOffset += animatorFirstCharOffset;
						}
						while (lastIndex < i) {
							letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
							lastIndex += 1;
						}
						animatorJustifyOffset = 0;
						isNewLine = true;
					} else {
						for (j = 0; j < jLen; j += 1) {
							animatorProps = animators[j].a;
							if (animatorProps.t.propType) {
								if (isNewLine && documentData.j === 2) {
									animatorFirstCharOffset +=
										animatorProps.t.v * justifyOffsetMult;
								}
								animatorSelector = animators[j].s;
								mult = animatorSelector.getMult(
									letters[i].anIndexes[j],
									textData.a[j].s.totalChars,
								);
								if (mult.length) {
									animatorJustifyOffset +=
										animatorProps.t.v * mult[0] * justifyOffsetMult;
								} else {
									animatorJustifyOffset +=
										animatorProps.t.v * mult * justifyOffsetMult;
								}
							}
						}
						isNewLine = false;
					}
				}
				if (animatorJustifyOffset) {
					animatorJustifyOffset += animatorFirstCharOffset;
				}
				while (lastIndex < i) {
					letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
					lastIndex += 1;
				}
			}
			for (i = 0; i < len; i += 1) {
				matrixHelper.reset();
				elemOpacity = 1;
				if (letters[i].n) {
					xPos = 0;
					yPos += documentData.yOffset;
					yPos += firstLine ? 1 : 0;
					currentLength = initPathPos;
					firstLine = false;
					if ((this || _global)._hasMaskedPath) {
						segmentInd = initSegmentInd;
						pointInd = initPointInd;
						points = segments[segmentInd].points;
						prevPoint = points[pointInd - 1];
						currentPoint = points[pointInd];
						partialLength = currentPoint.partialLength;
						segmentLength = 0;
					}
					letterM = "";
					letterFc = "";
					letterSw = "";
					letterO = "";
					letterP = (this || _global).defaultPropsArray;
				} else {
					if ((this || _global)._hasMaskedPath) {
						if (currentLine !== letters[i].line) {
							switch (documentData.j) {
								case 1:
									currentLength +=
										totalLength - documentData.lineWidths[letters[i].line];
									break;
								case 2:
									currentLength +=
										(totalLength - documentData.lineWidths[letters[i].line]) /
										2;
									break;
								default:
									break;
							}
							currentLine = letters[i].line;
						}
						if (ind !== letters[i].ind) {
							if (letters[ind]) {
								currentLength += letters[ind].extra;
							}
							currentLength += letters[i].an / 2;
							ind = letters[i].ind;
						}
						currentLength += alignment[0] * letters[i].an * 5e-3;
						var animatorOffset = 0;
						for (j = 0; j < jLen; j += 1) {
							animatorProps = animators[j].a;
							if (animatorProps.p.propType) {
								animatorSelector = animators[j].s;
								mult = animatorSelector.getMult(
									letters[i].anIndexes[j],
									textData.a[j].s.totalChars,
								);
								if (mult.length) {
									animatorOffset += animatorProps.p.v[0] * mult[0];
								} else {
									animatorOffset += animatorProps.p.v[0] * mult;
								}
							}
							if (animatorProps.a.propType) {
								animatorSelector = animators[j].s;
								mult = animatorSelector.getMult(
									letters[i].anIndexes[j],
									textData.a[j].s.totalChars,
								);
								if (mult.length) {
									animatorOffset += animatorProps.a.v[0] * mult[0];
								} else {
									animatorOffset += animatorProps.a.v[0] * mult;
								}
							}
						}
						flag = true;
						while (flag) {
							if (
								segmentLength + partialLength >=
									currentLength + animatorOffset ||
								!points
							) {
								perc =
									(currentLength + animatorOffset - segmentLength) /
									currentPoint.partialLength;
								xPathPos =
									prevPoint.point[0] +
									(currentPoint.point[0] - prevPoint.point[0]) * perc;
								yPathPos =
									prevPoint.point[1] +
									(currentPoint.point[1] - prevPoint.point[1]) * perc;
								matrixHelper.translate(
									-alignment[0] * letters[i].an * 5e-3,
									-(alignment[1] * yOff) * 0.01,
								);
								flag = false;
							} else if (points) {
								segmentLength += currentPoint.partialLength;
								pointInd += 1;
								if (pointInd >= points.length) {
									pointInd = 0;
									segmentInd += 1;
									if (!segments[segmentInd]) {
										if (mask22.v.c) {
											pointInd = 0;
											segmentInd = 0;
											points = segments[segmentInd].points;
										} else {
											segmentLength -= currentPoint.partialLength;
											points = null;
										}
									} else {
										points = segments[segmentInd].points;
									}
								}
								if (points) {
									prevPoint = currentPoint;
									currentPoint = points[pointInd];
									partialLength = currentPoint.partialLength;
								}
							}
						}
						offf = letters[i].an / 2 - letters[i].add;
						matrixHelper.translate(-offf, 0, 0);
					} else {
						offf = letters[i].an / 2 - letters[i].add;
						matrixHelper.translate(-offf, 0, 0);
						matrixHelper.translate(
							-alignment[0] * letters[i].an * 5e-3,
							-alignment[1] * yOff * 0.01,
							0,
						);
					}
					for (j = 0; j < jLen; j += 1) {
						animatorProps = animators[j].a;
						if (animatorProps.t.propType) {
							animatorSelector = animators[j].s;
							mult = animatorSelector.getMult(
								letters[i].anIndexes[j],
								textData.a[j].s.totalChars,
							);
							if (xPos !== 0 || documentData.j !== 0) {
								if ((this || _global)._hasMaskedPath) {
									if (mult.length) {
										currentLength += animatorProps.t.v * mult[0];
									} else {
										currentLength += animatorProps.t.v * mult;
									}
								} else if (mult.length) {
									xPos += animatorProps.t.v * mult[0];
								} else {
									xPos += animatorProps.t.v * mult;
								}
							}
						}
					}
					if (documentData.strokeWidthAnim) {
						sw = documentData.sw || 0;
					}
					if (documentData.strokeColorAnim) {
						if (documentData.sc) {
							sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
						} else {
							sc = [0, 0, 0];
						}
					}
					if (documentData.fillColorAnim && documentData.fc) {
						fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
					}
					for (j = 0; j < jLen; j += 1) {
						animatorProps = animators[j].a;
						if (animatorProps.a.propType) {
							animatorSelector = animators[j].s;
							mult = animatorSelector.getMult(
								letters[i].anIndexes[j],
								textData.a[j].s.totalChars,
							);
							if (mult.length) {
								matrixHelper.translate(
									-animatorProps.a.v[0] * mult[0],
									-animatorProps.a.v[1] * mult[1],
									animatorProps.a.v[2] * mult[2],
								);
							} else {
								matrixHelper.translate(
									-animatorProps.a.v[0] * mult,
									-animatorProps.a.v[1] * mult,
									animatorProps.a.v[2] * mult,
								);
							}
						}
					}
					for (j = 0; j < jLen; j += 1) {
						animatorProps = animators[j].a;
						if (animatorProps.s.propType) {
							animatorSelector = animators[j].s;
							mult = animatorSelector.getMult(
								letters[i].anIndexes[j],
								textData.a[j].s.totalChars,
							);
							if (mult.length) {
								matrixHelper.scale(
									1 + (animatorProps.s.v[0] - 1) * mult[0],
									1 + (animatorProps.s.v[1] - 1) * mult[1],
									1,
								);
							} else {
								matrixHelper.scale(
									1 + (animatorProps.s.v[0] - 1) * mult,
									1 + (animatorProps.s.v[1] - 1) * mult,
									1,
								);
							}
						}
					}
					for (j = 0; j < jLen; j += 1) {
						animatorProps = animators[j].a;
						animatorSelector = animators[j].s;
						mult = animatorSelector.getMult(
							letters[i].anIndexes[j],
							textData.a[j].s.totalChars,
						);
						if (animatorProps.sk.propType) {
							if (mult.length) {
								matrixHelper.skewFromAxis(
									-animatorProps.sk.v * mult[0],
									animatorProps.sa.v * mult[1],
								);
							} else {
								matrixHelper.skewFromAxis(
									-animatorProps.sk.v * mult,
									animatorProps.sa.v * mult,
								);
							}
						}
						if (animatorProps.r.propType) {
							if (mult.length) {
								matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
							} else {
								matrixHelper.rotateZ(-animatorProps.r.v * mult);
							}
						}
						if (animatorProps.ry.propType) {
							if (mult.length) {
								matrixHelper.rotateY(animatorProps.ry.v * mult[1]);
							} else {
								matrixHelper.rotateY(animatorProps.ry.v * mult);
							}
						}
						if (animatorProps.rx.propType) {
							if (mult.length) {
								matrixHelper.rotateX(animatorProps.rx.v * mult[0]);
							} else {
								matrixHelper.rotateX(animatorProps.rx.v * mult);
							}
						}
						if (animatorProps.o.propType) {
							if (mult.length) {
								elemOpacity +=
									(animatorProps.o.v * mult[0] - elemOpacity) * mult[0];
							} else {
								elemOpacity += (animatorProps.o.v * mult - elemOpacity) * mult;
							}
						}
						if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
							if (mult.length) {
								sw += animatorProps.sw.v * mult[0];
							} else {
								sw += animatorProps.sw.v * mult;
							}
						}
						if (documentData.strokeColorAnim && animatorProps.sc.propType) {
							for (k = 0; k < 3; k += 1) {
								if (mult.length) {
									sc[k] += (animatorProps.sc.v[k] - sc[k]) * mult[0];
								} else {
									sc[k] += (animatorProps.sc.v[k] - sc[k]) * mult;
								}
							}
						}
						if (documentData.fillColorAnim && documentData.fc) {
							if (animatorProps.fc.propType) {
								for (k = 0; k < 3; k += 1) {
									if (mult.length) {
										fc[k] += (animatorProps.fc.v[k] - fc[k]) * mult[0];
									} else {
										fc[k] += (animatorProps.fc.v[k] - fc[k]) * mult;
									}
								}
							}
							if (animatorProps.fh.propType) {
								if (mult.length) {
									fc = addHueToRGB(fc, animatorProps.fh.v * mult[0]);
								} else {
									fc = addHueToRGB(fc, animatorProps.fh.v * mult);
								}
							}
							if (animatorProps.fs.propType) {
								if (mult.length) {
									fc = addSaturationToRGB(fc, animatorProps.fs.v * mult[0]);
								} else {
									fc = addSaturationToRGB(fc, animatorProps.fs.v * mult);
								}
							}
							if (animatorProps.fb.propType) {
								if (mult.length) {
									fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult[0]);
								} else {
									fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult);
								}
							}
						}
					}
					for (j = 0; j < jLen; j += 1) {
						animatorProps = animators[j].a;
						if (animatorProps.p.propType) {
							animatorSelector = animators[j].s;
							mult = animatorSelector.getMult(
								letters[i].anIndexes[j],
								textData.a[j].s.totalChars,
							);
							if ((this || _global)._hasMaskedPath) {
								if (mult.length) {
									matrixHelper.translate(
										0,
										animatorProps.p.v[1] * mult[0],
										-animatorProps.p.v[2] * mult[1],
									);
								} else {
									matrixHelper.translate(
										0,
										animatorProps.p.v[1] * mult,
										-animatorProps.p.v[2] * mult,
									);
								}
							} else if (mult.length) {
								matrixHelper.translate(
									animatorProps.p.v[0] * mult[0],
									animatorProps.p.v[1] * mult[1],
									-animatorProps.p.v[2] * mult[2],
								);
							} else {
								matrixHelper.translate(
									animatorProps.p.v[0] * mult,
									animatorProps.p.v[1] * mult,
									-animatorProps.p.v[2] * mult,
								);
							}
						}
					}
					if (documentData.strokeWidthAnim) {
						letterSw = sw < 0 ? 0 : sw;
					}
					if (documentData.strokeColorAnim) {
						letterSc =
							"rgb(" +
							Math.round(sc[0] * 255) +
							"," +
							Math.round(sc[1] * 255) +
							"," +
							Math.round(sc[2] * 255) +
							")";
					}
					if (documentData.fillColorAnim && documentData.fc) {
						letterFc =
							"rgb(" +
							Math.round(fc[0] * 255) +
							"," +
							Math.round(fc[1] * 255) +
							"," +
							Math.round(fc[2] * 255) +
							")";
					}
					if ((this || _global)._hasMaskedPath) {
						matrixHelper.translate(0, -documentData.ls);
						matrixHelper.translate(0, alignment[1] * yOff * 0.01 + yPos, 0);
						if (textData.p.p) {
							tanAngle =
								(currentPoint.point[1] - prevPoint.point[1]) /
								(currentPoint.point[0] - prevPoint.point[0]);
							var rot = (Math.atan(tanAngle) * 180) / Math.PI;
							if (currentPoint.point[0] < prevPoint.point[0]) {
								rot += 180;
							}
							matrixHelper.rotate((-rot * Math.PI) / 180);
						}
						matrixHelper.translate(xPathPos, yPathPos, 0);
						currentLength -= alignment[0] * letters[i].an * 5e-3;
						if (letters[i + 1] && ind !== letters[i + 1].ind) {
							currentLength += letters[i].an / 2;
							currentLength += documentData.tr * 1e-3 * documentData.finalSize;
						}
					} else {
						matrixHelper.translate(xPos, yPos, 0);
						if (documentData.ps) {
							matrixHelper.translate(
								documentData.ps[0],
								documentData.ps[1] + documentData.ascent,
								0,
							);
						}
						switch (documentData.j) {
							case 1:
								matrixHelper.translate(
									letters[i].animatorJustifyOffset +
										documentData.justifyOffset +
										(documentData.boxWidth -
											documentData.lineWidths[letters[i].line]),
									0,
									0,
								);
								break;
							case 2:
								matrixHelper.translate(
									letters[i].animatorJustifyOffset +
										documentData.justifyOffset +
										(documentData.boxWidth -
											documentData.lineWidths[letters[i].line]) /
											2,
									0,
									0,
								);
								break;
							default:
								break;
						}
						matrixHelper.translate(0, -documentData.ls);
						matrixHelper.translate(offf, 0, 0);
						matrixHelper.translate(
							alignment[0] * letters[i].an * 5e-3,
							alignment[1] * yOff * 0.01,
							0,
						);
						xPos +=
							letters[i].l + documentData.tr * 1e-3 * documentData.finalSize;
					}
					if (renderType === "html") {
						letterM = matrixHelper.toCSS();
					} else if (renderType === "svg") {
						letterM = matrixHelper.to2dCSS();
					} else {
						letterP = [
							matrixHelper.props[0],
							matrixHelper.props[1],
							matrixHelper.props[2],
							matrixHelper.props[3],
							matrixHelper.props[4],
							matrixHelper.props[5],
							matrixHelper.props[6],
							matrixHelper.props[7],
							matrixHelper.props[8],
							matrixHelper.props[9],
							matrixHelper.props[10],
							matrixHelper.props[11],
							matrixHelper.props[12],
							matrixHelper.props[13],
							matrixHelper.props[14],
							matrixHelper.props[15],
						];
					}
					letterO = elemOpacity;
				}
				if (renderedLettersCount <= i) {
					letterValue = new LetterProps(
						letterO,
						letterSw,
						letterSc,
						letterFc,
						letterM,
						letterP,
					);
					(this || _global).renderedLetters.push(letterValue);
					renderedLettersCount += 1;
					(this || _global).lettersChangedFlag = true;
				} else {
					letterValue = (this || _global).renderedLetters[i];
					(this || _global).lettersChangedFlag =
						letterValue.update(
							letterO,
							letterSw,
							letterSc,
							letterFc,
							letterM,
							letterP,
						) || (this || _global).lettersChangedFlag;
				}
			}
		};
		TextAnimatorProperty.prototype.getValue = function () {
			if (
				(this || _global)._elem.globalData.frameId ===
				(this || _global)._frameId
			) {
				return;
			}
			(this || _global)._frameId = (this || _global)._elem.globalData.frameId;
			this.iterateDynamicProperties();
		};
		TextAnimatorProperty.prototype.mHelper = new Matrix();
		TextAnimatorProperty.prototype.defaultPropsArray = [];
		extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);
		function TextAnimatorDataProperty(elem2, animatorProps, container) {
			var defaultData = {
				propType: false,
			};
			var getProp = PropertyFactory.getProp;
			var textAnimatorAnimatables = animatorProps.a;
			(this || _global).a = {
				r: textAnimatorAnimatables.r
					? getProp(elem2, textAnimatorAnimatables.r, 0, degToRads, container)
					: defaultData,
				rx: textAnimatorAnimatables.rx
					? getProp(elem2, textAnimatorAnimatables.rx, 0, degToRads, container)
					: defaultData,
				ry: textAnimatorAnimatables.ry
					? getProp(elem2, textAnimatorAnimatables.ry, 0, degToRads, container)
					: defaultData,
				sk: textAnimatorAnimatables.sk
					? getProp(elem2, textAnimatorAnimatables.sk, 0, degToRads, container)
					: defaultData,
				sa: textAnimatorAnimatables.sa
					? getProp(elem2, textAnimatorAnimatables.sa, 0, degToRads, container)
					: defaultData,
				s: textAnimatorAnimatables.s
					? getProp(elem2, textAnimatorAnimatables.s, 1, 0.01, container)
					: defaultData,
				a: textAnimatorAnimatables.a
					? getProp(elem2, textAnimatorAnimatables.a, 1, 0, container)
					: defaultData,
				o: textAnimatorAnimatables.o
					? getProp(elem2, textAnimatorAnimatables.o, 0, 0.01, container)
					: defaultData,
				p: textAnimatorAnimatables.p
					? getProp(elem2, textAnimatorAnimatables.p, 1, 0, container)
					: defaultData,
				sw: textAnimatorAnimatables.sw
					? getProp(elem2, textAnimatorAnimatables.sw, 0, 0, container)
					: defaultData,
				sc: textAnimatorAnimatables.sc
					? getProp(elem2, textAnimatorAnimatables.sc, 1, 0, container)
					: defaultData,
				fc: textAnimatorAnimatables.fc
					? getProp(elem2, textAnimatorAnimatables.fc, 1, 0, container)
					: defaultData,
				fh: textAnimatorAnimatables.fh
					? getProp(elem2, textAnimatorAnimatables.fh, 0, 0, container)
					: defaultData,
				fs: textAnimatorAnimatables.fs
					? getProp(elem2, textAnimatorAnimatables.fs, 0, 0.01, container)
					: defaultData,
				fb: textAnimatorAnimatables.fb
					? getProp(elem2, textAnimatorAnimatables.fb, 0, 0.01, container)
					: defaultData,
				t: textAnimatorAnimatables.t
					? getProp(elem2, textAnimatorAnimatables.t, 0, 0, container)
					: defaultData,
			};
			(this || _global).s = TextSelectorProp.getTextSelectorProp(
				elem2,
				animatorProps.s,
				container,
			);
			(this || _global).s.t = animatorProps.s.t;
		}
		function LetterProps(o, sw, sc, fc, m, p) {
			(this || _global).o = o;
			(this || _global).sw = sw;
			(this || _global).sc = sc;
			(this || _global).fc = fc;
			(this || _global).m = m;
			(this || _global).p = p;
			(this || _global)._mdf = {
				o: true,
				sw: !!sw,
				sc: !!sc,
				fc: !!fc,
				m: true,
				p: true,
			};
		}
		LetterProps.prototype.update = function (o, sw, sc, fc, m, p) {
			(this || _global)._mdf.o = false;
			(this || _global)._mdf.sw = false;
			(this || _global)._mdf.sc = false;
			(this || _global)._mdf.fc = false;
			(this || _global)._mdf.m = false;
			(this || _global)._mdf.p = false;
			var updated = false;
			if ((this || _global).o !== o) {
				(this || _global).o = o;
				(this || _global)._mdf.o = true;
				updated = true;
			}
			if ((this || _global).sw !== sw) {
				(this || _global).sw = sw;
				(this || _global)._mdf.sw = true;
				updated = true;
			}
			if ((this || _global).sc !== sc) {
				(this || _global).sc = sc;
				(this || _global)._mdf.sc = true;
				updated = true;
			}
			if ((this || _global).fc !== fc) {
				(this || _global).fc = fc;
				(this || _global)._mdf.fc = true;
				updated = true;
			}
			if ((this || _global).m !== m) {
				(this || _global).m = m;
				(this || _global)._mdf.m = true;
				updated = true;
			}
			if (
				p.length &&
				((this || _global).p[0] !== p[0] ||
					(this || _global).p[1] !== p[1] ||
					(this || _global).p[4] !== p[4] ||
					(this || _global).p[5] !== p[5] ||
					(this || _global).p[12] !== p[12] ||
					(this || _global).p[13] !== p[13])
			) {
				(this || _global).p = p;
				(this || _global)._mdf.p = true;
				updated = true;
			}
			return updated;
		};
		function TextProperty(elem2, data2) {
			(this || _global)._frameId = initialDefaultFrame;
			(this || _global).pv = "";
			(this || _global).v = "";
			(this || _global).kf = false;
			(this || _global)._isFirstFrame = true;
			(this || _global)._mdf = false;
			(this || _global).data = data2;
			(this || _global).elem = elem2;
			(this || _global).comp = (this || _global).elem.comp;
			(this || _global).keysIndex = 0;
			(this || _global).canResize = false;
			(this || _global).minimumFontSize = 1;
			(this || _global).effectsSequence = [];
			(this || _global).currentData = {
				ascent: 0,
				boxWidth: (this || _global).defaultBoxWidth,
				f: "",
				fStyle: "",
				fWeight: "",
				fc: "",
				j: "",
				justifyOffset: "",
				l: [],
				lh: 0,
				lineWidths: [],
				ls: "",
				of: "",
				s: "",
				sc: "",
				sw: 0,
				t: 0,
				tr: 0,
				sz: 0,
				ps: null,
				fillColorAnim: false,
				strokeColorAnim: false,
				strokeWidthAnim: false,
				yOffset: 0,
				finalSize: 0,
				finalText: [],
				finalLineHeight: 0,
				__complete: false,
			};
			this.copyData(
				(this || _global).currentData,
				(this || _global).data.d.k[0].s,
			);
			if (!this.searchProperty()) {
				this.completeTextData((this || _global).currentData);
			}
		}
		TextProperty.prototype.defaultBoxWidth = [0, 0];
		TextProperty.prototype.copyData = function (obj, data2) {
			for (var s in data2) {
				if (Object.prototype.hasOwnProperty.call(data2, s)) {
					obj[s] = data2[s];
				}
			}
			return obj;
		};
		TextProperty.prototype.setCurrentData = function (data2) {
			if (!data2.__complete) {
				this.completeTextData(data2);
			}
			(this || _global).currentData = data2;
			(this || _global).currentData.boxWidth =
				(this || _global).currentData.boxWidth ||
				(this || _global).defaultBoxWidth;
			(this || _global)._mdf = true;
		};
		TextProperty.prototype.searchProperty = function () {
			return this.searchKeyframes();
		};
		TextProperty.prototype.searchKeyframes = function () {
			(this || _global).kf = (this || _global).data.d.k.length > 1;
			if ((this || _global).kf) {
				this.addEffect(
					(this || _global).getKeyframeValue.bind(this || _global),
				);
			}
			return (this || _global).kf;
		};
		TextProperty.prototype.addEffect = function (effectFunction) {
			(this || _global).effectsSequence.push(effectFunction);
			(this || _global).elem.addDynamicProperty(this || _global);
		};
		TextProperty.prototype.getValue = function (_finalValue) {
			if (
				((this || _global).elem.globalData.frameId ===
					(this || _global).frameId ||
					!(this || _global).effectsSequence.length) &&
				!_finalValue
			) {
				return;
			}
			(this || _global).currentData.t = (this || _global).data.d.k[
				(this || _global).keysIndex
			].s.t;
			var currentValue = (this || _global).currentData;
			var currentIndex = (this || _global).keysIndex;
			if ((this || _global).lock) {
				this.setCurrentData((this || _global).currentData);
				return;
			}
			(this || _global).lock = true;
			(this || _global)._mdf = false;
			var i;
			var len = (this || _global).effectsSequence.length;
			var finalValue =
				_finalValue ||
				(this || _global).data.d.k[(this || _global).keysIndex].s;
			for (i = 0; i < len; i += 1) {
				if (currentIndex !== (this || _global).keysIndex) {
					finalValue = (this || _global).effectsSequence[i](
						finalValue,
						finalValue.t,
					);
				} else {
					finalValue = (this || _global).effectsSequence[i](
						(this || _global).currentData,
						finalValue.t,
					);
				}
			}
			if (currentValue !== finalValue) {
				this.setCurrentData(finalValue);
			}
			(this || _global).v = (this || _global).currentData;
			(this || _global).pv = (this || _global).v;
			(this || _global).lock = false;
			(this || _global).frameId = (this || _global).elem.globalData.frameId;
		};
		TextProperty.prototype.getKeyframeValue = function () {
			var textKeys = (this || _global).data.d.k;
			var frameNum = (this || _global).elem.comp.renderedFrame;
			var i = 0;
			var len = textKeys.length;
			while (i <= len - 1) {
				if (i === len - 1 || textKeys[i + 1].t > frameNum) {
					break;
				}
				i += 1;
			}
			if ((this || _global).keysIndex !== i) {
				(this || _global).keysIndex = i;
			}
			return (this || _global).data.d.k[(this || _global).keysIndex].s;
		};
		TextProperty.prototype.buildFinalText = function (text2) {
			var combinedCharacters = FontManager.getCombinedCharacterCodes();
			var charactersArray = [];
			var i = 0;
			var len = text2.length;
			var charCode;
			while (i < len) {
				charCode = text2.charCodeAt(i);
				if (combinedCharacters.indexOf(charCode) !== -1) {
					charactersArray[charactersArray.length - 1] += text2.charAt(i);
				} else if (charCode >= 55296 && charCode <= 56319) {
					charCode = text2.charCodeAt(i + 1);
					if (charCode >= 56320 && charCode <= 57343) {
						charactersArray.push(text2.substr(i, 2));
						i += 1;
					} else {
						charactersArray.push(text2.charAt(i));
					}
				} else {
					charactersArray.push(text2.charAt(i));
				}
				i += 1;
			}
			return charactersArray;
		};
		TextProperty.prototype.completeTextData = function (documentData) {
			documentData.__complete = true;
			var fontManager = (this || _global).elem.globalData.fontManager;
			var data2 = (this || _global).data;
			var letters = [];
			var i;
			var len;
			var newLineFlag;
			var index2 = 0;
			var val2;
			var anchorGrouping = data2.m.g;
			var currentSize = 0;
			var currentPos = 0;
			var currentLine = 0;
			var lineWidths = [];
			var lineWidth = 0;
			var maxLineWidth = 0;
			var j;
			var jLen;
			var fontData = fontManager.getFontByName(documentData.f);
			var charData;
			var cLength = 0;
			var fontProps = getFontProperties(fontData);
			documentData.fWeight = fontProps.weight;
			documentData.fStyle = fontProps.style;
			documentData.finalSize = documentData.s;
			documentData.finalText = this.buildFinalText(documentData.t);
			len = documentData.finalText.length;
			documentData.finalLineHeight = documentData.lh;
			var trackingOffset = (documentData.tr / 1e3) * documentData.finalSize;
			var charCode;
			if (documentData.sz) {
				var flag = true;
				var boxWidth = documentData.sz[0];
				var boxHeight = documentData.sz[1];
				var currentHeight;
				var finalText;
				while (flag) {
					finalText = this.buildFinalText(documentData.t);
					currentHeight = 0;
					lineWidth = 0;
					len = finalText.length;
					trackingOffset = (documentData.tr / 1e3) * documentData.finalSize;
					var lastSpaceIndex = -1;
					for (i = 0; i < len; i += 1) {
						charCode = finalText[i].charCodeAt(0);
						newLineFlag = false;
						if (finalText[i] === " ") {
							lastSpaceIndex = i;
						} else if (charCode === 13 || charCode === 3) {
							lineWidth = 0;
							newLineFlag = true;
							currentHeight +=
								documentData.finalLineHeight || documentData.finalSize * 1.2;
						}
						if (fontManager.chars) {
							charData = fontManager.getCharData(
								finalText[i],
								fontData.fStyle,
								fontData.fFamily,
							);
							cLength = newLineFlag
								? 0
								: (charData.w * documentData.finalSize) / 100;
						} else {
							cLength = fontManager.measureText(
								finalText[i],
								documentData.f,
								documentData.finalSize,
							);
						}
						if (lineWidth + cLength > boxWidth && finalText[i] !== " ") {
							if (lastSpaceIndex === -1) {
								len += 1;
							} else {
								i = lastSpaceIndex;
							}
							currentHeight +=
								documentData.finalLineHeight || documentData.finalSize * 1.2;
							finalText.splice(i, lastSpaceIndex === i ? 1 : 0, "\r");
							lastSpaceIndex = -1;
							lineWidth = 0;
						} else {
							lineWidth += cLength;
							lineWidth += trackingOffset;
						}
					}
					currentHeight += (fontData.ascent * documentData.finalSize) / 100;
					if (
						(this || _global).canResize &&
						documentData.finalSize > (this || _global).minimumFontSize &&
						boxHeight < currentHeight
					) {
						documentData.finalSize -= 1;
						documentData.finalLineHeight =
							(documentData.finalSize * documentData.lh) / documentData.s;
					} else {
						documentData.finalText = finalText;
						len = documentData.finalText.length;
						flag = false;
					}
				}
			}
			lineWidth = -trackingOffset;
			cLength = 0;
			var uncollapsedSpaces = 0;
			var currentChar;
			for (i = 0; i < len; i += 1) {
				newLineFlag = false;
				currentChar = documentData.finalText[i];
				charCode = currentChar.charCodeAt(0);
				if (charCode === 13 || charCode === 3) {
					uncollapsedSpaces = 0;
					lineWidths.push(lineWidth);
					maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
					lineWidth = -2 * trackingOffset;
					val2 = "";
					newLineFlag = true;
					currentLine += 1;
				} else {
					val2 = currentChar;
				}
				if (fontManager.chars) {
					charData = fontManager.getCharData(
						currentChar,
						fontData.fStyle,
						fontManager.getFontByName(documentData.f).fFamily,
					);
					cLength = newLineFlag
						? 0
						: (charData.w * documentData.finalSize) / 100;
				} else {
					cLength = fontManager.measureText(
						val2,
						documentData.f,
						documentData.finalSize,
					);
				}
				if (currentChar === " ") {
					uncollapsedSpaces += cLength + trackingOffset;
				} else {
					lineWidth += cLength + trackingOffset + uncollapsedSpaces;
					uncollapsedSpaces = 0;
				}
				letters.push({
					l: cLength,
					an: cLength,
					add: currentSize,
					n: newLineFlag,
					anIndexes: [],
					val: val2,
					line: currentLine,
					animatorJustifyOffset: 0,
				});
				if (anchorGrouping == 2) {
					currentSize += cLength;
					if (val2 === "" || val2 === " " || i === len - 1) {
						if (val2 === "" || val2 === " ") {
							currentSize -= cLength;
						}
						while (currentPos <= i) {
							letters[currentPos].an = currentSize;
							letters[currentPos].ind = index2;
							letters[currentPos].extra = cLength;
							currentPos += 1;
						}
						index2 += 1;
						currentSize = 0;
					}
				} else if (anchorGrouping == 3) {
					currentSize += cLength;
					if (val2 === "" || i === len - 1) {
						if (val2 === "") {
							currentSize -= cLength;
						}
						while (currentPos <= i) {
							letters[currentPos].an = currentSize;
							letters[currentPos].ind = index2;
							letters[currentPos].extra = cLength;
							currentPos += 1;
						}
						currentSize = 0;
						index2 += 1;
					}
				} else {
					letters[index2].ind = index2;
					letters[index2].extra = 0;
					index2 += 1;
				}
			}
			documentData.l = letters;
			maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
			lineWidths.push(lineWidth);
			if (documentData.sz) {
				documentData.boxWidth = documentData.sz[0];
				documentData.justifyOffset = 0;
			} else {
				documentData.boxWidth = maxLineWidth;
				switch (documentData.j) {
					case 1:
						documentData.justifyOffset = -documentData.boxWidth;
						break;
					case 2:
						documentData.justifyOffset = -documentData.boxWidth / 2;
						break;
					default:
						documentData.justifyOffset = 0;
				}
			}
			documentData.lineWidths = lineWidths;
			var animators = data2.a;
			var animatorData;
			var letterData;
			jLen = animators.length;
			var based;
			var ind;
			var indexes = [];
			for (j = 0; j < jLen; j += 1) {
				animatorData = animators[j];
				if (animatorData.a.sc) {
					documentData.strokeColorAnim = true;
				}
				if (animatorData.a.sw) {
					documentData.strokeWidthAnim = true;
				}
				if (
					animatorData.a.fc ||
					animatorData.a.fh ||
					animatorData.a.fs ||
					animatorData.a.fb
				) {
					documentData.fillColorAnim = true;
				}
				ind = 0;
				based = animatorData.s.b;
				for (i = 0; i < len; i += 1) {
					letterData = letters[i];
					letterData.anIndexes[j] = ind;
					if (
						(based == 1 && letterData.val !== "") ||
						(based == 2 && letterData.val !== "" && letterData.val !== " ") ||
						(based == 3 &&
							(letterData.n || letterData.val == " " || i == len - 1)) ||
						(based == 4 && (letterData.n || i == len - 1))
					) {
						if (animatorData.s.rn === 1) {
							indexes.push(ind);
						}
						ind += 1;
					}
				}
				data2.a[j].s.totalChars = ind;
				var currentInd = -1;
				var newInd;
				if (animatorData.s.rn === 1) {
					for (i = 0; i < len; i += 1) {
						letterData = letters[i];
						if (currentInd != letterData.anIndexes[j]) {
							currentInd = letterData.anIndexes[j];
							newInd = indexes.splice(
								Math.floor(Math.random() * indexes.length),
								1,
							)[0];
						}
						letterData.anIndexes[j] = newInd;
					}
				}
			}
			documentData.yOffset =
				documentData.finalLineHeight || documentData.finalSize * 1.2;
			documentData.ls = documentData.ls || 0;
			documentData.ascent = (fontData.ascent * documentData.finalSize) / 100;
		};
		TextProperty.prototype.updateDocumentData = function (newData, index2) {
			index2 = index2 === void 0 ? (this || _global).keysIndex : index2;
			var dData = this.copyData({}, (this || _global).data.d.k[index2].s);
			dData = this.copyData(dData, newData);
			(this || _global).data.d.k[index2].s = dData;
			this.recalculate(index2);
			(this || _global).elem.addDynamicProperty(this || _global);
		};
		TextProperty.prototype.recalculate = function (index2) {
			var dData = (this || _global).data.d.k[index2].s;
			dData.__complete = false;
			(this || _global).keysIndex = 0;
			(this || _global)._isFirstFrame = true;
			this.getValue(dData);
		};
		TextProperty.prototype.canResizeFont = function (_canResize) {
			(this || _global).canResize = _canResize;
			this.recalculate((this || _global).keysIndex);
			(this || _global).elem.addDynamicProperty(this || _global);
		};
		TextProperty.prototype.setMinimumFontSize = function (_fontValue) {
			(this || _global).minimumFontSize = Math.floor(_fontValue) || 1;
			this.recalculate((this || _global).keysIndex);
			(this || _global).elem.addDynamicProperty(this || _global);
		};
		var TextSelectorProp = (function () {
			var max = Math.max;
			var min = Math.min;
			var floor = Math.floor;
			function TextSelectorPropFactory(elem2, data2) {
				(this || _global)._currentTextLength = -1;
				(this || _global).k = false;
				(this || _global).data = data2;
				(this || _global).elem = elem2;
				(this || _global).comp = elem2.comp;
				(this || _global).finalS = 0;
				(this || _global).finalE = 0;
				this.initDynamicPropertyContainer(elem2);
				(this || _global).s = PropertyFactory.getProp(
					elem2,
					data2.s || {
						k: 0,
					},
					0,
					0,
					this || _global,
				);
				if ("e" in data2) {
					(this || _global).e = PropertyFactory.getProp(
						elem2,
						data2.e,
						0,
						0,
						this || _global,
					);
				} else {
					(this || _global).e = {
						v: 100,
					};
				}
				(this || _global).o = PropertyFactory.getProp(
					elem2,
					data2.o || {
						k: 0,
					},
					0,
					0,
					this || _global,
				);
				(this || _global).xe = PropertyFactory.getProp(
					elem2,
					data2.xe || {
						k: 0,
					},
					0,
					0,
					this || _global,
				);
				(this || _global).ne = PropertyFactory.getProp(
					elem2,
					data2.ne || {
						k: 0,
					},
					0,
					0,
					this || _global,
				);
				(this || _global).a = PropertyFactory.getProp(
					elem2,
					data2.a,
					0,
					0.01,
					this || _global,
				);
				if (!(this || _global).dynamicProperties.length) {
					this.getValue();
				}
			}
			TextSelectorPropFactory.prototype = {
				getMult: function (ind) {
					if (
						(this || _global)._currentTextLength !==
						(this || _global).elem.textProperty.currentData.l.length
					) {
						this.getValue();
					}
					var x1 = 0;
					var y1 = 0;
					var x2 = 1;
					var y2 = 1;
					if ((this || _global).ne.v > 0) {
						x1 = (this || _global).ne.v / 100;
					} else {
						y1 = -(this || _global).ne.v / 100;
					}
					if ((this || _global).xe.v > 0) {
						x2 = 1 - (this || _global).xe.v / 100;
					} else {
						y2 = 1 + (this || _global).xe.v / 100;
					}
					var easer = BezierFactory.getBezierEasing(x1, y1, x2, y2).get;
					var mult = 0;
					var s = (this || _global).finalS;
					var e = (this || _global).finalE;
					var type = (this || _global).data.sh;
					if (type === 2) {
						if (e === s) {
							mult = ind >= e ? 1 : 0;
						} else {
							mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
						}
						mult = easer(mult);
					} else if (type === 3) {
						if (e === s) {
							mult = ind >= e ? 0 : 1;
						} else {
							mult = 1 - max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
						}
						mult = easer(mult);
					} else if (type === 4) {
						if (e === s) {
							mult = 0;
						} else {
							mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
							if (mult < 0.5) {
								mult *= 2;
							} else {
								mult = 1 - 2 * (mult - 0.5);
							}
						}
						mult = easer(mult);
					} else if (type === 5) {
						if (e === s) {
							mult = 0;
						} else {
							var tot = e - s;
							ind = min(max(0, ind + 0.5 - s), e - s);
							var x = -tot / 2 + ind;
							var a = tot / 2;
							mult = Math.sqrt(1 - (x * x) / (a * a));
						}
						mult = easer(mult);
					} else if (type === 6) {
						if (e === s) {
							mult = 0;
						} else {
							ind = min(max(0, ind + 0.5 - s), e - s);
							mult =
								(1 + Math.cos(Math.PI + (Math.PI * 2 * ind) / (e - s))) / 2;
						}
						mult = easer(mult);
					} else {
						if (ind >= floor(s)) {
							if (ind - s < 0) {
								mult = max(0, min(min(e, 1) - (s - ind), 1));
							} else {
								mult = max(0, min(e - ind, 1));
							}
						}
						mult = easer(mult);
					}
					return mult * (this || _global).a.v;
				},
				getValue: function (newCharsFlag) {
					this.iterateDynamicProperties();
					(this || _global)._mdf = newCharsFlag || (this || _global)._mdf;
					(this || _global)._currentTextLength =
						(this || _global).elem.textProperty.currentData.l.length || 0;
					if (newCharsFlag && (this || _global).data.r === 2) {
						(this || _global).e.v = (this || _global)._currentTextLength;
					}
					var divisor =
						(this || _global).data.r === 2
							? 1
							: 100 / (this || _global).data.totalChars;
					var o = (this || _global).o.v / divisor;
					var s = (this || _global).s.v / divisor + o;
					var e = (this || _global).e.v / divisor + o;
					if (s > e) {
						var _s = s;
						s = e;
						e = _s;
					}
					(this || _global).finalS = s;
					(this || _global).finalE = e;
				},
			};
			extendPrototype([DynamicPropertyContainer], TextSelectorPropFactory);
			function getTextSelectorProp(elem2, data2, arr) {
				return new TextSelectorPropFactory(elem2, data2, arr);
			}
			return {
				getTextSelectorProp,
			};
		})();
		var poolFactory = /* @__PURE__ */ (function () {
			return function (initialLength, _create, _release) {
				var _length = 0;
				var _maxLength = initialLength;
				var pool = createSizedArray(_maxLength);
				var ob2 = {
					newElement,
					release,
				};
				function newElement() {
					var element;
					if (_length) {
						_length -= 1;
						element = pool[_length];
					} else {
						element = _create();
					}
					return element;
				}
				function release(element) {
					if (_length === _maxLength) {
						pool = pooling.double(pool);
						_maxLength *= 2;
					}
					if (_release) {
						_release(element);
					}
					pool[_length] = element;
					_length += 1;
				}
				return ob2;
			};
		})();
		var pooling = /* @__PURE__ */ (function () {
			function double(arr) {
				return arr.concat(createSizedArray(arr.length));
			}
			return {
				double,
			};
		})();
		var pointPool = (function () {
			function create() {
				return createTypedArray("float32", 2);
			}
			return poolFactory(8, create);
		})();
		var shapePool = (function () {
			function create() {
				return new ShapePath();
			}
			function release(shapePath) {
				var len = shapePath._length;
				var i;
				for (i = 0; i < len; i += 1) {
					pointPool.release(shapePath.v[i]);
					pointPool.release(shapePath.i[i]);
					pointPool.release(shapePath.o[i]);
					shapePath.v[i] = null;
					shapePath.i[i] = null;
					shapePath.o[i] = null;
				}
				shapePath._length = 0;
				shapePath.c = false;
			}
			function clone(shape) {
				var cloned = factory.newElement();
				var i;
				var len = shape._length === void 0 ? shape.v.length : shape._length;
				cloned.setLength(len);
				cloned.c = shape.c;
				for (i = 0; i < len; i += 1) {
					cloned.setTripleAt(
						shape.v[i][0],
						shape.v[i][1],
						shape.o[i][0],
						shape.o[i][1],
						shape.i[i][0],
						shape.i[i][1],
						i,
					);
				}
				return cloned;
			}
			var factory = poolFactory(4, create, release);
			factory.clone = clone;
			return factory;
		})();
		var shapeCollectionPool = (function () {
			var ob2 = {
				newShapeCollection,
				release,
			};
			var _length = 0;
			var _maxLength = 4;
			var pool = createSizedArray(_maxLength);
			function newShapeCollection() {
				var shapeCollection;
				if (_length) {
					_length -= 1;
					shapeCollection = pool[_length];
				} else {
					shapeCollection = new ShapeCollection();
				}
				return shapeCollection;
			}
			function release(shapeCollection) {
				var i;
				var len = shapeCollection._length;
				for (i = 0; i < len; i += 1) {
					shapePool.release(shapeCollection.shapes[i]);
				}
				shapeCollection._length = 0;
				if (_length === _maxLength) {
					pool = pooling.double(pool);
					_maxLength *= 2;
				}
				pool[_length] = shapeCollection;
				_length += 1;
			}
			return ob2;
		})();
		var segmentsLengthPool = (function () {
			function create() {
				return {
					lengths: [],
					totalLength: 0,
				};
			}
			function release(element) {
				var i;
				var len = element.lengths.length;
				for (i = 0; i < len; i += 1) {
					bezierLengthPool.release(element.lengths[i]);
				}
				element.lengths.length = 0;
			}
			return poolFactory(8, create, release);
		})();
		var bezierLengthPool = (function () {
			function create() {
				return {
					addedLength: 0,
					percents: createTypedArray("float32", defaultCurveSegments),
					lengths: createTypedArray("float32", defaultCurveSegments),
				};
			}
			return poolFactory(8, create);
		})();
		var markerParser = /* @__PURE__ */ (function () {
			function parsePayloadLines(payload) {
				var lines = payload.split("\r\n");
				var keys = {};
				var line;
				var keysCount = 0;
				for (var i = 0; i < lines.length; i += 1) {
					line = lines[i].split(":");
					if (line.length === 2) {
						keys[line[0]] = line[1].trim();
						keysCount += 1;
					}
				}
				if (keysCount === 0) {
					throw new Error();
				}
				return keys;
			}
			return function (_markers) {
				var markers = [];
				for (var i = 0; i < _markers.length; i += 1) {
					var _marker = _markers[i];
					var markerData = {
						time: _marker.tm,
						duration: _marker.dr,
					};
					try {
						markerData.payload = JSON.parse(_markers[i].cm);
					} catch (_) {
						try {
							markerData.payload = parsePayloadLines(_markers[i].cm);
						} catch (__) {
							markerData.payload = {
								name: _markers[i],
							};
						}
					}
					markers.push(markerData);
				}
				return markers;
			};
		})();
		function BaseRenderer() {}
		BaseRenderer.prototype.checkLayers = function (num) {
			var i;
			var len = (this || _global).layers.length;
			var data2;
			(this || _global).completeLayers = true;
			for (i = len - 1; i >= 0; i -= 1) {
				if (!(this || _global).elements[i]) {
					data2 = (this || _global).layers[i];
					if (
						data2.ip - data2.st <= num - (this || _global).layers[i].st &&
						data2.op - data2.st > num - (this || _global).layers[i].st
					) {
						this.buildItem(i);
					}
				}
				(this || _global).completeLayers = (this || _global).elements[i]
					? (this || _global).completeLayers
					: false;
			}
			this.checkPendingElements();
		};
		BaseRenderer.prototype.createItem = function (layer) {
			switch (layer.ty) {
				case 2:
					return this.createImage(layer);
				case 0:
					return this.createComp(layer);
				case 1:
					return this.createSolid(layer);
				case 3:
					return this.createNull(layer);
				case 4:
					return this.createShape(layer);
				case 5:
					return this.createText(layer);
				case 6:
					return this.createAudio(layer);
				case 13:
					return this.createCamera(layer);
				case 15:
					return this.createFootage(layer);
				default:
					return this.createNull(layer);
			}
		};
		BaseRenderer.prototype.createCamera = function () {
			throw new Error("You're using a 3d camera. Try the html renderer.");
		};
		BaseRenderer.prototype.createAudio = function (data2) {
			return new AudioElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		BaseRenderer.prototype.createFootage = function (data2) {
			return new FootageElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		BaseRenderer.prototype.buildAllItems = function () {
			var i;
			var len = (this || _global).layers.length;
			for (i = 0; i < len; i += 1) {
				this.buildItem(i);
			}
			this.checkPendingElements();
		};
		BaseRenderer.prototype.includeLayers = function (newLayers) {
			(this || _global).completeLayers = false;
			var i;
			var len = newLayers.length;
			var j;
			var jLen = (this || _global).layers.length;
			for (i = 0; i < len; i += 1) {
				j = 0;
				while (j < jLen) {
					if ((this || _global).layers[j].id === newLayers[i].id) {
						(this || _global).layers[j] = newLayers[i];
						break;
					}
					j += 1;
				}
			}
		};
		BaseRenderer.prototype.setProjectInterface = function (pInterface) {
			(this || _global).globalData.projectInterface = pInterface;
		};
		BaseRenderer.prototype.initItems = function () {
			if (!(this || _global).globalData.progressiveLoad) {
				this.buildAllItems();
			}
		};
		BaseRenderer.prototype.buildElementParenting = function (
			element,
			parentName,
			hierarchy,
		) {
			var elements = (this || _global).elements;
			var layers = (this || _global).layers;
			var i = 0;
			var len = layers.length;
			while (i < len) {
				if (layers[i].ind == parentName) {
					if (!elements[i] || elements[i] === true) {
						this.buildItem(i);
						this.addPendingElement(element);
					} else {
						hierarchy.push(elements[i]);
						elements[i].setAsParent();
						if (layers[i].parent !== void 0) {
							this.buildElementParenting(element, layers[i].parent, hierarchy);
						} else {
							element.setHierarchy(hierarchy);
						}
					}
				}
				i += 1;
			}
		};
		BaseRenderer.prototype.addPendingElement = function (element) {
			(this || _global).pendingElements.push(element);
		};
		BaseRenderer.prototype.searchExtraCompositions = function (assets) {
			var i;
			var len = assets.length;
			for (i = 0; i < len; i += 1) {
				if (assets[i].xt) {
					var comp2 = this.createComp(assets[i]);
					comp2.initExpressions();
					(this || _global).globalData.projectInterface.registerComposition(
						comp2,
					);
				}
			}
		};
		BaseRenderer.prototype.setupGlobalData = function (
			animData,
			fontsContainer,
		) {
			(this || _global).globalData.fontManager = new FontManager();
			(this || _global).globalData.fontManager.addChars(animData.chars);
			(this || _global).globalData.fontManager.addFonts(
				animData.fonts,
				fontsContainer,
			);
			(this || _global).globalData.getAssetData = (
				this || _global
			).animationItem.getAssetData.bind((this || _global).animationItem);
			(this || _global).globalData.getAssetsPath = (
				this || _global
			).animationItem.getAssetsPath.bind((this || _global).animationItem);
			(this || _global).globalData.imageLoader = (
				this || _global
			).animationItem.imagePreloader;
			(this || _global).globalData.audioController = (
				this || _global
			).animationItem.audioController;
			(this || _global).globalData.frameId = 0;
			(this || _global).globalData.frameRate = animData.fr;
			(this || _global).globalData.nm = animData.nm;
			(this || _global).globalData.compSize = {
				w: animData.w,
				h: animData.h,
			};
		};
		function SVGRenderer(animationItem, config) {
			(this || _global).animationItem = animationItem;
			(this || _global).layers = null;
			(this || _global).renderedFrame = -1;
			(this || _global).svgElement = createNS("svg");
			var ariaLabel = "";
			if (config && config.title) {
				var titleElement = createNS("title");
				var titleId = createElementID();
				titleElement.setAttribute("id", titleId);
				titleElement.textContent = config.title;
				(this || _global).svgElement.appendChild(titleElement);
				ariaLabel += titleId;
			}
			if (config && config.description) {
				var descElement = createNS("desc");
				var descId = createElementID();
				descElement.setAttribute("id", descId);
				descElement.textContent = config.description;
				(this || _global).svgElement.appendChild(descElement);
				ariaLabel += " " + descId;
			}
			if (ariaLabel) {
				(this || _global).svgElement.setAttribute("aria-labelledby", ariaLabel);
			}
			var defs = createNS("defs");
			(this || _global).svgElement.appendChild(defs);
			var maskElement = createNS("g");
			(this || _global).svgElement.appendChild(maskElement);
			(this || _global).layerElement = maskElement;
			(this || _global).renderConfig = {
				preserveAspectRatio:
					(config && config.preserveAspectRatio) || "xMidYMid meet",
				imagePreserveAspectRatio:
					(config && config.imagePreserveAspectRatio) || "xMidYMid slice",
				progressiveLoad: (config && config.progressiveLoad) || false,
				hideOnTransparent: !(config && config.hideOnTransparent === false),
				viewBoxOnly: (config && config.viewBoxOnly) || false,
				viewBoxSize: (config && config.viewBoxSize) || false,
				className: (config && config.className) || "",
				id: (config && config.id) || "",
				focusable: config && config.focusable,
				filterSize: {
					width:
						(config && config.filterSize && config.filterSize.width) || "100%",
					height:
						(config && config.filterSize && config.filterSize.height) || "100%",
					x: (config && config.filterSize && config.filterSize.x) || "0%",
					y: (config && config.filterSize && config.filterSize.y) || "0%",
				},
			};
			(this || _global).globalData = {
				_mdf: false,
				frameNum: -1,
				defs,
				renderConfig: (this || _global).renderConfig,
			};
			(this || _global).elements = [];
			(this || _global).pendingElements = [];
			(this || _global).destroyed = false;
			(this || _global).rendererType = "svg";
		}
		extendPrototype([BaseRenderer], SVGRenderer);
		SVGRenderer.prototype.createNull = function (data2) {
			return new NullElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		SVGRenderer.prototype.createShape = function (data2) {
			return new SVGShapeElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		SVGRenderer.prototype.createText = function (data2) {
			return new SVGTextLottieElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		SVGRenderer.prototype.createImage = function (data2) {
			return new IImageElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		SVGRenderer.prototype.createComp = function (data2) {
			return new SVGCompElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		SVGRenderer.prototype.createSolid = function (data2) {
			return new ISolidElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		SVGRenderer.prototype.configAnimation = function (animData) {
			(this || _global).svgElement.setAttribute(
				"xmlns",
				"http://www.w3.org/2000/svg",
			);
			if ((this || _global).renderConfig.viewBoxSize) {
				(this || _global).svgElement.setAttribute(
					"viewBox",
					(this || _global).renderConfig.viewBoxSize,
				);
			} else {
				(this || _global).svgElement.setAttribute(
					"viewBox",
					"0 0 " + animData.w + " " + animData.h,
				);
			}
			if (!(this || _global).renderConfig.viewBoxOnly) {
				(this || _global).svgElement.setAttribute("width", animData.w);
				(this || _global).svgElement.setAttribute("height", animData.h);
				(this || _global).svgElement.style.width = "100%";
				(this || _global).svgElement.style.height = "100%";
				(this || _global).svgElement.style.transform = "translate3d(0,0,0)";
			}
			if ((this || _global).renderConfig.className) {
				(this || _global).svgElement.setAttribute(
					"class",
					(this || _global).renderConfig.className,
				);
			}
			if ((this || _global).renderConfig.id) {
				(this || _global).svgElement.setAttribute(
					"id",
					(this || _global).renderConfig.id,
				);
			}
			if ((this || _global).renderConfig.focusable !== void 0) {
				(this || _global).svgElement.setAttribute(
					"focusable",
					(this || _global).renderConfig.focusable,
				);
			}
			(this || _global).svgElement.setAttribute(
				"preserveAspectRatio",
				(this || _global).renderConfig.preserveAspectRatio,
			);
			(this || _global).animationItem.wrapper.appendChild(
				(this || _global).svgElement,
			);
			var defs = (this || _global).globalData.defs;
			this.setupGlobalData(animData, defs);
			(this || _global).globalData.progressiveLoad = (
				this || _global
			).renderConfig.progressiveLoad;
			(this || _global).data = animData;
			var maskElement = createNS("clipPath");
			var rect = createNS("rect");
			rect.setAttribute("width", animData.w);
			rect.setAttribute("height", animData.h);
			rect.setAttribute("x", 0);
			rect.setAttribute("y", 0);
			var maskId = createElementID();
			maskElement.setAttribute("id", maskId);
			maskElement.appendChild(rect);
			(this || _global).layerElement.setAttribute(
				"clip-path",
				"url(" + locationHref + "#" + maskId + ")",
			);
			defs.appendChild(maskElement);
			(this || _global).layers = animData.layers;
			(this || _global).elements = createSizedArray(animData.layers.length);
		};
		SVGRenderer.prototype.destroy = function () {
			if ((this || _global).animationItem.wrapper) {
				(this || _global).animationItem.wrapper.innerText = "";
			}
			(this || _global).layerElement = null;
			(this || _global).globalData.defs = null;
			var i;
			var len = (this || _global).layers ? (this || _global).layers.length : 0;
			for (i = 0; i < len; i += 1) {
				if ((this || _global).elements[i]) {
					(this || _global).elements[i].destroy();
				}
			}
			(this || _global).elements.length = 0;
			(this || _global).destroyed = true;
			(this || _global).animationItem = null;
		};
		SVGRenderer.prototype.updateContainerSize = function () {};
		SVGRenderer.prototype.buildItem = function (pos) {
			var elements = (this || _global).elements;
			if (elements[pos] || (this || _global).layers[pos].ty === 99) {
				return;
			}
			elements[pos] = true;
			var element = this.createItem((this || _global).layers[pos]);
			elements[pos] = element;
			if (expressionsPlugin) {
				if ((this || _global).layers[pos].ty === 0) {
					(this || _global).globalData.projectInterface.registerComposition(
						element,
					);
				}
				element.initExpressions();
			}
			this.appendElementInPos(element, pos);
			if ((this || _global).layers[pos].tt) {
				if (
					!(this || _global).elements[pos - 1] ||
					(this || _global).elements[pos - 1] === true
				) {
					this.buildItem(pos - 1);
					this.addPendingElement(element);
				} else {
					element.setMatte(elements[pos - 1].layerId);
				}
			}
		};
		SVGRenderer.prototype.checkPendingElements = function () {
			while ((this || _global).pendingElements.length) {
				var element = (this || _global).pendingElements.pop();
				element.checkParenting();
				if (element.data.tt) {
					var i = 0;
					var len = (this || _global).elements.length;
					while (i < len) {
						if ((this || _global).elements[i] === element) {
							element.setMatte((this || _global).elements[i - 1].layerId);
							break;
						}
						i += 1;
					}
				}
			}
		};
		SVGRenderer.prototype.renderFrame = function (num) {
			if (
				(this || _global).renderedFrame === num ||
				(this || _global).destroyed
			) {
				return;
			}
			if (num === null) {
				num = (this || _global).renderedFrame;
			} else {
				(this || _global).renderedFrame = num;
			}
			(this || _global).globalData.frameNum = num;
			(this || _global).globalData.frameId += 1;
			(this || _global).globalData.projectInterface.currentFrame = num;
			(this || _global).globalData._mdf = false;
			var i;
			var len = (this || _global).layers.length;
			if (!(this || _global).completeLayers) {
				this.checkLayers(num);
			}
			for (i = len - 1; i >= 0; i -= 1) {
				if ((this || _global).completeLayers || (this || _global).elements[i]) {
					(this || _global).elements[i].prepareFrame(
						num - (this || _global).layers[i].st,
					);
				}
			}
			if ((this || _global).globalData._mdf) {
				for (i = 0; i < len; i += 1) {
					if (
						(this || _global).completeLayers ||
						(this || _global).elements[i]
					) {
						(this || _global).elements[i].renderFrame();
					}
				}
			}
		};
		SVGRenderer.prototype.appendElementInPos = function (element, pos) {
			var newElement = element.getBaseElement();
			if (!newElement) {
				return;
			}
			var i = 0;
			var nextElement;
			while (i < pos) {
				if (
					(this || _global).elements[i] &&
					(this || _global).elements[i] !== true &&
					(this || _global).elements[i].getBaseElement()
				) {
					nextElement = (this || _global).elements[i].getBaseElement();
				}
				i += 1;
			}
			if (nextElement) {
				(this || _global).layerElement.insertBefore(newElement, nextElement);
			} else {
				(this || _global).layerElement.appendChild(newElement);
			}
		};
		SVGRenderer.prototype.hide = function () {
			(this || _global).layerElement.style.display = "none";
		};
		SVGRenderer.prototype.show = function () {
			(this || _global).layerElement.style.display = "block";
		};
		function CanvasRenderer(animationItem, config) {
			(this || _global).animationItem = animationItem;
			(this || _global).renderConfig = {
				clearCanvas:
					config && config.clearCanvas !== void 0 ? config.clearCanvas : true,
				context: (config && config.context) || null,
				progressiveLoad: (config && config.progressiveLoad) || false,
				preserveAspectRatio:
					(config && config.preserveAspectRatio) || "xMidYMid meet",
				imagePreserveAspectRatio:
					(config && config.imagePreserveAspectRatio) || "xMidYMid slice",
				className: (config && config.className) || "",
				id: (config && config.id) || "",
			};
			(this || _global).renderConfig.dpr = (config && config.dpr) || 1;
			if ((this || _global).animationItem.wrapper) {
				(this || _global).renderConfig.dpr =
					(config && config.dpr) || window.devicePixelRatio || 1;
			}
			(this || _global).renderedFrame = -1;
			(this || _global).globalData = {
				frameNum: -1,
				_mdf: false,
				renderConfig: (this || _global).renderConfig,
				currentGlobalAlpha: -1,
			};
			(this || _global).contextData = new CVContextData();
			(this || _global).elements = [];
			(this || _global).pendingElements = [];
			(this || _global).transformMat = new Matrix();
			(this || _global).completeLayers = false;
			(this || _global).rendererType = "canvas";
		}
		extendPrototype([BaseRenderer], CanvasRenderer);
		CanvasRenderer.prototype.createShape = function (data2) {
			return new CVShapeElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		CanvasRenderer.prototype.createText = function (data2) {
			return new CVTextElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		CanvasRenderer.prototype.createImage = function (data2) {
			return new CVImageElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		CanvasRenderer.prototype.createComp = function (data2) {
			return new CVCompElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		CanvasRenderer.prototype.createSolid = function (data2) {
			return new CVSolidElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		CanvasRenderer.prototype.createNull = SVGRenderer.prototype.createNull;
		CanvasRenderer.prototype.ctxTransform = function (props) {
			if (
				props[0] === 1 &&
				props[1] === 0 &&
				props[4] === 0 &&
				props[5] === 1 &&
				props[12] === 0 &&
				props[13] === 0
			) {
				return;
			}
			if (!(this || _global).renderConfig.clearCanvas) {
				(this || _global).canvasContext.transform(
					props[0],
					props[1],
					props[4],
					props[5],
					props[12],
					props[13],
				);
				return;
			}
			(this || _global).transformMat.cloneFromProps(props);
			var cProps = (this || _global).contextData.cTr.props;
			(this || _global).transformMat.transform(
				cProps[0],
				cProps[1],
				cProps[2],
				cProps[3],
				cProps[4],
				cProps[5],
				cProps[6],
				cProps[7],
				cProps[8],
				cProps[9],
				cProps[10],
				cProps[11],
				cProps[12],
				cProps[13],
				cProps[14],
				cProps[15],
			);
			(this || _global).contextData.cTr.cloneFromProps(
				(this || _global).transformMat.props,
			);
			var trProps = (this || _global).contextData.cTr.props;
			(this || _global).canvasContext.setTransform(
				trProps[0],
				trProps[1],
				trProps[4],
				trProps[5],
				trProps[12],
				trProps[13],
			);
		};
		CanvasRenderer.prototype.ctxOpacity = function (op) {
			if (!(this || _global).renderConfig.clearCanvas) {
				(this || _global).canvasContext.globalAlpha *= op < 0 ? 0 : op;
				(this || _global).globalData.currentGlobalAlpha = (
					this || _global
				).contextData.cO;
				return;
			}
			(this || _global).contextData.cO *= op < 0 ? 0 : op;
			if (
				(this || _global).globalData.currentGlobalAlpha !==
				(this || _global).contextData.cO
			) {
				(this || _global).canvasContext.globalAlpha = (
					this || _global
				).contextData.cO;
				(this || _global).globalData.currentGlobalAlpha = (
					this || _global
				).contextData.cO;
			}
		};
		CanvasRenderer.prototype.reset = function () {
			if (!(this || _global).renderConfig.clearCanvas) {
				(this || _global).canvasContext.restore();
				return;
			}
			(this || _global).contextData.reset();
		};
		CanvasRenderer.prototype.save = function (actionFlag) {
			if (!(this || _global).renderConfig.clearCanvas) {
				(this || _global).canvasContext.save();
				return;
			}
			if (actionFlag) {
				(this || _global).canvasContext.save();
			}
			var props = (this || _global).contextData.cTr.props;
			if (
				(this || _global).contextData._length <=
				(this || _global).contextData.cArrPos
			) {
				(this || _global).contextData.duplicate();
			}
			var i;
			var arr = (this || _global).contextData.saved[
				(this || _global).contextData.cArrPos
			];
			for (i = 0; i < 16; i += 1) {
				arr[i] = props[i];
			}
			(this || _global).contextData.savedOp[
				(this || _global).contextData.cArrPos
			] = (this || _global).contextData.cO;
			(this || _global).contextData.cArrPos += 1;
		};
		CanvasRenderer.prototype.restore = function (actionFlag) {
			if (!(this || _global).renderConfig.clearCanvas) {
				(this || _global).canvasContext.restore();
				return;
			}
			if (actionFlag) {
				(this || _global).canvasContext.restore();
				(this || _global).globalData.blendMode = "source-over";
			}
			(this || _global).contextData.cArrPos -= 1;
			var popped = (this || _global).contextData.saved[
				(this || _global).contextData.cArrPos
			];
			var i;
			var arr = (this || _global).contextData.cTr.props;
			for (i = 0; i < 16; i += 1) {
				arr[i] = popped[i];
			}
			(this || _global).canvasContext.setTransform(
				popped[0],
				popped[1],
				popped[4],
				popped[5],
				popped[12],
				popped[13],
			);
			popped = (this || _global).contextData.savedOp[
				(this || _global).contextData.cArrPos
			];
			(this || _global).contextData.cO = popped;
			if ((this || _global).globalData.currentGlobalAlpha !== popped) {
				(this || _global).canvasContext.globalAlpha = popped;
				(this || _global).globalData.currentGlobalAlpha = popped;
			}
		};
		CanvasRenderer.prototype.configAnimation = function (animData) {
			if ((this || _global).animationItem.wrapper) {
				(this || _global).animationItem.container = createTag("canvas");
				var containerStyle = (this || _global).animationItem.container.style;
				containerStyle.width = "100%";
				containerStyle.height = "100%";
				var origin = "0px 0px 0px";
				containerStyle.transformOrigin = origin;
				containerStyle.mozTransformOrigin = origin;
				containerStyle.webkitTransformOrigin = origin;
				containerStyle["-webkit-transform"] = origin;
				(this || _global).animationItem.wrapper.appendChild(
					(this || _global).animationItem.container,
				);
				(this || _global).canvasContext = (
					this || _global
				).animationItem.container.getContext("2d");
				if ((this || _global).renderConfig.className) {
					(this || _global).animationItem.container.setAttribute(
						"class",
						(this || _global).renderConfig.className,
					);
				}
				if ((this || _global).renderConfig.id) {
					(this || _global).animationItem.container.setAttribute(
						"id",
						(this || _global).renderConfig.id,
					);
				}
			} else {
				(this || _global).canvasContext = (
					this || _global
				).renderConfig.context;
			}
			(this || _global).data = animData;
			(this || _global).layers = animData.layers;
			(this || _global).transformCanvas = {
				w: animData.w,
				h: animData.h,
				sx: 0,
				sy: 0,
				tx: 0,
				ty: 0,
			};
			this.setupGlobalData(animData, document.body);
			(this || _global).globalData.canvasContext = (
				this || _global
			).canvasContext;
			(this || _global).globalData.renderer = this || _global;
			(this || _global).globalData.isDashed = false;
			(this || _global).globalData.progressiveLoad = (
				this || _global
			).renderConfig.progressiveLoad;
			(this || _global).globalData.transformCanvas = (
				this || _global
			).transformCanvas;
			(this || _global).elements = createSizedArray(animData.layers.length);
			this.updateContainerSize();
		};
		CanvasRenderer.prototype.updateContainerSize = function () {
			this.reset();
			var elementWidth;
			var elementHeight;
			if (
				(this || _global).animationItem.wrapper &&
				(this || _global).animationItem.container
			) {
				elementWidth = (this || _global).animationItem.wrapper.offsetWidth;
				elementHeight = (this || _global).animationItem.wrapper.offsetHeight;
				(this || _global).animationItem.container.setAttribute(
					"width",
					elementWidth * (this || _global).renderConfig.dpr,
				);
				(this || _global).animationItem.container.setAttribute(
					"height",
					elementHeight * (this || _global).renderConfig.dpr,
				);
			} else {
				elementWidth =
					(this || _global).canvasContext.canvas.width *
					(this || _global).renderConfig.dpr;
				elementHeight =
					(this || _global).canvasContext.canvas.height *
					(this || _global).renderConfig.dpr;
			}
			var elementRel;
			var animationRel;
			if (
				(this || _global).renderConfig.preserveAspectRatio.indexOf("meet") !==
					-1 ||
				(this || _global).renderConfig.preserveAspectRatio.indexOf("slice") !==
					-1
			) {
				var par = (this || _global).renderConfig.preserveAspectRatio.split(" ");
				var fillType = par[1] || "meet";
				var pos = par[0] || "xMidYMid";
				var xPos = pos.substr(0, 4);
				var yPos = pos.substr(4);
				elementRel = elementWidth / elementHeight;
				animationRel =
					(this || _global).transformCanvas.w /
					(this || _global).transformCanvas.h;
				if (
					(animationRel > elementRel && fillType === "meet") ||
					(animationRel < elementRel && fillType === "slice")
				) {
					(this || _global).transformCanvas.sx =
						elementWidth /
						((this || _global).transformCanvas.w /
							(this || _global).renderConfig.dpr);
					(this || _global).transformCanvas.sy =
						elementWidth /
						((this || _global).transformCanvas.w /
							(this || _global).renderConfig.dpr);
				} else {
					(this || _global).transformCanvas.sx =
						elementHeight /
						((this || _global).transformCanvas.h /
							(this || _global).renderConfig.dpr);
					(this || _global).transformCanvas.sy =
						elementHeight /
						((this || _global).transformCanvas.h /
							(this || _global).renderConfig.dpr);
				}
				if (
					xPos === "xMid" &&
					((animationRel < elementRel && fillType === "meet") ||
						(animationRel > elementRel && fillType === "slice"))
				) {
					(this || _global).transformCanvas.tx =
						((elementWidth -
							(this || _global).transformCanvas.w *
								(elementHeight / (this || _global).transformCanvas.h)) /
							2) *
						(this || _global).renderConfig.dpr;
				} else if (
					xPos === "xMax" &&
					((animationRel < elementRel && fillType === "meet") ||
						(animationRel > elementRel && fillType === "slice"))
				) {
					(this || _global).transformCanvas.tx =
						(elementWidth -
							(this || _global).transformCanvas.w *
								(elementHeight / (this || _global).transformCanvas.h)) *
						(this || _global).renderConfig.dpr;
				} else {
					(this || _global).transformCanvas.tx = 0;
				}
				if (
					yPos === "YMid" &&
					((animationRel > elementRel && fillType === "meet") ||
						(animationRel < elementRel && fillType === "slice"))
				) {
					(this || _global).transformCanvas.ty =
						((elementHeight -
							(this || _global).transformCanvas.h *
								(elementWidth / (this || _global).transformCanvas.w)) /
							2) *
						(this || _global).renderConfig.dpr;
				} else if (
					yPos === "YMax" &&
					((animationRel > elementRel && fillType === "meet") ||
						(animationRel < elementRel && fillType === "slice"))
				) {
					(this || _global).transformCanvas.ty =
						(elementHeight -
							(this || _global).transformCanvas.h *
								(elementWidth / (this || _global).transformCanvas.w)) *
						(this || _global).renderConfig.dpr;
				} else {
					(this || _global).transformCanvas.ty = 0;
				}
			} else if (
				(this || _global).renderConfig.preserveAspectRatio === "none"
			) {
				(this || _global).transformCanvas.sx =
					elementWidth /
					((this || _global).transformCanvas.w /
						(this || _global).renderConfig.dpr);
				(this || _global).transformCanvas.sy =
					elementHeight /
					((this || _global).transformCanvas.h /
						(this || _global).renderConfig.dpr);
				(this || _global).transformCanvas.tx = 0;
				(this || _global).transformCanvas.ty = 0;
			} else {
				(this || _global).transformCanvas.sx = (
					this || _global
				).renderConfig.dpr;
				(this || _global).transformCanvas.sy = (
					this || _global
				).renderConfig.dpr;
				(this || _global).transformCanvas.tx = 0;
				(this || _global).transformCanvas.ty = 0;
			}
			(this || _global).transformCanvas.props = [
				(this || _global).transformCanvas.sx,
				0,
				0,
				0,
				0,
				(this || _global).transformCanvas.sy,
				0,
				0,
				0,
				0,
				1,
				0,
				(this || _global).transformCanvas.tx,
				(this || _global).transformCanvas.ty,
				0,
				1,
			];
			this.ctxTransform((this || _global).transformCanvas.props);
			(this || _global).canvasContext.beginPath();
			(this || _global).canvasContext.rect(
				0,
				0,
				(this || _global).transformCanvas.w,
				(this || _global).transformCanvas.h,
			);
			(this || _global).canvasContext.closePath();
			(this || _global).canvasContext.clip();
			this.renderFrame((this || _global).renderedFrame, true);
		};
		CanvasRenderer.prototype.destroy = function () {
			if (
				(this || _global).renderConfig.clearCanvas &&
				(this || _global).animationItem.wrapper
			) {
				(this || _global).animationItem.wrapper.innerText = "";
			}
			var i;
			var len = (this || _global).layers ? (this || _global).layers.length : 0;
			for (i = len - 1; i >= 0; i -= 1) {
				if ((this || _global).elements[i]) {
					(this || _global).elements[i].destroy();
				}
			}
			(this || _global).elements.length = 0;
			(this || _global).globalData.canvasContext = null;
			(this || _global).animationItem.container = null;
			(this || _global).destroyed = true;
		};
		CanvasRenderer.prototype.renderFrame = function (num, forceRender) {
			if (
				((this || _global).renderedFrame === num &&
					(this || _global).renderConfig.clearCanvas === true &&
					!forceRender) ||
				(this || _global).destroyed ||
				num === -1
			) {
				return;
			}
			(this || _global).renderedFrame = num;
			(this || _global).globalData.frameNum =
				num - (this || _global).animationItem._isFirstFrame;
			(this || _global).globalData.frameId += 1;
			(this || _global).globalData._mdf =
				!(this || _global).renderConfig.clearCanvas || forceRender;
			(this || _global).globalData.projectInterface.currentFrame = num;
			var i;
			var len = (this || _global).layers.length;
			if (!(this || _global).completeLayers) {
				this.checkLayers(num);
			}
			for (i = 0; i < len; i += 1) {
				if ((this || _global).completeLayers || (this || _global).elements[i]) {
					(this || _global).elements[i].prepareFrame(
						num - (this || _global).layers[i].st,
					);
				}
			}
			if ((this || _global).globalData._mdf) {
				if ((this || _global).renderConfig.clearCanvas === true) {
					(this || _global).canvasContext.clearRect(
						0,
						0,
						(this || _global).transformCanvas.w,
						(this || _global).transformCanvas.h,
					);
				} else {
					this.save();
				}
				for (i = len - 1; i >= 0; i -= 1) {
					if (
						(this || _global).completeLayers ||
						(this || _global).elements[i]
					) {
						(this || _global).elements[i].renderFrame();
					}
				}
				if ((this || _global).renderConfig.clearCanvas !== true) {
					this.restore();
				}
			}
		};
		CanvasRenderer.prototype.buildItem = function (pos) {
			var elements = (this || _global).elements;
			if (elements[pos] || (this || _global).layers[pos].ty === 99) {
				return;
			}
			var element = this.createItem(
				(this || _global).layers[pos],
				this || _global,
				(this || _global).globalData,
			);
			elements[pos] = element;
			element.initExpressions();
		};
		CanvasRenderer.prototype.checkPendingElements = function () {
			while ((this || _global).pendingElements.length) {
				var element = (this || _global).pendingElements.pop();
				element.checkParenting();
			}
		};
		CanvasRenderer.prototype.hide = function () {
			(this || _global).animationItem.container.style.display = "none";
		};
		CanvasRenderer.prototype.show = function () {
			(this || _global).animationItem.container.style.display = "block";
		};
		function HybridRenderer(animationItem, config) {
			(this || _global).animationItem = animationItem;
			(this || _global).layers = null;
			(this || _global).renderedFrame = -1;
			(this || _global).renderConfig = {
				className: (config && config.className) || "",
				imagePreserveAspectRatio:
					(config && config.imagePreserveAspectRatio) || "xMidYMid slice",
				hideOnTransparent: !(config && config.hideOnTransparent === false),
				filterSize: {
					width:
						(config && config.filterSize && config.filterSize.width) || "400%",
					height:
						(config && config.filterSize && config.filterSize.height) || "400%",
					x: (config && config.filterSize && config.filterSize.x) || "-100%",
					y: (config && config.filterSize && config.filterSize.y) || "-100%",
				},
			};
			(this || _global).globalData = {
				_mdf: false,
				frameNum: -1,
				renderConfig: (this || _global).renderConfig,
			};
			(this || _global).pendingElements = [];
			(this || _global).elements = [];
			(this || _global).threeDElements = [];
			(this || _global).destroyed = false;
			(this || _global).camera = null;
			(this || _global).supports3d = true;
			(this || _global).rendererType = "html";
		}
		extendPrototype([BaseRenderer], HybridRenderer);
		HybridRenderer.prototype.buildItem = SVGRenderer.prototype.buildItem;
		HybridRenderer.prototype.checkPendingElements = function () {
			while ((this || _global).pendingElements.length) {
				var element = (this || _global).pendingElements.pop();
				element.checkParenting();
			}
		};
		HybridRenderer.prototype.appendElementInPos = function (element, pos) {
			var newDOMElement = element.getBaseElement();
			if (!newDOMElement) {
				return;
			}
			var layer = (this || _global).layers[pos];
			if (!layer.ddd || !(this || _global).supports3d) {
				if ((this || _global).threeDElements) {
					this.addTo3dContainer(newDOMElement, pos);
				} else {
					var i = 0;
					var nextDOMElement;
					var nextLayer;
					var tmpDOMElement;
					while (i < pos) {
						if (
							(this || _global).elements[i] &&
							(this || _global).elements[i] !== true &&
							(this || _global).elements[i].getBaseElement
						) {
							nextLayer = (this || _global).elements[i];
							tmpDOMElement = (this || _global).layers[i].ddd
								? this.getThreeDContainerByPos(i)
								: nextLayer.getBaseElement();
							nextDOMElement = tmpDOMElement || nextDOMElement;
						}
						i += 1;
					}
					if (nextDOMElement) {
						if (!layer.ddd || !(this || _global).supports3d) {
							(this || _global).layerElement.insertBefore(
								newDOMElement,
								nextDOMElement,
							);
						}
					} else if (!layer.ddd || !(this || _global).supports3d) {
						(this || _global).layerElement.appendChild(newDOMElement);
					}
				}
			} else {
				this.addTo3dContainer(newDOMElement, pos);
			}
		};
		HybridRenderer.prototype.createShape = function (data2) {
			if (!(this || _global).supports3d) {
				return new SVGShapeElement(
					data2,
					(this || _global).globalData,
					this || _global,
				);
			}
			return new HShapeElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		HybridRenderer.prototype.createText = function (data2) {
			if (!(this || _global).supports3d) {
				return new SVGTextLottieElement(
					data2,
					(this || _global).globalData,
					this || _global,
				);
			}
			return new HTextElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		HybridRenderer.prototype.createCamera = function (data2) {
			(this || _global).camera = new HCameraElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
			return (this || _global).camera;
		};
		HybridRenderer.prototype.createImage = function (data2) {
			if (!(this || _global).supports3d) {
				return new IImageElement(
					data2,
					(this || _global).globalData,
					this || _global,
				);
			}
			return new HImageElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		HybridRenderer.prototype.createComp = function (data2) {
			if (!(this || _global).supports3d) {
				return new SVGCompElement(
					data2,
					(this || _global).globalData,
					this || _global,
				);
			}
			return new HCompElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		HybridRenderer.prototype.createSolid = function (data2) {
			if (!(this || _global).supports3d) {
				return new ISolidElement(
					data2,
					(this || _global).globalData,
					this || _global,
				);
			}
			return new HSolidElement(
				data2,
				(this || _global).globalData,
				this || _global,
			);
		};
		HybridRenderer.prototype.createNull = SVGRenderer.prototype.createNull;
		HybridRenderer.prototype.getThreeDContainerByPos = function (pos) {
			var i = 0;
			var len = (this || _global).threeDElements.length;
			while (i < len) {
				if (
					(this || _global).threeDElements[i].startPos <= pos &&
					(this || _global).threeDElements[i].endPos >= pos
				) {
					return (this || _global).threeDElements[i].perspectiveElem;
				}
				i += 1;
			}
			return null;
		};
		HybridRenderer.prototype.createThreeDContainer = function (pos, type) {
			var perspectiveElem = createTag("div");
			var style;
			var containerStyle;
			styleDiv(perspectiveElem);
			var container = createTag("div");
			styleDiv(container);
			if (type === "3d") {
				style = perspectiveElem.style;
				style.width = (this || _global).globalData.compSize.w + "px";
				style.height = (this || _global).globalData.compSize.h + "px";
				var center = "50% 50%";
				style.webkitTransformOrigin = center;
				style.mozTransformOrigin = center;
				style.transformOrigin = center;
				containerStyle = container.style;
				var matrix = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
				containerStyle.transform = matrix;
				containerStyle.webkitTransform = matrix;
			}
			perspectiveElem.appendChild(container);
			var threeDContainerData = {
				container,
				perspectiveElem,
				startPos: pos,
				endPos: pos,
				type,
			};
			(this || _global).threeDElements.push(threeDContainerData);
			return threeDContainerData;
		};
		HybridRenderer.prototype.build3dContainers = function () {
			var i;
			var len = (this || _global).layers.length;
			var lastThreeDContainerData;
			var currentContainer = "";
			for (i = 0; i < len; i += 1) {
				if (
					(this || _global).layers[i].ddd &&
					(this || _global).layers[i].ty !== 3
				) {
					if (currentContainer !== "3d") {
						currentContainer = "3d";
						lastThreeDContainerData = this.createThreeDContainer(i, "3d");
					}
					lastThreeDContainerData.endPos = Math.max(
						lastThreeDContainerData.endPos,
						i,
					);
				} else {
					if (currentContainer !== "2d") {
						currentContainer = "2d";
						lastThreeDContainerData = this.createThreeDContainer(i, "2d");
					}
					lastThreeDContainerData.endPos = Math.max(
						lastThreeDContainerData.endPos,
						i,
					);
				}
			}
			len = (this || _global).threeDElements.length;
			for (i = len - 1; i >= 0; i -= 1) {
				(this || _global).resizerElem.appendChild(
					(this || _global).threeDElements[i].perspectiveElem,
				);
			}
		};
		HybridRenderer.prototype.addTo3dContainer = function (elem2, pos) {
			var i = 0;
			var len = (this || _global).threeDElements.length;
			while (i < len) {
				if (pos <= (this || _global).threeDElements[i].endPos) {
					var j = (this || _global).threeDElements[i].startPos;
					var nextElement;
					while (j < pos) {
						if (
							(this || _global).elements[j] &&
							(this || _global).elements[j].getBaseElement
						) {
							nextElement = (this || _global).elements[j].getBaseElement();
						}
						j += 1;
					}
					if (nextElement) {
						(this || _global).threeDElements[i].container.insertBefore(
							elem2,
							nextElement,
						);
					} else {
						(this || _global).threeDElements[i].container.appendChild(elem2);
					}
					break;
				}
				i += 1;
			}
		};
		HybridRenderer.prototype.configAnimation = function (animData) {
			var resizerElem = createTag("div");
			var wrapper = (this || _global).animationItem.wrapper;
			var style = resizerElem.style;
			style.width = animData.w + "px";
			style.height = animData.h + "px";
			(this || _global).resizerElem = resizerElem;
			styleDiv(resizerElem);
			style.transformStyle = "flat";
			style.mozTransformStyle = "flat";
			style.webkitTransformStyle = "flat";
			if ((this || _global).renderConfig.className) {
				resizerElem.setAttribute(
					"class",
					(this || _global).renderConfig.className,
				);
			}
			wrapper.appendChild(resizerElem);
			style.overflow = "hidden";
			var svg = createNS("svg");
			svg.setAttribute("width", "1");
			svg.setAttribute("height", "1");
			styleDiv(svg);
			(this || _global).resizerElem.appendChild(svg);
			var defs = createNS("defs");
			svg.appendChild(defs);
			(this || _global).data = animData;
			this.setupGlobalData(animData, svg);
			(this || _global).globalData.defs = defs;
			(this || _global).layers = animData.layers;
			(this || _global).layerElement = (this || _global).resizerElem;
			this.build3dContainers();
			this.updateContainerSize();
		};
		HybridRenderer.prototype.destroy = function () {
			if ((this || _global).animationItem.wrapper) {
				(this || _global).animationItem.wrapper.innerText = "";
			}
			(this || _global).animationItem.container = null;
			(this || _global).globalData.defs = null;
			var i;
			var len = (this || _global).layers ? (this || _global).layers.length : 0;
			for (i = 0; i < len; i += 1) {
				(this || _global).elements[i].destroy();
			}
			(this || _global).elements.length = 0;
			(this || _global).destroyed = true;
			(this || _global).animationItem = null;
		};
		HybridRenderer.prototype.updateContainerSize = function () {
			var elementWidth = (this || _global).animationItem.wrapper.offsetWidth;
			var elementHeight = (this || _global).animationItem.wrapper.offsetHeight;
			var elementRel = elementWidth / elementHeight;
			var animationRel =
				(this || _global).globalData.compSize.w /
				(this || _global).globalData.compSize.h;
			var sx;
			var sy;
			var tx;
			var ty;
			if (animationRel > elementRel) {
				sx = elementWidth / (this || _global).globalData.compSize.w;
				sy = elementWidth / (this || _global).globalData.compSize.w;
				tx = 0;
				ty =
					(elementHeight -
						(this || _global).globalData.compSize.h *
							(elementWidth / (this || _global).globalData.compSize.w)) /
					2;
			} else {
				sx = elementHeight / (this || _global).globalData.compSize.h;
				sy = elementHeight / (this || _global).globalData.compSize.h;
				tx =
					(elementWidth -
						(this || _global).globalData.compSize.w *
							(elementHeight / (this || _global).globalData.compSize.h)) /
					2;
				ty = 0;
			}
			var style = (this || _global).resizerElem.style;
			style.webkitTransform =
				"matrix3d(" +
				sx +
				",0,0,0,0," +
				sy +
				",0,0,0,0,1,0," +
				tx +
				"," +
				ty +
				",0,1)";
			style.transform = style.webkitTransform;
		};
		HybridRenderer.prototype.renderFrame = SVGRenderer.prototype.renderFrame;
		HybridRenderer.prototype.hide = function () {
			(this || _global).resizerElem.style.display = "none";
		};
		HybridRenderer.prototype.show = function () {
			(this || _global).resizerElem.style.display = "block";
		};
		HybridRenderer.prototype.initItems = function () {
			this.buildAllItems();
			if ((this || _global).camera) {
				(this || _global).camera.setup();
			} else {
				var cWidth = (this || _global).globalData.compSize.w;
				var cHeight = (this || _global).globalData.compSize.h;
				var i;
				var len = (this || _global).threeDElements.length;
				for (i = 0; i < len; i += 1) {
					var style = (this || _global).threeDElements[i].perspectiveElem.style;
					style.webkitPerspective =
						Math.sqrt(Math.pow(cWidth, 2) + Math.pow(cHeight, 2)) + "px";
					style.perspective = style.webkitPerspective;
				}
			}
		};
		HybridRenderer.prototype.searchExtraCompositions = function (assets) {
			var i;
			var len = assets.length;
			var floatingContainer = createTag("div");
			for (i = 0; i < len; i += 1) {
				if (assets[i].xt) {
					var comp2 = this.createComp(
						assets[i],
						floatingContainer,
						(this || _global).globalData.comp,
						null,
					);
					comp2.initExpressions();
					(this || _global).globalData.projectInterface.registerComposition(
						comp2,
					);
				}
			}
		};
		function MaskElement(data2, element, globalData2) {
			(this || _global).data = data2;
			(this || _global).element = element;
			(this || _global).globalData = globalData2;
			(this || _global).storedData = [];
			(this || _global).masksProperties =
				(this || _global).data.masksProperties || [];
			(this || _global).maskElement = null;
			var defs = (this || _global).globalData.defs;
			var i;
			var len = (this || _global).masksProperties
				? (this || _global).masksProperties.length
				: 0;
			(this || _global).viewData = createSizedArray(len);
			(this || _global).solidPath = "";
			var path;
			var properties = (this || _global).masksProperties;
			var count = 0;
			var currentMasks = [];
			var j;
			var jLen;
			var layerId = createElementID();
			var rect;
			var expansor;
			var feMorph;
			var x;
			var maskType = "clipPath";
			var maskRef = "clip-path";
			for (i = 0; i < len; i += 1) {
				if (
					(properties[i].mode !== "a" && properties[i].mode !== "n") ||
					properties[i].inv ||
					properties[i].o.k !== 100 ||
					properties[i].o.x
				) {
					maskType = "mask";
					maskRef = "mask";
				}
				if (
					(properties[i].mode === "s" || properties[i].mode === "i") &&
					count === 0
				) {
					rect = createNS("rect");
					rect.setAttribute("fill", "#ffffff");
					rect.setAttribute(
						"width",
						(this || _global).element.comp.data.w || 0,
					);
					rect.setAttribute(
						"height",
						(this || _global).element.comp.data.h || 0,
					);
					currentMasks.push(rect);
				} else {
					rect = null;
				}
				path = createNS("path");
				if (properties[i].mode === "n") {
					(this || _global).viewData[i] = {
						op: PropertyFactory.getProp(
							(this || _global).element,
							properties[i].o,
							0,
							0.01,
							(this || _global).element,
						),
						prop: ShapePropertyFactory.getShapeProp(
							(this || _global).element,
							properties[i],
							3,
						),
						elem: path,
						lastPath: "",
					};
					defs.appendChild(path);
				} else {
					count += 1;
					path.setAttribute(
						"fill",
						properties[i].mode === "s" ? "#000000" : "#ffffff",
					);
					path.setAttribute("clip-rule", "nonzero");
					var filterID;
					if (properties[i].x.k !== 0) {
						maskType = "mask";
						maskRef = "mask";
						x = PropertyFactory.getProp(
							(this || _global).element,
							properties[i].x,
							0,
							null,
							(this || _global).element,
						);
						filterID = createElementID();
						expansor = createNS("filter");
						expansor.setAttribute("id", filterID);
						feMorph = createNS("feMorphology");
						feMorph.setAttribute("operator", "erode");
						feMorph.setAttribute("in", "SourceGraphic");
						feMorph.setAttribute("radius", "0");
						expansor.appendChild(feMorph);
						defs.appendChild(expansor);
						path.setAttribute(
							"stroke",
							properties[i].mode === "s" ? "#000000" : "#ffffff",
						);
					} else {
						feMorph = null;
						x = null;
					}
					(this || _global).storedData[i] = {
						elem: path,
						x,
						expan: feMorph,
						lastPath: "",
						lastOperator: "",
						filterId: filterID,
						lastRadius: 0,
					};
					if (properties[i].mode === "i") {
						jLen = currentMasks.length;
						var g = createNS("g");
						for (j = 0; j < jLen; j += 1) {
							g.appendChild(currentMasks[j]);
						}
						var mask22 = createNS("mask");
						mask22.setAttribute("mask-type", "alpha");
						mask22.setAttribute("id", layerId + "_" + count);
						mask22.appendChild(path);
						defs.appendChild(mask22);
						g.setAttribute(
							"mask",
							"url(" + locationHref + "#" + layerId + "_" + count + ")",
						);
						currentMasks.length = 0;
						currentMasks.push(g);
					} else {
						currentMasks.push(path);
					}
					if (properties[i].inv && !(this || _global).solidPath) {
						(this || _global).solidPath = this.createLayerSolidPath();
					}
					(this || _global).viewData[i] = {
						elem: path,
						lastPath: "",
						op: PropertyFactory.getProp(
							(this || _global).element,
							properties[i].o,
							0,
							0.01,
							(this || _global).element,
						),
						prop: ShapePropertyFactory.getShapeProp(
							(this || _global).element,
							properties[i],
							3,
						),
						invRect: rect,
					};
					if (!(this || _global).viewData[i].prop.k) {
						this.drawPath(
							properties[i],
							(this || _global).viewData[i].prop.v,
							(this || _global).viewData[i],
						);
					}
				}
			}
			(this || _global).maskElement = createNS(maskType);
			len = currentMasks.length;
			for (i = 0; i < len; i += 1) {
				(this || _global).maskElement.appendChild(currentMasks[i]);
			}
			if (count > 0) {
				(this || _global).maskElement.setAttribute("id", layerId);
				(this || _global).element.maskedElement.setAttribute(
					maskRef,
					"url(" + locationHref + "#" + layerId + ")",
				);
				defs.appendChild((this || _global).maskElement);
			}
			if ((this || _global).viewData.length) {
				(this || _global).element.addRenderableComponent(this || _global);
			}
		}
		MaskElement.prototype.getMaskProperty = function (pos) {
			return (this || _global).viewData[pos].prop;
		};
		MaskElement.prototype.renderFrame = function (isFirstFrame) {
			var finalMat = (this || _global).element.finalTransform.mat;
			var i;
			var len = (this || _global).masksProperties.length;
			for (i = 0; i < len; i += 1) {
				if ((this || _global).viewData[i].prop._mdf || isFirstFrame) {
					this.drawPath(
						(this || _global).masksProperties[i],
						(this || _global).viewData[i].prop.v,
						(this || _global).viewData[i],
					);
				}
				if ((this || _global).viewData[i].op._mdf || isFirstFrame) {
					(this || _global).viewData[i].elem.setAttribute(
						"fill-opacity",
						(this || _global).viewData[i].op.v,
					);
				}
				if ((this || _global).masksProperties[i].mode !== "n") {
					if (
						(this || _global).viewData[i].invRect &&
						((this || _global).element.finalTransform.mProp._mdf ||
							isFirstFrame)
					) {
						(this || _global).viewData[i].invRect.setAttribute(
							"transform",
							finalMat.getInverseMatrix().to2dCSS(),
						);
					}
					if (
						(this || _global).storedData[i].x &&
						((this || _global).storedData[i].x._mdf || isFirstFrame)
					) {
						var feMorph = (this || _global).storedData[i].expan;
						if ((this || _global).storedData[i].x.v < 0) {
							if ((this || _global).storedData[i].lastOperator !== "erode") {
								(this || _global).storedData[i].lastOperator = "erode";
								(this || _global).storedData[i].elem.setAttribute(
									"filter",
									"url(" +
										locationHref +
										"#" +
										(this || _global).storedData[i].filterId +
										")",
								);
							}
							feMorph.setAttribute(
								"radius",
								-(this || _global).storedData[i].x.v,
							);
						} else {
							if ((this || _global).storedData[i].lastOperator !== "dilate") {
								(this || _global).storedData[i].lastOperator = "dilate";
								(this || _global).storedData[i].elem.setAttribute(
									"filter",
									null,
								);
							}
							(this || _global).storedData[i].elem.setAttribute(
								"stroke-width",
								(this || _global).storedData[i].x.v * 2,
							);
						}
					}
				}
			}
		};
		MaskElement.prototype.getMaskelement = function () {
			return (this || _global).maskElement;
		};
		MaskElement.prototype.createLayerSolidPath = function () {
			var path = "M0,0 ";
			path += " h" + (this || _global).globalData.compSize.w;
			path += " v" + (this || _global).globalData.compSize.h;
			path += " h-" + (this || _global).globalData.compSize.w;
			path += " v-" + (this || _global).globalData.compSize.h + " ";
			return path;
		};
		MaskElement.prototype.drawPath = function (pathData, pathNodes, viewData) {
			var pathString = " M" + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
			var i;
			var len;
			len = pathNodes._length;
			for (i = 1; i < len; i += 1) {
				pathString +=
					" C" +
					pathNodes.o[i - 1][0] +
					"," +
					pathNodes.o[i - 1][1] +
					" " +
					pathNodes.i[i][0] +
					"," +
					pathNodes.i[i][1] +
					" " +
					pathNodes.v[i][0] +
					"," +
					pathNodes.v[i][1];
			}
			if (pathNodes.c && len > 1) {
				pathString +=
					" C" +
					pathNodes.o[i - 1][0] +
					"," +
					pathNodes.o[i - 1][1] +
					" " +
					pathNodes.i[0][0] +
					"," +
					pathNodes.i[0][1] +
					" " +
					pathNodes.v[0][0] +
					"," +
					pathNodes.v[0][1];
			}
			if (viewData.lastPath !== pathString) {
				var pathShapeValue = "";
				if (viewData.elem) {
					if (pathNodes.c) {
						pathShapeValue = pathData.inv
							? (this || _global).solidPath + pathString
							: pathString;
					}
					viewData.elem.setAttribute("d", pathShapeValue);
				}
				viewData.lastPath = pathString;
			}
		};
		MaskElement.prototype.destroy = function () {
			(this || _global).element = null;
			(this || _global).globalData = null;
			(this || _global).maskElement = null;
			(this || _global).data = null;
			(this || _global).masksProperties = null;
		};
		function HierarchyElement() {}
		HierarchyElement.prototype = {
			/**
			 * @function
			 * Initializes hierarchy properties
			 *
			 */
			initHierarchy: function () {
				(this || _global).hierarchy = [];
				(this || _global)._isParent = false;
				this.checkParenting();
			},
			/**
			 * @function
			 * Sets layer's hierarchy.
			 * @param {array} hierarch
			 * layer's parent list
			 *
			 */
			setHierarchy: function (hierarchy) {
				(this || _global).hierarchy = hierarchy;
			},
			/**
			 * @function
			 * Sets layer as parent.
			 *
			 */
			setAsParent: function () {
				(this || _global)._isParent = true;
			},
			/**
			 * @function
			 * Searches layer's parenting chain
			 *
			 */
			checkParenting: function () {
				if ((this || _global).data.parent !== void 0) {
					(this || _global).comp.buildElementParenting(
						this || _global,
						(this || _global).data.parent,
						[],
					);
				}
			},
		};
		function FrameElement() {}
		FrameElement.prototype = {
			/**
			 * @function
			 * Initializes frame related properties.
			 *
			 */
			initFrame: function () {
				(this || _global)._isFirstFrame = false;
				(this || _global).dynamicProperties = [];
				(this || _global)._mdf = false;
			},
			/**
			 * @function
			 * Calculates all dynamic values
			 *
			 * @param {number} num
			 * current frame number in Layer's time
			 * @param {boolean} isVisible
			 * if layers is currently in range
			 *
			 */
			prepareProperties: function (num, isVisible) {
				var i;
				var len = (this || _global).dynamicProperties.length;
				for (i = 0; i < len; i += 1) {
					if (
						isVisible ||
						((this || _global)._isParent &&
							(this || _global).dynamicProperties[i].propType === "transform")
					) {
						(this || _global).dynamicProperties[i].getValue();
						if ((this || _global).dynamicProperties[i]._mdf) {
							(this || _global).globalData._mdf = true;
							(this || _global)._mdf = true;
						}
					}
				}
			},
			addDynamicProperty: function (prop) {
				if ((this || _global).dynamicProperties.indexOf(prop) === -1) {
					(this || _global).dynamicProperties.push(prop);
				}
			},
		};
		function TransformElement() {}
		TransformElement.prototype = {
			initTransform: function () {
				(this || _global).finalTransform = {
					mProp: (this || _global).data.ks
						? TransformPropertyFactory.getTransformProperty(
								this || _global,
								(this || _global).data.ks,
								this || _global,
							)
						: {
								o: 0,
							},
					_matMdf: false,
					_opMdf: false,
					mat: new Matrix(),
				};
				if ((this || _global).data.ao) {
					(this || _global).finalTransform.mProp.autoOriented = true;
				}
				if ((this || _global).data.ty !== 11) {
				}
			},
			renderTransform: function () {
				(this || _global).finalTransform._opMdf =
					(this || _global).finalTransform.mProp.o._mdf ||
					(this || _global)._isFirstFrame;
				(this || _global).finalTransform._matMdf =
					(this || _global).finalTransform.mProp._mdf ||
					(this || _global)._isFirstFrame;
				if ((this || _global).hierarchy) {
					var mat;
					var finalMat = (this || _global).finalTransform.mat;
					var i = 0;
					var len = (this || _global).hierarchy.length;
					if (!(this || _global).finalTransform._matMdf) {
						while (i < len) {
							if ((this || _global).hierarchy[i].finalTransform.mProp._mdf) {
								(this || _global).finalTransform._matMdf = true;
								break;
							}
							i += 1;
						}
					}
					if ((this || _global).finalTransform._matMdf) {
						mat = (this || _global).finalTransform.mProp.v.props;
						finalMat.cloneFromProps(mat);
						for (i = 0; i < len; i += 1) {
							mat = (this || _global).hierarchy[i].finalTransform.mProp.v.props;
							finalMat.transform(
								mat[0],
								mat[1],
								mat[2],
								mat[3],
								mat[4],
								mat[5],
								mat[6],
								mat[7],
								mat[8],
								mat[9],
								mat[10],
								mat[11],
								mat[12],
								mat[13],
								mat[14],
								mat[15],
							);
						}
					}
				}
			},
			globalToLocal: function (pt) {
				var transforms = [];
				transforms.push((this || _global).finalTransform);
				var flag = true;
				var comp2 = (this || _global).comp;
				while (flag) {
					if (comp2.finalTransform) {
						if (comp2.data.hasMask) {
							transforms.splice(0, 0, comp2.finalTransform);
						}
						comp2 = comp2.comp;
					} else {
						flag = false;
					}
				}
				var i;
				var len = transforms.length;
				var ptNew;
				for (i = 0; i < len; i += 1) {
					ptNew = transforms[i].mat.applyToPointArray(0, 0, 0);
					pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
				}
				return pt;
			},
			mHelper: new Matrix(),
		};
		function RenderableElement() {}
		RenderableElement.prototype = {
			initRenderable: function () {
				(this || _global).isInRange = false;
				(this || _global).hidden = false;
				(this || _global).isTransparent = false;
				(this || _global).renderableComponents = [];
			},
			addRenderableComponent: function (component) {
				if ((this || _global).renderableComponents.indexOf(component) === -1) {
					(this || _global).renderableComponents.push(component);
				}
			},
			removeRenderableComponent: function (component) {
				if ((this || _global).renderableComponents.indexOf(component) !== -1) {
					(this || _global).renderableComponents.splice(
						(this || _global).renderableComponents.indexOf(component),
						1,
					);
				}
			},
			prepareRenderableFrame: function (num) {
				this.checkLayerLimits(num);
			},
			checkTransparency: function () {
				if ((this || _global).finalTransform.mProp.o.v <= 0) {
					if (
						!(this || _global).isTransparent &&
						(this || _global).globalData.renderConfig.hideOnTransparent
					) {
						(this || _global).isTransparent = true;
						this.hide();
					}
				} else if ((this || _global).isTransparent) {
					(this || _global).isTransparent = false;
					this.show();
				}
			},
			/**
			 * @function
			 * Initializes frame related properties.
			 *
			 * @param {number} num
			 * current frame number in Layer's time
			 *
			 */
			checkLayerLimits: function (num) {
				if (
					(this || _global).data.ip - (this || _global).data.st <= num &&
					(this || _global).data.op - (this || _global).data.st > num
				) {
					if ((this || _global).isInRange !== true) {
						(this || _global).globalData._mdf = true;
						(this || _global)._mdf = true;
						(this || _global).isInRange = true;
						this.show();
					}
				} else if ((this || _global).isInRange !== false) {
					(this || _global).globalData._mdf = true;
					(this || _global).isInRange = false;
					this.hide();
				}
			},
			renderRenderable: function () {
				var i;
				var len = (this || _global).renderableComponents.length;
				for (i = 0; i < len; i += 1) {
					(this || _global).renderableComponents[i].renderFrame(
						(this || _global)._isFirstFrame,
					);
				}
			},
			sourceRectAtTime: function () {
				return {
					top: 0,
					left: 0,
					width: 100,
					height: 100,
				};
			},
			getLayerSize: function () {
				if ((this || _global).data.ty === 5) {
					return {
						w: (this || _global).data.textData.width,
						h: (this || _global).data.textData.height,
					};
				}
				return {
					w: (this || _global).data.width,
					h: (this || _global).data.height,
				};
			},
		};
		function RenderableDOMElement() {}
		(function () {
			var _prototype = {
				initElement: function (data2, globalData2, comp2) {
					this.initFrame();
					this.initBaseData(data2, globalData2, comp2);
					this.initTransform(data2, globalData2, comp2);
					this.initHierarchy();
					this.initRenderable();
					this.initRendererElement();
					this.createContainerElements();
					this.createRenderableComponents();
					this.createContent();
					this.hide();
				},
				hide: function () {
					if (
						!(this || _global).hidden &&
						(!(this || _global).isInRange || (this || _global).isTransparent)
					) {
						var elem2 =
							(this || _global).baseElement || (this || _global).layerElement;
						elem2.style.display = "none";
						(this || _global).hidden = true;
					}
				},
				show: function () {
					if ((this || _global).isInRange && !(this || _global).isTransparent) {
						if (!(this || _global).data.hd) {
							var elem2 =
								(this || _global).baseElement || (this || _global).layerElement;
							elem2.style.display = "block";
						}
						(this || _global).hidden = false;
						(this || _global)._isFirstFrame = true;
					}
				},
				renderFrame: function () {
					if ((this || _global).data.hd || (this || _global).hidden) {
						return;
					}
					this.renderTransform();
					this.renderRenderable();
					this.renderElement();
					this.renderInnerContent();
					if ((this || _global)._isFirstFrame) {
						(this || _global)._isFirstFrame = false;
					}
				},
				renderInnerContent: function () {},
				prepareFrame: function (num) {
					(this || _global)._mdf = false;
					this.prepareRenderableFrame(num);
					this.prepareProperties(num, (this || _global).isInRange);
					this.checkTransparency();
				},
				destroy: function () {
					(this || _global).innerElem = null;
					this.destroyBaseElement();
				},
			};
			extendPrototype(
				[RenderableElement, createProxyFunction(_prototype)],
				RenderableDOMElement,
			);
		})();
		function ProcessedElement(element, position2) {
			(this || _global).elem = element;
			(this || _global).pos = position2;
		}
		function SVGStyleData(data2, level) {
			(this || _global).data = data2;
			(this || _global).type = data2.ty;
			(this || _global).d = "";
			(this || _global).lvl = level;
			(this || _global)._mdf = false;
			(this || _global).closed = data2.hd === true;
			(this || _global).pElem = createNS("path");
			(this || _global).msElem = null;
		}
		SVGStyleData.prototype.reset = function () {
			(this || _global).d = "";
			(this || _global)._mdf = false;
		};
		function SVGShapeData(transformers, level, shape) {
			(this || _global).caches = [];
			(this || _global).styles = [];
			(this || _global).transformers = transformers;
			(this || _global).lStr = "";
			(this || _global).sh = shape;
			(this || _global).lvl = level;
			(this || _global)._isAnimated = !!shape.k;
			var i = 0;
			var len = transformers.length;
			while (i < len) {
				if (transformers[i].mProps.dynamicProperties.length) {
					(this || _global)._isAnimated = true;
					break;
				}
				i += 1;
			}
		}
		SVGShapeData.prototype.setAsAnimated = function () {
			(this || _global)._isAnimated = true;
		};
		function SVGTransformData(mProps, op, container) {
			(this || _global).transform = {
				mProps,
				op,
				container,
			};
			(this || _global).elements = [];
			(this || _global)._isAnimated =
				(this || _global).transform.mProps.dynamicProperties.length ||
				(this || _global).transform.op.effectsSequence.length;
		}
		function SVGStrokeStyleData(elem2, data2, styleOb) {
			this.initDynamicPropertyContainer(elem2);
			(this || _global).getValue = (this || _global).iterateDynamicProperties;
			(this || _global).o = PropertyFactory.getProp(
				elem2,
				data2.o,
				0,
				0.01,
				this || _global,
			);
			(this || _global).w = PropertyFactory.getProp(
				elem2,
				data2.w,
				0,
				null,
				this || _global,
			);
			(this || _global).d = new DashProperty(
				elem2,
				data2.d || {},
				"svg",
				this || _global,
			);
			(this || _global).c = PropertyFactory.getProp(
				elem2,
				data2.c,
				1,
				255,
				this || _global,
			);
			(this || _global).style = styleOb;
			(this || _global)._isAnimated = !!(this || _global)._isAnimated;
		}
		extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);
		function SVGFillStyleData(elem2, data2, styleOb) {
			this.initDynamicPropertyContainer(elem2);
			(this || _global).getValue = (this || _global).iterateDynamicProperties;
			(this || _global).o = PropertyFactory.getProp(
				elem2,
				data2.o,
				0,
				0.01,
				this || _global,
			);
			(this || _global).c = PropertyFactory.getProp(
				elem2,
				data2.c,
				1,
				255,
				this || _global,
			);
			(this || _global).style = styleOb;
		}
		extendPrototype([DynamicPropertyContainer], SVGFillStyleData);
		function SVGGradientFillStyleData(elem2, data2, styleOb) {
			this.initDynamicPropertyContainer(elem2);
			(this || _global).getValue = (this || _global).iterateDynamicProperties;
			this.initGradientData(elem2, data2, styleOb);
		}
		SVGGradientFillStyleData.prototype.initGradientData = function (
			elem2,
			data2,
			styleOb,
		) {
			(this || _global).o = PropertyFactory.getProp(
				elem2,
				data2.o,
				0,
				0.01,
				this || _global,
			);
			(this || _global).s = PropertyFactory.getProp(
				elem2,
				data2.s,
				1,
				null,
				this || _global,
			);
			(this || _global).e = PropertyFactory.getProp(
				elem2,
				data2.e,
				1,
				null,
				this || _global,
			);
			(this || _global).h = PropertyFactory.getProp(
				elem2,
				data2.h || {
					k: 0,
				},
				0,
				0.01,
				this || _global,
			);
			(this || _global).a = PropertyFactory.getProp(
				elem2,
				data2.a || {
					k: 0,
				},
				0,
				degToRads,
				this || _global,
			);
			(this || _global).g = new GradientProperty(
				elem2,
				data2.g,
				this || _global,
			);
			(this || _global).style = styleOb;
			(this || _global).stops = [];
			this.setGradientData(styleOb.pElem, data2);
			this.setGradientOpacity(data2, styleOb);
			(this || _global)._isAnimated = !!(this || _global)._isAnimated;
		};
		SVGGradientFillStyleData.prototype.setGradientData = function (
			pathElement,
			data2,
		) {
			var gradientId = createElementID();
			var gfill = createNS(data2.t === 1 ? "linearGradient" : "radialGradient");
			gfill.setAttribute("id", gradientId);
			gfill.setAttribute("spreadMethod", "pad");
			gfill.setAttribute("gradientUnits", "userSpaceOnUse");
			var stops = [];
			var stop;
			var j;
			var jLen;
			jLen = data2.g.p * 4;
			for (j = 0; j < jLen; j += 4) {
				stop = createNS("stop");
				gfill.appendChild(stop);
				stops.push(stop);
			}
			pathElement.setAttribute(
				data2.ty === "gf" ? "fill" : "stroke",
				"url(" + locationHref + "#" + gradientId + ")",
			);
			(this || _global).gf = gfill;
			(this || _global).cst = stops;
		};
		SVGGradientFillStyleData.prototype.setGradientOpacity = function (
			data2,
			styleOb,
		) {
			if (
				(this || _global).g._hasOpacity &&
				!(this || _global).g._collapsable
			) {
				var stop;
				var j;
				var jLen;
				var mask22 = createNS("mask");
				var maskElement = createNS("path");
				mask22.appendChild(maskElement);
				var opacityId = createElementID();
				var maskId = createElementID();
				mask22.setAttribute("id", maskId);
				var opFill = createNS(
					data2.t === 1 ? "linearGradient" : "radialGradient",
				);
				opFill.setAttribute("id", opacityId);
				opFill.setAttribute("spreadMethod", "pad");
				opFill.setAttribute("gradientUnits", "userSpaceOnUse");
				jLen = data2.g.k.k[0].s ? data2.g.k.k[0].s.length : data2.g.k.k.length;
				var stops = (this || _global).stops;
				for (j = data2.g.p * 4; j < jLen; j += 2) {
					stop = createNS("stop");
					stop.setAttribute("stop-color", "rgb(255,255,255)");
					opFill.appendChild(stop);
					stops.push(stop);
				}
				maskElement.setAttribute(
					data2.ty === "gf" ? "fill" : "stroke",
					"url(" + locationHref + "#" + opacityId + ")",
				);
				(this || _global).of = opFill;
				(this || _global).ms = mask22;
				(this || _global).ost = stops;
				(this || _global).maskId = maskId;
				styleOb.msElem = maskElement;
			}
		};
		extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);
		function SVGGradientStrokeStyleData(elem2, data2, styleOb) {
			this.initDynamicPropertyContainer(elem2);
			(this || _global).getValue = (this || _global).iterateDynamicProperties;
			(this || _global).w = PropertyFactory.getProp(
				elem2,
				data2.w,
				0,
				null,
				this || _global,
			);
			(this || _global).d = new DashProperty(
				elem2,
				data2.d || {},
				"svg",
				this || _global,
			);
			this.initGradientData(elem2, data2, styleOb);
			(this || _global)._isAnimated = !!(this || _global)._isAnimated;
		}
		extendPrototype(
			[SVGGradientFillStyleData, DynamicPropertyContainer],
			SVGGradientStrokeStyleData,
		);
		function ShapeGroupData() {
			(this || _global).it = [];
			(this || _global).prevViewData = [];
			(this || _global).gr = createNS("g");
		}
		var SVGElementsRenderer = (function () {
			var _identityMatrix = new Matrix();
			var _matrixHelper = new Matrix();
			var ob2 = {
				createRenderFunction,
			};
			function createRenderFunction(data2) {
				switch (data2.ty) {
					case "fl":
						return renderFill;
					case "gf":
						return renderGradient;
					case "gs":
						return renderGradientStroke;
					case "st":
						return renderStroke;
					case "sh":
					case "el":
					case "rc":
					case "sr":
						return renderPath;
					case "tr":
						return renderContentTransform;
					default:
						return null;
				}
			}
			function renderContentTransform(styleData, itemData, isFirstFrame) {
				if (isFirstFrame || itemData.transform.op._mdf) {
					itemData.transform.container.setAttribute(
						"opacity",
						itemData.transform.op.v,
					);
				}
				if (isFirstFrame || itemData.transform.mProps._mdf) {
					itemData.transform.container.setAttribute(
						"transform",
						itemData.transform.mProps.v.to2dCSS(),
					);
				}
			}
			function renderPath(styleData, itemData, isFirstFrame) {
				var j;
				var jLen;
				var pathStringTransformed;
				var redraw;
				var pathNodes;
				var l;
				var lLen = itemData.styles.length;
				var lvl = itemData.lvl;
				var paths;
				var mat;
				var props;
				var iterations;
				var k;
				for (l = 0; l < lLen; l += 1) {
					redraw = itemData.sh._mdf || isFirstFrame;
					if (itemData.styles[l].lvl < lvl) {
						mat = _matrixHelper.reset();
						iterations = lvl - itemData.styles[l].lvl;
						k = itemData.transformers.length - 1;
						while (!redraw && iterations > 0) {
							redraw = itemData.transformers[k].mProps._mdf || redraw;
							iterations -= 1;
							k -= 1;
						}
						if (redraw) {
							iterations = lvl - itemData.styles[l].lvl;
							k = itemData.transformers.length - 1;
							while (iterations > 0) {
								props = itemData.transformers[k].mProps.v.props;
								mat.transform(
									props[0],
									props[1],
									props[2],
									props[3],
									props[4],
									props[5],
									props[6],
									props[7],
									props[8],
									props[9],
									props[10],
									props[11],
									props[12],
									props[13],
									props[14],
									props[15],
								);
								iterations -= 1;
								k -= 1;
							}
						}
					} else {
						mat = _identityMatrix;
					}
					paths = itemData.sh.paths;
					jLen = paths._length;
					if (redraw) {
						pathStringTransformed = "";
						for (j = 0; j < jLen; j += 1) {
							pathNodes = paths.shapes[j];
							if (pathNodes && pathNodes._length) {
								pathStringTransformed += buildShapeString(
									pathNodes,
									pathNodes._length,
									pathNodes.c,
									mat,
								);
							}
						}
						itemData.caches[l] = pathStringTransformed;
					} else {
						pathStringTransformed = itemData.caches[l];
					}
					itemData.styles[l].d +=
						styleData.hd === true ? "" : pathStringTransformed;
					itemData.styles[l]._mdf = redraw || itemData.styles[l]._mdf;
				}
			}
			function renderFill(styleData, itemData, isFirstFrame) {
				var styleElem = itemData.style;
				if (itemData.c._mdf || isFirstFrame) {
					styleElem.pElem.setAttribute(
						"fill",
						"rgb(" +
							bmFloor(itemData.c.v[0]) +
							"," +
							bmFloor(itemData.c.v[1]) +
							"," +
							bmFloor(itemData.c.v[2]) +
							")",
					);
				}
				if (itemData.o._mdf || isFirstFrame) {
					styleElem.pElem.setAttribute("fill-opacity", itemData.o.v);
				}
			}
			function renderGradientStroke(styleData, itemData, isFirstFrame) {
				renderGradient(styleData, itemData, isFirstFrame);
				renderStroke(styleData, itemData, isFirstFrame);
			}
			function renderGradient(styleData, itemData, isFirstFrame) {
				var gfill = itemData.gf;
				var hasOpacity = itemData.g._hasOpacity;
				var pt1 = itemData.s.v;
				var pt2 = itemData.e.v;
				if (itemData.o._mdf || isFirstFrame) {
					var attr = styleData.ty === "gf" ? "fill-opacity" : "stroke-opacity";
					itemData.style.pElem.setAttribute(attr, itemData.o.v);
				}
				if (itemData.s._mdf || isFirstFrame) {
					var attr1 = styleData.t === 1 ? "x1" : "cx";
					var attr2 = attr1 === "x1" ? "y1" : "cy";
					gfill.setAttribute(attr1, pt1[0]);
					gfill.setAttribute(attr2, pt1[1]);
					if (hasOpacity && !itemData.g._collapsable) {
						itemData.of.setAttribute(attr1, pt1[0]);
						itemData.of.setAttribute(attr2, pt1[1]);
					}
				}
				var stops;
				var i;
				var len;
				var stop;
				if (itemData.g._cmdf || isFirstFrame) {
					stops = itemData.cst;
					var cValues = itemData.g.c;
					len = stops.length;
					for (i = 0; i < len; i += 1) {
						stop = stops[i];
						stop.setAttribute("offset", cValues[i * 4] + "%");
						stop.setAttribute(
							"stop-color",
							"rgb(" +
								cValues[i * 4 + 1] +
								"," +
								cValues[i * 4 + 2] +
								"," +
								cValues[i * 4 + 3] +
								")",
						);
					}
				}
				if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
					var oValues = itemData.g.o;
					if (itemData.g._collapsable) {
						stops = itemData.cst;
					} else {
						stops = itemData.ost;
					}
					len = stops.length;
					for (i = 0; i < len; i += 1) {
						stop = stops[i];
						if (!itemData.g._collapsable) {
							stop.setAttribute("offset", oValues[i * 2] + "%");
						}
						stop.setAttribute("stop-opacity", oValues[i * 2 + 1]);
					}
				}
				if (styleData.t === 1) {
					if (itemData.e._mdf || isFirstFrame) {
						gfill.setAttribute("x2", pt2[0]);
						gfill.setAttribute("y2", pt2[1]);
						if (hasOpacity && !itemData.g._collapsable) {
							itemData.of.setAttribute("x2", pt2[0]);
							itemData.of.setAttribute("y2", pt2[1]);
						}
					}
				} else {
					var rad;
					if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
						rad = Math.sqrt(
							Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2),
						);
						gfill.setAttribute("r", rad);
						if (hasOpacity && !itemData.g._collapsable) {
							itemData.of.setAttribute("r", rad);
						}
					}
					if (
						itemData.e._mdf ||
						itemData.h._mdf ||
						itemData.a._mdf ||
						isFirstFrame
					) {
						if (!rad) {
							rad = Math.sqrt(
								Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2),
							);
						}
						var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
						var percent = itemData.h.v;
						if (percent >= 1) {
							percent = 0.99;
						} else if (percent <= -1) {
							percent = -0.99;
						}
						var dist = rad * percent;
						var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
						var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
						gfill.setAttribute("fx", x);
						gfill.setAttribute("fy", y);
						if (hasOpacity && !itemData.g._collapsable) {
							itemData.of.setAttribute("fx", x);
							itemData.of.setAttribute("fy", y);
						}
					}
				}
			}
			function renderStroke(styleData, itemData, isFirstFrame) {
				var styleElem = itemData.style;
				var d = itemData.d;
				if (d && (d._mdf || isFirstFrame) && d.dashStr) {
					styleElem.pElem.setAttribute("stroke-dasharray", d.dashStr);
					styleElem.pElem.setAttribute("stroke-dashoffset", d.dashoffset[0]);
				}
				if (itemData.c && (itemData.c._mdf || isFirstFrame)) {
					styleElem.pElem.setAttribute(
						"stroke",
						"rgb(" +
							bmFloor(itemData.c.v[0]) +
							"," +
							bmFloor(itemData.c.v[1]) +
							"," +
							bmFloor(itemData.c.v[2]) +
							")",
					);
				}
				if (itemData.o._mdf || isFirstFrame) {
					styleElem.pElem.setAttribute("stroke-opacity", itemData.o.v);
				}
				if (itemData.w._mdf || isFirstFrame) {
					styleElem.pElem.setAttribute("stroke-width", itemData.w.v);
					if (styleElem.msElem) {
						styleElem.msElem.setAttribute("stroke-width", itemData.w.v);
					}
				}
			}
			return ob2;
		})();
		function ShapeTransformManager() {
			(this || _global).sequences = {};
			(this || _global).sequenceList = [];
			(this || _global).transform_key_count = 0;
		}
		ShapeTransformManager.prototype = {
			addTransformSequence: function (transforms) {
				var i;
				var len = transforms.length;
				var key2 = "_";
				for (i = 0; i < len; i += 1) {
					key2 += transforms[i].transform.key + "_";
				}
				var sequence = (this || _global).sequences[key2];
				if (!sequence) {
					sequence = {
						transforms: [].concat(transforms),
						finalTransform: new Matrix(),
						_mdf: false,
					};
					(this || _global).sequences[key2] = sequence;
					(this || _global).sequenceList.push(sequence);
				}
				return sequence;
			},
			processSequence: function (sequence, isFirstFrame) {
				var i = 0;
				var len = sequence.transforms.length;
				var _mdf = isFirstFrame;
				while (i < len && !isFirstFrame) {
					if (sequence.transforms[i].transform.mProps._mdf) {
						_mdf = true;
						break;
					}
					i += 1;
				}
				if (_mdf) {
					var props;
					sequence.finalTransform.reset();
					for (i = len - 1; i >= 0; i -= 1) {
						props = sequence.transforms[i].transform.mProps.v.props;
						sequence.finalTransform.transform(
							props[0],
							props[1],
							props[2],
							props[3],
							props[4],
							props[5],
							props[6],
							props[7],
							props[8],
							props[9],
							props[10],
							props[11],
							props[12],
							props[13],
							props[14],
							props[15],
						);
					}
				}
				sequence._mdf = _mdf;
			},
			processSequences: function (isFirstFrame) {
				var i;
				var len = (this || _global).sequenceList.length;
				for (i = 0; i < len; i += 1) {
					this.processSequence((this || _global).sequenceList[i], isFirstFrame);
				}
			},
			getNewKey: function () {
				(this || _global).transform_key_count += 1;
				return "_" + (this || _global).transform_key_count;
			},
		};
		function CVShapeData(element, data2, styles, transformsManager) {
			(this || _global).styledShapes = [];
			(this || _global).tr = [0, 0, 0, 0, 0, 0];
			var ty = 4;
			if (data2.ty === "rc") {
				ty = 5;
			} else if (data2.ty === "el") {
				ty = 6;
			} else if (data2.ty === "sr") {
				ty = 7;
			}
			(this || _global).sh = ShapePropertyFactory.getShapeProp(
				element,
				data2,
				ty,
				element,
			);
			var i;
			var len = styles.length;
			var styledShape;
			for (i = 0; i < len; i += 1) {
				if (!styles[i].closed) {
					styledShape = {
						transforms: transformsManager.addTransformSequence(
							styles[i].transforms,
						),
						trNodes: [],
					};
					(this || _global).styledShapes.push(styledShape);
					styles[i].elements.push(styledShape);
				}
			}
		}
		CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;
		function BaseElement() {}
		BaseElement.prototype = {
			checkMasks: function () {
				if (!(this || _global).data.hasMask) {
					return false;
				}
				var i = 0;
				var len = (this || _global).data.masksProperties.length;
				while (i < len) {
					if (
						(this || _global).data.masksProperties[i].mode !== "n" &&
						(this || _global).data.masksProperties[i].cl !== false
					) {
						return true;
					}
					i += 1;
				}
				return false;
			},
			initExpressions: function () {
				(this || _global).layerInterface = LayerExpressionInterface(
					this || _global,
				);
				if ((this || _global).data.hasMask && (this || _global).maskManager) {
					(this || _global).layerInterface.registerMaskInterface(
						(this || _global).maskManager,
					);
				}
				var effectsInterface =
					EffectsExpressionInterface.createEffectsInterface(
						this || _global,
						(this || _global).layerInterface,
					);
				(this || _global).layerInterface.registerEffectsInterface(
					effectsInterface,
				);
				if ((this || _global).data.ty === 0 || (this || _global).data.xt) {
					(this || _global).compInterface = CompExpressionInterface(
						this || _global,
					);
				} else if ((this || _global).data.ty === 4) {
					(this || _global).layerInterface.shapeInterface =
						ShapeExpressionInterface(
							(this || _global).shapesData,
							(this || _global).itemsData,
							(this || _global).layerInterface,
						);
					(this || _global).layerInterface.content = (
						this || _global
					).layerInterface.shapeInterface;
				} else if ((this || _global).data.ty === 5) {
					(this || _global).layerInterface.textInterface =
						TextExpressionInterface(this || _global);
					(this || _global).layerInterface.text = (
						this || _global
					).layerInterface.textInterface;
				}
			},
			setBlendMode: function () {
				var blendModeValue = getBlendMode((this || _global).data.bm);
				var elem2 =
					(this || _global).baseElement || (this || _global).layerElement;
				elem2.style["mix-blend-mode"] = blendModeValue;
			},
			initBaseData: function (data2, globalData2, comp2) {
				(this || _global).globalData = globalData2;
				(this || _global).comp = comp2;
				(this || _global).data = data2;
				(this || _global).layerId = createElementID();
				if (!(this || _global).data.sr) {
					(this || _global).data.sr = 1;
				}
				(this || _global).effectsManager = new EffectsManager(
					(this || _global).data,
					this || _global,
					(this || _global).dynamicProperties,
				);
			},
			getType: function () {
				return (this || _global).type;
			},
			sourceRectAtTime: function () {},
		};
		function NullElement(data2, globalData2, comp2) {
			this.initFrame();
			this.initBaseData(data2, globalData2, comp2);
			this.initFrame();
			this.initTransform(data2, globalData2, comp2);
			this.initHierarchy();
		}
		NullElement.prototype.prepareFrame = function (num) {
			this.prepareProperties(num, true);
		};
		NullElement.prototype.renderFrame = function () {};
		NullElement.prototype.getBaseElement = function () {
			return null;
		};
		NullElement.prototype.destroy = function () {};
		NullElement.prototype.sourceRectAtTime = function () {};
		NullElement.prototype.hide = function () {};
		extendPrototype(
			[BaseElement, TransformElement, HierarchyElement, FrameElement],
			NullElement,
		);
		function SVGBaseElement() {}
		SVGBaseElement.prototype = {
			initRendererElement: function () {
				(this || _global).layerElement = createNS("g");
			},
			createContainerElements: function () {
				(this || _global).matteElement = createNS("g");
				(this || _global).transformedElement = (this || _global).layerElement;
				(this || _global).maskedElement = (this || _global).layerElement;
				(this || _global)._sizeChanged = false;
				var layerElementParent = null;
				var filId;
				var fil;
				var gg;
				if ((this || _global).data.td) {
					if (
						(this || _global).data.td == 3 ||
						(this || _global).data.td == 1
					) {
						var masker = createNS("mask");
						masker.setAttribute("id", (this || _global).layerId);
						masker.setAttribute(
							"mask-type",
							(this || _global).data.td == 3 ? "luminance" : "alpha",
						);
						masker.appendChild((this || _global).layerElement);
						layerElementParent = masker;
						(this || _global).globalData.defs.appendChild(masker);
						if (!featureSupport.maskType && (this || _global).data.td == 1) {
							masker.setAttribute("mask-type", "luminance");
							filId = createElementID();
							fil = filtersFactory.createFilter(filId);
							(this || _global).globalData.defs.appendChild(fil);
							fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
							gg = createNS("g");
							gg.appendChild((this || _global).layerElement);
							layerElementParent = gg;
							masker.appendChild(gg);
							gg.setAttribute(
								"filter",
								"url(" + locationHref + "#" + filId + ")",
							);
						}
					} else if ((this || _global).data.td == 2) {
						var maskGroup = createNS("mask");
						maskGroup.setAttribute("id", (this || _global).layerId);
						maskGroup.setAttribute("mask-type", "alpha");
						var maskGrouper = createNS("g");
						maskGroup.appendChild(maskGrouper);
						filId = createElementID();
						fil = filtersFactory.createFilter(filId);
						var feCTr = createNS("feComponentTransfer");
						feCTr.setAttribute("in", "SourceGraphic");
						fil.appendChild(feCTr);
						var feFunc = createNS("feFuncA");
						feFunc.setAttribute("type", "table");
						feFunc.setAttribute("tableValues", "1.0 0.0");
						feCTr.appendChild(feFunc);
						(this || _global).globalData.defs.appendChild(fil);
						var alphaRect = createNS("rect");
						alphaRect.setAttribute("width", (this || _global).comp.data.w);
						alphaRect.setAttribute("height", (this || _global).comp.data.h);
						alphaRect.setAttribute("x", "0");
						alphaRect.setAttribute("y", "0");
						alphaRect.setAttribute("fill", "#ffffff");
						alphaRect.setAttribute("opacity", "0");
						maskGrouper.setAttribute(
							"filter",
							"url(" + locationHref + "#" + filId + ")",
						);
						maskGrouper.appendChild(alphaRect);
						maskGrouper.appendChild((this || _global).layerElement);
						layerElementParent = maskGrouper;
						if (!featureSupport.maskType) {
							maskGroup.setAttribute("mask-type", "luminance");
							fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
							gg = createNS("g");
							maskGrouper.appendChild(alphaRect);
							gg.appendChild((this || _global).layerElement);
							layerElementParent = gg;
							maskGrouper.appendChild(gg);
						}
						(this || _global).globalData.defs.appendChild(maskGroup);
					}
				} else if ((this || _global).data.tt) {
					(this || _global).matteElement.appendChild(
						(this || _global).layerElement,
					);
					layerElementParent = (this || _global).matteElement;
					(this || _global).baseElement = (this || _global).matteElement;
				} else {
					(this || _global).baseElement = (this || _global).layerElement;
				}
				if ((this || _global).data.ln) {
					(this || _global).layerElement.setAttribute(
						"id",
						(this || _global).data.ln,
					);
				}
				if ((this || _global).data.cl) {
					(this || _global).layerElement.setAttribute(
						"class",
						(this || _global).data.cl,
					);
				}
				if ((this || _global).data.ty === 0 && !(this || _global).data.hd) {
					var cp = createNS("clipPath");
					var pt = createNS("path");
					pt.setAttribute(
						"d",
						"M0,0 L" +
							(this || _global).data.w +
							",0 L" +
							(this || _global).data.w +
							"," +
							(this || _global).data.h +
							" L0," +
							(this || _global).data.h +
							"z",
					);
					var clipId = createElementID();
					cp.setAttribute("id", clipId);
					cp.appendChild(pt);
					(this || _global).globalData.defs.appendChild(cp);
					if (this.checkMasks()) {
						var cpGroup = createNS("g");
						cpGroup.setAttribute(
							"clip-path",
							"url(" + locationHref + "#" + clipId + ")",
						);
						cpGroup.appendChild((this || _global).layerElement);
						(this || _global).transformedElement = cpGroup;
						if (layerElementParent) {
							layerElementParent.appendChild(
								(this || _global).transformedElement,
							);
						} else {
							(this || _global).baseElement = (
								this || _global
							).transformedElement;
						}
					} else {
						(this || _global).layerElement.setAttribute(
							"clip-path",
							"url(" + locationHref + "#" + clipId + ")",
						);
					}
				}
				if ((this || _global).data.bm !== 0) {
					this.setBlendMode();
				}
			},
			renderElement: function () {
				if ((this || _global).finalTransform._matMdf) {
					(this || _global).transformedElement.setAttribute(
						"transform",
						(this || _global).finalTransform.mat.to2dCSS(),
					);
				}
				if ((this || _global).finalTransform._opMdf) {
					(this || _global).transformedElement.setAttribute(
						"opacity",
						(this || _global).finalTransform.mProp.o.v,
					);
				}
			},
			destroyBaseElement: function () {
				(this || _global).layerElement = null;
				(this || _global).matteElement = null;
				(this || _global).maskManager.destroy();
			},
			getBaseElement: function () {
				if ((this || _global).data.hd) {
					return null;
				}
				return (this || _global).baseElement;
			},
			createRenderableComponents: function () {
				(this || _global).maskManager = new MaskElement(
					(this || _global).data,
					this || _global,
					(this || _global).globalData,
				);
				(this || _global).renderableEffectsManager = new SVGEffects(
					this || _global,
				);
			},
			setMatte: function (id) {
				if (!(this || _global).matteElement) {
					return;
				}
				(this || _global).matteElement.setAttribute(
					"mask",
					"url(" + locationHref + "#" + id + ")",
				);
			},
		};
		function IShapeElement() {}
		IShapeElement.prototype = {
			addShapeToModifiers: function (data2) {
				var i;
				var len = (this || _global).shapeModifiers.length;
				for (i = 0; i < len; i += 1) {
					(this || _global).shapeModifiers[i].addShape(data2);
				}
			},
			isShapeInAnimatedModifiers: function (data2) {
				var i = 0;
				var len = (this || _global).shapeModifiers.length;
				while (i < len) {
					if ((this || _global).shapeModifiers[i].isAnimatedWithShape(data2)) {
						return true;
					}
				}
				return false;
			},
			renderModifiers: function () {
				if (!(this || _global).shapeModifiers.length) {
					return;
				}
				var i;
				var len = (this || _global).shapes.length;
				for (i = 0; i < len; i += 1) {
					(this || _global).shapes[i].sh.reset();
				}
				len = (this || _global).shapeModifiers.length;
				var shouldBreakProcess;
				for (i = len - 1; i >= 0; i -= 1) {
					shouldBreakProcess = (this || _global).shapeModifiers[
						i
					].processShapes((this || _global)._isFirstFrame);
					if (shouldBreakProcess) {
						break;
					}
				}
			},
			lcEnum: {
				1: "butt",
				2: "round",
				3: "square",
			},
			ljEnum: {
				1: "miter",
				2: "round",
				3: "bevel",
			},
			searchProcessedElement: function (elem2) {
				var elements = (this || _global).processedElements;
				var i = 0;
				var len = elements.length;
				while (i < len) {
					if (elements[i].elem === elem2) {
						return elements[i].pos;
					}
					i += 1;
				}
				return 0;
			},
			addProcessedElement: function (elem2, pos) {
				var elements = (this || _global).processedElements;
				var i = elements.length;
				while (i) {
					i -= 1;
					if (elements[i].elem === elem2) {
						elements[i].pos = pos;
						return;
					}
				}
				elements.push(new ProcessedElement(elem2, pos));
			},
			prepareFrame: function (num) {
				this.prepareRenderableFrame(num);
				this.prepareProperties(num, (this || _global).isInRange);
			},
		};
		function ITextElement() {}
		ITextElement.prototype.initElement = function (data2, globalData2, comp2) {
			(this || _global).lettersChangedFlag = true;
			this.initFrame();
			this.initBaseData(data2, globalData2, comp2);
			(this || _global).textProperty = new TextProperty(
				this || _global,
				data2.t,
				(this || _global).dynamicProperties,
			);
			(this || _global).textAnimator = new TextAnimatorProperty(
				data2.t,
				(this || _global).renderType,
				this || _global,
			);
			this.initTransform(data2, globalData2, comp2);
			this.initHierarchy();
			this.initRenderable();
			this.initRendererElement();
			this.createContainerElements();
			this.createRenderableComponents();
			this.createContent();
			this.hide();
			(this || _global).textAnimator.searchProperties(
				(this || _global).dynamicProperties,
			);
		};
		ITextElement.prototype.prepareFrame = function (num) {
			(this || _global)._mdf = false;
			this.prepareRenderableFrame(num);
			this.prepareProperties(num, (this || _global).isInRange);
			if (
				(this || _global).textProperty._mdf ||
				(this || _global).textProperty._isFirstFrame
			) {
				this.buildNewText();
				(this || _global).textProperty._isFirstFrame = false;
				(this || _global).textProperty._mdf = false;
			}
		};
		ITextElement.prototype.createPathShape = function (matrixHelper, shapes) {
			var j;
			var jLen = shapes.length;
			var pathNodes;
			var shapeStr = "";
			for (j = 0; j < jLen; j += 1) {
				pathNodes = shapes[j].ks.k;
				shapeStr += buildShapeString(
					pathNodes,
					pathNodes.i.length,
					true,
					matrixHelper,
				);
			}
			return shapeStr;
		};
		ITextElement.prototype.updateDocumentData = function (newData, index2) {
			(this || _global).textProperty.updateDocumentData(newData, index2);
		};
		ITextElement.prototype.canResizeFont = function (_canResize) {
			(this || _global).textProperty.canResizeFont(_canResize);
		};
		ITextElement.prototype.setMinimumFontSize = function (_fontSize) {
			(this || _global).textProperty.setMinimumFontSize(_fontSize);
		};
		ITextElement.prototype.applyTextPropertiesToMatrix = function (
			documentData,
			matrixHelper,
			lineNumber,
			xPos,
			yPos,
		) {
			if (documentData.ps) {
				matrixHelper.translate(
					documentData.ps[0],
					documentData.ps[1] + documentData.ascent,
					0,
				);
			}
			matrixHelper.translate(0, -documentData.ls, 0);
			switch (documentData.j) {
				case 1:
					matrixHelper.translate(
						documentData.justifyOffset +
							(documentData.boxWidth - documentData.lineWidths[lineNumber]),
						0,
						0,
					);
					break;
				case 2:
					matrixHelper.translate(
						documentData.justifyOffset +
							(documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2,
						0,
						0,
					);
					break;
				default:
					break;
			}
			matrixHelper.translate(xPos, yPos, 0);
		};
		ITextElement.prototype.buildColor = function (colorData) {
			return (
				"rgb(" +
				Math.round(colorData[0] * 255) +
				"," +
				Math.round(colorData[1] * 255) +
				"," +
				Math.round(colorData[2] * 255) +
				")"
			);
		};
		ITextElement.prototype.emptyProp = new LetterProps();
		ITextElement.prototype.destroy = function () {};
		function ICompElement() {}
		extendPrototype(
			[
				BaseElement,
				TransformElement,
				HierarchyElement,
				FrameElement,
				RenderableDOMElement,
			],
			ICompElement,
		);
		ICompElement.prototype.initElement = function (data2, globalData2, comp2) {
			this.initFrame();
			this.initBaseData(data2, globalData2, comp2);
			this.initTransform(data2, globalData2, comp2);
			this.initRenderable();
			this.initHierarchy();
			this.initRendererElement();
			this.createContainerElements();
			this.createRenderableComponents();
			if ((this || _global).data.xt || !globalData2.progressiveLoad) {
				this.buildAllItems();
			}
			this.hide();
		};
		ICompElement.prototype.prepareFrame = function (num) {
			(this || _global)._mdf = false;
			this.prepareRenderableFrame(num);
			this.prepareProperties(num, (this || _global).isInRange);
			if (!(this || _global).isInRange && !(this || _global).data.xt) {
				return;
			}
			if (!(this || _global).tm._placeholder) {
				var timeRemapped = (this || _global).tm.v;
				if (timeRemapped === (this || _global).data.op) {
					timeRemapped = (this || _global).data.op - 1;
				}
				(this || _global).renderedFrame = timeRemapped;
			} else {
				(this || _global).renderedFrame = num / (this || _global).data.sr;
			}
			var i;
			var len = (this || _global).elements.length;
			if (!(this || _global).completeLayers) {
				this.checkLayers((this || _global).renderedFrame);
			}
			for (i = len - 1; i >= 0; i -= 1) {
				if ((this || _global).completeLayers || (this || _global).elements[i]) {
					(this || _global).elements[i].prepareFrame(
						(this || _global).renderedFrame - (this || _global).layers[i].st,
					);
					if ((this || _global).elements[i]._mdf) {
						(this || _global)._mdf = true;
					}
				}
			}
		};
		ICompElement.prototype.renderInnerContent = function () {
			var i;
			var len = (this || _global).layers.length;
			for (i = 0; i < len; i += 1) {
				if ((this || _global).completeLayers || (this || _global).elements[i]) {
					(this || _global).elements[i].renderFrame();
				}
			}
		};
		ICompElement.prototype.setElements = function (elems) {
			(this || _global).elements = elems;
		};
		ICompElement.prototype.getElements = function () {
			return (this || _global).elements;
		};
		ICompElement.prototype.destroyElements = function () {
			var i;
			var len = (this || _global).layers.length;
			for (i = 0; i < len; i += 1) {
				if ((this || _global).elements[i]) {
					(this || _global).elements[i].destroy();
				}
			}
		};
		ICompElement.prototype.destroy = function () {
			this.destroyElements();
			this.destroyBaseElement();
		};
		function IImageElement(data2, globalData2, comp2) {
			(this || _global).assetData = globalData2.getAssetData(data2.refId);
			this.initElement(data2, globalData2, comp2);
			(this || _global).sourceRect = {
				top: 0,
				left: 0,
				width: (this || _global).assetData.w,
				height: (this || _global).assetData.h,
			};
		}
		extendPrototype(
			[
				BaseElement,
				TransformElement,
				SVGBaseElement,
				HierarchyElement,
				FrameElement,
				RenderableDOMElement,
			],
			IImageElement,
		);
		IImageElement.prototype.createContent = function () {
			var assetPath = (this || _global).globalData.getAssetsPath(
				(this || _global).assetData,
			);
			(this || _global).innerElem = createNS("image");
			(this || _global).innerElem.setAttribute(
				"width",
				(this || _global).assetData.w + "px",
			);
			(this || _global).innerElem.setAttribute(
				"height",
				(this || _global).assetData.h + "px",
			);
			(this || _global).innerElem.setAttribute(
				"preserveAspectRatio",
				(this || _global).assetData.pr ||
					(this || _global).globalData.renderConfig.imagePreserveAspectRatio,
			);
			(this || _global).innerElem.setAttributeNS(
				"http://www.w3.org/1999/xlink",
				"href",
				assetPath,
			);
			(this || _global).layerElement.appendChild((this || _global).innerElem);
		};
		IImageElement.prototype.sourceRectAtTime = function () {
			return (this || _global).sourceRect;
		};
		function ISolidElement(data2, globalData2, comp2) {
			this.initElement(data2, globalData2, comp2);
		}
		extendPrototype([IImageElement], ISolidElement);
		ISolidElement.prototype.createContent = function () {
			var rect = createNS("rect");
			rect.setAttribute("width", (this || _global).data.sw);
			rect.setAttribute("height", (this || _global).data.sh);
			rect.setAttribute("fill", (this || _global).data.sc);
			(this || _global).layerElement.appendChild(rect);
		};
		function AudioElement(data2, globalData2, comp2) {
			this.initFrame();
			this.initRenderable();
			(this || _global).assetData = globalData2.getAssetData(data2.refId);
			this.initBaseData(data2, globalData2, comp2);
			(this || _global)._isPlaying = false;
			(this || _global)._canPlay = false;
			var assetPath = (this || _global).globalData.getAssetsPath(
				(this || _global).assetData,
			);
			(this || _global).audio = (
				this || _global
			).globalData.audioController.createAudio(assetPath);
			(this || _global)._currentTime = 0;
			(this || _global).globalData.audioController.addAudio(this || _global);
			(this || _global).tm = data2.tm
				? PropertyFactory.getProp(
						this || _global,
						data2.tm,
						0,
						globalData2.frameRate,
						this || _global,
					)
				: {
						_placeholder: true,
					};
		}
		AudioElement.prototype.prepareFrame = function (num) {
			this.prepareRenderableFrame(num, true);
			this.prepareProperties(num, true);
			if (!(this || _global).tm._placeholder) {
				var timeRemapped = (this || _global).tm.v;
				(this || _global)._currentTime = timeRemapped;
			} else {
				(this || _global)._currentTime = num / (this || _global).data.sr;
			}
		};
		extendPrototype(
			[RenderableElement, BaseElement, FrameElement],
			AudioElement,
		);
		AudioElement.prototype.renderFrame = function () {
			if ((this || _global).isInRange && (this || _global)._canPlay) {
				if (!(this || _global)._isPlaying) {
					(this || _global).audio.play();
					(this || _global).audio.seek(
						(this || _global)._currentTime /
							(this || _global).globalData.frameRate,
					);
					(this || _global)._isPlaying = true;
				} else if (
					!(this || _global).audio.playing() ||
					Math.abs(
						(this || _global)._currentTime /
							(this || _global).globalData.frameRate -
							(this || _global).audio.seek(),
					) > 0.1
				) {
					(this || _global).audio.seek(
						(this || _global)._currentTime /
							(this || _global).globalData.frameRate,
					);
				}
			}
		};
		AudioElement.prototype.show = function () {};
		AudioElement.prototype.hide = function () {
			(this || _global).audio.pause();
			(this || _global)._isPlaying = false;
		};
		AudioElement.prototype.pause = function () {
			(this || _global).audio.pause();
			(this || _global)._isPlaying = false;
			(this || _global)._canPlay = false;
		};
		AudioElement.prototype.resume = function () {
			(this || _global)._canPlay = true;
		};
		AudioElement.prototype.setRate = function (rateValue) {
			(this || _global).audio.rate(rateValue);
		};
		AudioElement.prototype.volume = function (volumeValue) {
			(this || _global).audio.volume(volumeValue);
		};
		AudioElement.prototype.getBaseElement = function () {
			return null;
		};
		AudioElement.prototype.destroy = function () {};
		AudioElement.prototype.sourceRectAtTime = function () {};
		AudioElement.prototype.initExpressions = function () {};
		function FootageElement(data2, globalData2, comp2) {
			this.initFrame();
			this.initRenderable();
			(this || _global).assetData = globalData2.getAssetData(data2.refId);
			(this || _global).footageData = globalData2.imageLoader.getAsset(
				(this || _global).assetData,
			);
			this.initBaseData(data2, globalData2, comp2);
		}
		FootageElement.prototype.prepareFrame = function () {};
		extendPrototype(
			[RenderableElement, BaseElement, FrameElement],
			FootageElement,
		);
		FootageElement.prototype.getBaseElement = function () {
			return null;
		};
		FootageElement.prototype.renderFrame = function () {};
		FootageElement.prototype.destroy = function () {};
		FootageElement.prototype.initExpressions = function () {
			(this || _global).layerInterface = FootageInterface(this || _global);
		};
		FootageElement.prototype.getFootageData = function () {
			return (this || _global).footageData;
		};
		function SVGCompElement(data2, globalData2, comp2) {
			(this || _global).layers = data2.layers;
			(this || _global).supports3d = true;
			(this || _global).completeLayers = false;
			(this || _global).pendingElements = [];
			(this || _global).elements = (this || _global).layers
				? createSizedArray((this || _global).layers.length)
				: [];
			this.initElement(data2, globalData2, comp2);
			(this || _global).tm = data2.tm
				? PropertyFactory.getProp(
						this || _global,
						data2.tm,
						0,
						globalData2.frameRate,
						this || _global,
					)
				: {
						_placeholder: true,
					};
		}
		extendPrototype(
			[SVGRenderer, ICompElement, SVGBaseElement],
			SVGCompElement,
		);
		function SVGTextLottieElement(data2, globalData2, comp2) {
			(this || _global).textSpans = [];
			(this || _global).renderType = "svg";
			this.initElement(data2, globalData2, comp2);
		}
		extendPrototype(
			[
				BaseElement,
				TransformElement,
				SVGBaseElement,
				HierarchyElement,
				FrameElement,
				RenderableDOMElement,
				ITextElement,
			],
			SVGTextLottieElement,
		);
		SVGTextLottieElement.prototype.createContent = function () {
			if (
				(this || _global).data.singleShape &&
				!(this || _global).globalData.fontManager.chars
			) {
				(this || _global).textContainer = createNS("text");
			}
		};
		SVGTextLottieElement.prototype.buildTextContents = function (textArray) {
			var i = 0;
			var len = textArray.length;
			var textContents = [];
			var currentTextContent = "";
			while (i < len) {
				if (
					textArray[i] === String.fromCharCode(13) ||
					textArray[i] === String.fromCharCode(3)
				) {
					textContents.push(currentTextContent);
					currentTextContent = "";
				} else {
					currentTextContent += textArray[i];
				}
				i += 1;
			}
			textContents.push(currentTextContent);
			return textContents;
		};
		SVGTextLottieElement.prototype.buildNewText = function () {
			var i;
			var len;
			var documentData = (this || _global).textProperty.currentData;
			(this || _global).renderedLetters = createSizedArray(
				documentData ? documentData.l.length : 0,
			);
			if (documentData.fc) {
				(this || _global).layerElement.setAttribute(
					"fill",
					this.buildColor(documentData.fc),
				);
			} else {
				(this || _global).layerElement.setAttribute("fill", "rgba(0,0,0,0)");
			}
			if (documentData.sc) {
				(this || _global).layerElement.setAttribute(
					"stroke",
					this.buildColor(documentData.sc),
				);
				(this || _global).layerElement.setAttribute(
					"stroke-width",
					documentData.sw,
				);
			}
			(this || _global).layerElement.setAttribute(
				"font-size",
				documentData.finalSize,
			);
			var fontData = (this || _global).globalData.fontManager.getFontByName(
				documentData.f,
			);
			if (fontData.fClass) {
				(this || _global).layerElement.setAttribute("class", fontData.fClass);
			} else {
				(this || _global).layerElement.setAttribute(
					"font-family",
					fontData.fFamily,
				);
				var fWeight = documentData.fWeight;
				var fStyle = documentData.fStyle;
				(this || _global).layerElement.setAttribute("font-style", fStyle);
				(this || _global).layerElement.setAttribute("font-weight", fWeight);
			}
			(this || _global).layerElement.setAttribute("aria-label", documentData.t);
			var letters = documentData.l || [];
			var usesGlyphs = !!(this || _global).globalData.fontManager.chars;
			len = letters.length;
			var tSpan;
			var matrixHelper = (this || _global).mHelper;
			var shapes;
			var shapeStr = "";
			var singleShape = (this || _global).data.singleShape;
			var xPos = 0;
			var yPos = 0;
			var firstLine = true;
			var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
			if (singleShape && !usesGlyphs && !documentData.sz) {
				var tElement = (this || _global).textContainer;
				var justify = "start";
				switch (documentData.j) {
					case 1:
						justify = "end";
						break;
					case 2:
						justify = "middle";
						break;
					default:
						justify = "start";
						break;
				}
				tElement.setAttribute("text-anchor", justify);
				tElement.setAttribute("letter-spacing", trackingOffset);
				var textContent = this.buildTextContents(documentData.finalText);
				len = textContent.length;
				yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
				for (i = 0; i < len; i += 1) {
					tSpan = (this || _global).textSpans[i] || createNS("tspan");
					tSpan.textContent = textContent[i];
					tSpan.setAttribute("x", 0);
					tSpan.setAttribute("y", yPos);
					tSpan.style.display = "inherit";
					tElement.appendChild(tSpan);
					(this || _global).textSpans[i] = tSpan;
					yPos += documentData.finalLineHeight;
				}
				(this || _global).layerElement.appendChild(tElement);
			} else {
				var cachedSpansLength = (this || _global).textSpans.length;
				var shapeData;
				var charData;
				for (i = 0; i < len; i += 1) {
					if (!usesGlyphs || !singleShape || i === 0) {
						tSpan =
							cachedSpansLength > i
								? (this || _global).textSpans[i]
								: createNS(usesGlyphs ? "path" : "text");
						if (cachedSpansLength <= i) {
							tSpan.setAttribute("stroke-linecap", "butt");
							tSpan.setAttribute("stroke-linejoin", "round");
							tSpan.setAttribute("stroke-miterlimit", "4");
							(this || _global).textSpans[i] = tSpan;
							(this || _global).layerElement.appendChild(tSpan);
						}
						tSpan.style.display = "inherit";
					}
					matrixHelper.reset();
					matrixHelper.scale(
						documentData.finalSize / 100,
						documentData.finalSize / 100,
					);
					if (singleShape) {
						if (letters[i].n) {
							xPos = -trackingOffset;
							yPos += documentData.yOffset;
							yPos += firstLine ? 1 : 0;
							firstLine = false;
						}
						this.applyTextPropertiesToMatrix(
							documentData,
							matrixHelper,
							letters[i].line,
							xPos,
							yPos,
						);
						xPos += letters[i].l || 0;
						xPos += trackingOffset;
					}
					if (usesGlyphs) {
						charData = (this || _global).globalData.fontManager.getCharData(
							documentData.finalText[i],
							fontData.fStyle,
							(this || _global).globalData.fontManager.getFontByName(
								documentData.f,
							).fFamily,
						);
						shapeData = (charData && charData.data) || {};
						shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
						if (!singleShape) {
							tSpan.setAttribute(
								"d",
								this.createPathShape(matrixHelper, shapes),
							);
						} else {
							shapeStr += this.createPathShape(matrixHelper, shapes);
						}
					} else {
						if (singleShape) {
							tSpan.setAttribute(
								"transform",
								"translate(" +
									matrixHelper.props[12] +
									"," +
									matrixHelper.props[13] +
									")",
							);
						}
						tSpan.textContent = letters[i].val;
						tSpan.setAttributeNS(
							"http://www.w3.org/XML/1998/namespace",
							"xml:space",
							"preserve",
						);
					}
				}
				if (singleShape && tSpan) {
					tSpan.setAttribute("d", shapeStr);
				}
			}
			while (i < (this || _global).textSpans.length) {
				(this || _global).textSpans[i].style.display = "none";
				i += 1;
			}
			(this || _global)._sizeChanged = true;
		};
		SVGTextLottieElement.prototype.sourceRectAtTime = function () {
			this.prepareFrame(
				(this || _global).comp.renderedFrame - (this || _global).data.st,
			);
			this.renderInnerContent();
			if ((this || _global)._sizeChanged) {
				(this || _global)._sizeChanged = false;
				var textBox = (this || _global).layerElement.getBBox();
				(this || _global).bbox = {
					top: textBox.y,
					left: textBox.x,
					width: textBox.width,
					height: textBox.height,
				};
			}
			return (this || _global).bbox;
		};
		SVGTextLottieElement.prototype.renderInnerContent = function () {
			if (!(this || _global).data.singleShape) {
				(this || _global).textAnimator.getMeasures(
					(this || _global).textProperty.currentData,
					(this || _global).lettersChangedFlag,
				);
				if (
					(this || _global).lettersChangedFlag ||
					(this || _global).textAnimator.lettersChangedFlag
				) {
					(this || _global)._sizeChanged = true;
					var i;
					var len;
					var renderedLetters = (this || _global).textAnimator.renderedLetters;
					var letters = (this || _global).textProperty.currentData.l;
					len = letters.length;
					var renderedLetter;
					var textSpan;
					for (i = 0; i < len; i += 1) {
						if (!letters[i].n) {
							renderedLetter = renderedLetters[i];
							textSpan = (this || _global).textSpans[i];
							if (renderedLetter._mdf.m) {
								textSpan.setAttribute("transform", renderedLetter.m);
							}
							if (renderedLetter._mdf.o) {
								textSpan.setAttribute("opacity", renderedLetter.o);
							}
							if (renderedLetter._mdf.sw) {
								textSpan.setAttribute("stroke-width", renderedLetter.sw);
							}
							if (renderedLetter._mdf.sc) {
								textSpan.setAttribute("stroke", renderedLetter.sc);
							}
							if (renderedLetter._mdf.fc) {
								textSpan.setAttribute("fill", renderedLetter.fc);
							}
						}
					}
				}
			}
		};
		function SVGShapeElement(data2, globalData2, comp2) {
			(this || _global).shapes = [];
			(this || _global).shapesData = data2.shapes;
			(this || _global).stylesList = [];
			(this || _global).shapeModifiers = [];
			(this || _global).itemsData = [];
			(this || _global).processedElements = [];
			(this || _global).animatedContents = [];
			this.initElement(data2, globalData2, comp2);
			(this || _global).prevViewData = [];
		}
		extendPrototype(
			[
				BaseElement,
				TransformElement,
				SVGBaseElement,
				IShapeElement,
				HierarchyElement,
				FrameElement,
				RenderableDOMElement,
			],
			SVGShapeElement,
		);
		SVGShapeElement.prototype.initSecondaryElement = function () {};
		SVGShapeElement.prototype.identityMatrix = new Matrix();
		SVGShapeElement.prototype.buildExpressionInterface = function () {};
		SVGShapeElement.prototype.createContent = function () {
			this.searchShapes(
				(this || _global).shapesData,
				(this || _global).itemsData,
				(this || _global).prevViewData,
				(this || _global).layerElement,
				0,
				[],
				true,
			);
			this.filterUniqueShapes();
		};
		SVGShapeElement.prototype.filterUniqueShapes = function () {
			var i;
			var len = (this || _global).shapes.length;
			var shape;
			var j;
			var jLen = (this || _global).stylesList.length;
			var style;
			var tempShapes = [];
			var areAnimated = false;
			for (j = 0; j < jLen; j += 1) {
				style = (this || _global).stylesList[j];
				areAnimated = false;
				tempShapes.length = 0;
				for (i = 0; i < len; i += 1) {
					shape = (this || _global).shapes[i];
					if (shape.styles.indexOf(style) !== -1) {
						tempShapes.push(shape);
						areAnimated = shape._isAnimated || areAnimated;
					}
				}
				if (tempShapes.length > 1 && areAnimated) {
					this.setShapesAsAnimated(tempShapes);
				}
			}
		};
		SVGShapeElement.prototype.setShapesAsAnimated = function (shapes) {
			var i;
			var len = shapes.length;
			for (i = 0; i < len; i += 1) {
				shapes[i].setAsAnimated();
			}
		};
		SVGShapeElement.prototype.createStyleElement = function (data2, level) {
			var elementData;
			var styleOb = new SVGStyleData(data2, level);
			var pathElement = styleOb.pElem;
			if (data2.ty === "st") {
				elementData = new SVGStrokeStyleData(this || _global, data2, styleOb);
			} else if (data2.ty === "fl") {
				elementData = new SVGFillStyleData(this || _global, data2, styleOb);
			} else if (data2.ty === "gf" || data2.ty === "gs") {
				var GradientConstructor =
					data2.ty === "gf"
						? SVGGradientFillStyleData
						: SVGGradientStrokeStyleData;
				elementData = new GradientConstructor(this || _global, data2, styleOb);
				(this || _global).globalData.defs.appendChild(elementData.gf);
				if (elementData.maskId) {
					(this || _global).globalData.defs.appendChild(elementData.ms);
					(this || _global).globalData.defs.appendChild(elementData.of);
					pathElement.setAttribute(
						"mask",
						"url(" + locationHref + "#" + elementData.maskId + ")",
					);
				}
			}
			if (data2.ty === "st" || data2.ty === "gs") {
				pathElement.setAttribute(
					"stroke-linecap",
					(this || _global).lcEnum[data2.lc] || "round",
				);
				pathElement.setAttribute(
					"stroke-linejoin",
					(this || _global).ljEnum[data2.lj] || "round",
				);
				pathElement.setAttribute("fill-opacity", "0");
				if (data2.lj === 1) {
					pathElement.setAttribute("stroke-miterlimit", data2.ml);
				}
			}
			if (data2.r === 2) {
				pathElement.setAttribute("fill-rule", "evenodd");
			}
			if (data2.ln) {
				pathElement.setAttribute("id", data2.ln);
			}
			if (data2.cl) {
				pathElement.setAttribute("class", data2.cl);
			}
			if (data2.bm) {
				pathElement.style["mix-blend-mode"] = getBlendMode(data2.bm);
			}
			(this || _global).stylesList.push(styleOb);
			this.addToAnimatedContents(data2, elementData);
			return elementData;
		};
		SVGShapeElement.prototype.createGroupElement = function (data2) {
			var elementData = new ShapeGroupData();
			if (data2.ln) {
				elementData.gr.setAttribute("id", data2.ln);
			}
			if (data2.cl) {
				elementData.gr.setAttribute("class", data2.cl);
			}
			if (data2.bm) {
				elementData.gr.style["mix-blend-mode"] = getBlendMode(data2.bm);
			}
			return elementData;
		};
		SVGShapeElement.prototype.createTransformElement = function (
			data2,
			container,
		) {
			var transformProperty = TransformPropertyFactory.getTransformProperty(
				this || _global,
				data2,
				this || _global,
			);
			var elementData = new SVGTransformData(
				transformProperty,
				transformProperty.o,
				container,
			);
			this.addToAnimatedContents(data2, elementData);
			return elementData;
		};
		SVGShapeElement.prototype.createShapeElement = function (
			data2,
			ownTransformers,
			level,
		) {
			var ty = 4;
			if (data2.ty === "rc") {
				ty = 5;
			} else if (data2.ty === "el") {
				ty = 6;
			} else if (data2.ty === "sr") {
				ty = 7;
			}
			var shapeProperty = ShapePropertyFactory.getShapeProp(
				this || _global,
				data2,
				ty,
				this || _global,
			);
			var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
			(this || _global).shapes.push(elementData);
			this.addShapeToModifiers(elementData);
			this.addToAnimatedContents(data2, elementData);
			return elementData;
		};
		SVGShapeElement.prototype.addToAnimatedContents = function (
			data2,
			element,
		) {
			var i = 0;
			var len = (this || _global).animatedContents.length;
			while (i < len) {
				if ((this || _global).animatedContents[i].element === element) {
					return;
				}
				i += 1;
			}
			(this || _global).animatedContents.push({
				fn: SVGElementsRenderer.createRenderFunction(data2),
				element,
				data: data2,
			});
		};
		SVGShapeElement.prototype.setElementStyles = function (elementData) {
			var arr = elementData.styles;
			var j;
			var jLen = (this || _global).stylesList.length;
			for (j = 0; j < jLen; j += 1) {
				if (!(this || _global).stylesList[j].closed) {
					arr.push((this || _global).stylesList[j]);
				}
			}
		};
		SVGShapeElement.prototype.reloadShapes = function () {
			(this || _global)._isFirstFrame = true;
			var i;
			var len = (this || _global).itemsData.length;
			for (i = 0; i < len; i += 1) {
				(this || _global).prevViewData[i] = (this || _global).itemsData[i];
			}
			this.searchShapes(
				(this || _global).shapesData,
				(this || _global).itemsData,
				(this || _global).prevViewData,
				(this || _global).layerElement,
				0,
				[],
				true,
			);
			this.filterUniqueShapes();
			len = (this || _global).dynamicProperties.length;
			for (i = 0; i < len; i += 1) {
				(this || _global).dynamicProperties[i].getValue();
			}
			this.renderModifiers();
		};
		SVGShapeElement.prototype.searchShapes = function (
			arr,
			itemsData,
			prevViewData,
			container,
			level,
			transformers,
			render,
		) {
			var ownTransformers = [].concat(transformers);
			var i;
			var len = arr.length - 1;
			var j;
			var jLen;
			var ownStyles = [];
			var ownModifiers = [];
			var currentTransform;
			var modifier;
			var processedPos;
			for (i = len; i >= 0; i -= 1) {
				processedPos = this.searchProcessedElement(arr[i]);
				if (!processedPos) {
					arr[i]._render = render;
				} else {
					itemsData[i] = prevViewData[processedPos - 1];
				}
				if (
					arr[i].ty === "fl" ||
					arr[i].ty === "st" ||
					arr[i].ty === "gf" ||
					arr[i].ty === "gs"
				) {
					if (!processedPos) {
						itemsData[i] = this.createStyleElement(arr[i], level);
					} else {
						itemsData[i].style.closed = false;
					}
					if (arr[i]._render) {
						container.appendChild(itemsData[i].style.pElem);
					}
					ownStyles.push(itemsData[i].style);
				} else if (arr[i].ty === "gr") {
					if (!processedPos) {
						itemsData[i] = this.createGroupElement(arr[i]);
					} else {
						jLen = itemsData[i].it.length;
						for (j = 0; j < jLen; j += 1) {
							itemsData[i].prevViewData[j] = itemsData[i].it[j];
						}
					}
					this.searchShapes(
						arr[i].it,
						itemsData[i].it,
						itemsData[i].prevViewData,
						itemsData[i].gr,
						level + 1,
						ownTransformers,
						render,
					);
					if (arr[i]._render) {
						container.appendChild(itemsData[i].gr);
					}
				} else if (arr[i].ty === "tr") {
					if (!processedPos) {
						itemsData[i] = this.createTransformElement(arr[i], container);
					}
					currentTransform = itemsData[i].transform;
					ownTransformers.push(currentTransform);
				} else if (
					arr[i].ty === "sh" ||
					arr[i].ty === "rc" ||
					arr[i].ty === "el" ||
					arr[i].ty === "sr"
				) {
					if (!processedPos) {
						itemsData[i] = this.createShapeElement(
							arr[i],
							ownTransformers,
							level,
						);
					}
					this.setElementStyles(itemsData[i]);
				} else if (
					arr[i].ty === "tm" ||
					arr[i].ty === "rd" ||
					arr[i].ty === "ms" ||
					arr[i].ty === "pb"
				) {
					if (!processedPos) {
						modifier = ShapeModifiers.getModifier(arr[i].ty);
						modifier.init(this || _global, arr[i]);
						itemsData[i] = modifier;
						(this || _global).shapeModifiers.push(modifier);
					} else {
						modifier = itemsData[i];
						modifier.closed = false;
					}
					ownModifiers.push(modifier);
				} else if (arr[i].ty === "rp") {
					if (!processedPos) {
						modifier = ShapeModifiers.getModifier(arr[i].ty);
						itemsData[i] = modifier;
						modifier.init(this || _global, arr, i, itemsData);
						(this || _global).shapeModifiers.push(modifier);
						render = false;
					} else {
						modifier = itemsData[i];
						modifier.closed = true;
					}
					ownModifiers.push(modifier);
				}
				this.addProcessedElement(arr[i], i + 1);
			}
			len = ownStyles.length;
			for (i = 0; i < len; i += 1) {
				ownStyles[i].closed = true;
			}
			len = ownModifiers.length;
			for (i = 0; i < len; i += 1) {
				ownModifiers[i].closed = true;
			}
		};
		SVGShapeElement.prototype.renderInnerContent = function () {
			this.renderModifiers();
			var i;
			var len = (this || _global).stylesList.length;
			for (i = 0; i < len; i += 1) {
				(this || _global).stylesList[i].reset();
			}
			this.renderShape();
			for (i = 0; i < len; i += 1) {
				if (
					(this || _global).stylesList[i]._mdf ||
					(this || _global)._isFirstFrame
				) {
					if ((this || _global).stylesList[i].msElem) {
						(this || _global).stylesList[i].msElem.setAttribute(
							"d",
							(this || _global).stylesList[i].d,
						);
						(this || _global).stylesList[i].d =
							"M0 0" + (this || _global).stylesList[i].d;
					}
					(this || _global).stylesList[i].pElem.setAttribute(
						"d",
						(this || _global).stylesList[i].d || "M0 0",
					);
				}
			}
		};
		SVGShapeElement.prototype.renderShape = function () {
			var i;
			var len = (this || _global).animatedContents.length;
			var animatedContent;
			for (i = 0; i < len; i += 1) {
				animatedContent = (this || _global).animatedContents[i];
				if (
					((this || _global)._isFirstFrame ||
						animatedContent.element._isAnimated) &&
					animatedContent.data !== true
				) {
					animatedContent.fn(
						animatedContent.data,
						animatedContent.element,
						(this || _global)._isFirstFrame,
					);
				}
			}
		};
		SVGShapeElement.prototype.destroy = function () {
			this.destroyBaseElement();
			(this || _global).shapesData = null;
			(this || _global).itemsData = null;
		};
		function SVGTintFilter(filter, filterManager) {
			(this || _global).filterManager = filterManager;
			var feColorMatrix = createNS("feColorMatrix");
			feColorMatrix.setAttribute("type", "matrix");
			feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
			feColorMatrix.setAttribute(
				"values",
				"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0",
			);
			feColorMatrix.setAttribute("result", "f1");
			filter.appendChild(feColorMatrix);
			feColorMatrix = createNS("feColorMatrix");
			feColorMatrix.setAttribute("type", "matrix");
			feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
			feColorMatrix.setAttribute(
				"values",
				"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0",
			);
			feColorMatrix.setAttribute("result", "f2");
			filter.appendChild(feColorMatrix);
			(this || _global).matrixFilter = feColorMatrix;
			if (
				filterManager.effectElements[2].p.v !== 100 ||
				filterManager.effectElements[2].p.k
			) {
				var feMerge = createNS("feMerge");
				filter.appendChild(feMerge);
				var feMergeNode;
				feMergeNode = createNS("feMergeNode");
				feMergeNode.setAttribute("in", "SourceGraphic");
				feMerge.appendChild(feMergeNode);
				feMergeNode = createNS("feMergeNode");
				feMergeNode.setAttribute("in", "f2");
				feMerge.appendChild(feMergeNode);
			}
		}
		SVGTintFilter.prototype.renderFrame = function (forceRender) {
			if (forceRender || (this || _global).filterManager._mdf) {
				var colorBlack = (this || _global).filterManager.effectElements[0].p.v;
				var colorWhite = (this || _global).filterManager.effectElements[1].p.v;
				var opacity =
					(this || _global).filterManager.effectElements[2].p.v / 100;
				(this || _global).matrixFilter.setAttribute(
					"values",
					colorWhite[0] -
						colorBlack[0] +
						" 0 0 0 " +
						colorBlack[0] +
						" " +
						(colorWhite[1] - colorBlack[1]) +
						" 0 0 0 " +
						colorBlack[1] +
						" " +
						(colorWhite[2] - colorBlack[2]) +
						" 0 0 0 " +
						colorBlack[2] +
						" 0 0 0 " +
						opacity +
						" 0",
				);
			}
		};
		function SVGFillFilter(filter, filterManager) {
			(this || _global).filterManager = filterManager;
			var feColorMatrix = createNS("feColorMatrix");
			feColorMatrix.setAttribute("type", "matrix");
			feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
			feColorMatrix.setAttribute(
				"values",
				"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0",
			);
			filter.appendChild(feColorMatrix);
			(this || _global).matrixFilter = feColorMatrix;
		}
		SVGFillFilter.prototype.renderFrame = function (forceRender) {
			if (forceRender || (this || _global).filterManager._mdf) {
				var color = (this || _global).filterManager.effectElements[2].p.v;
				var opacity = (this || _global).filterManager.effectElements[6].p.v;
				(this || _global).matrixFilter.setAttribute(
					"values",
					"0 0 0 0 " +
						color[0] +
						" 0 0 0 0 " +
						color[1] +
						" 0 0 0 0 " +
						color[2] +
						" 0 0 0 " +
						opacity +
						" 0",
				);
			}
		};
		function SVGGaussianBlurEffect(filter, filterManager) {
			filter.setAttribute("x", "-100%");
			filter.setAttribute("y", "-100%");
			filter.setAttribute("width", "300%");
			filter.setAttribute("height", "300%");
			(this || _global).filterManager = filterManager;
			var feGaussianBlur = createNS("feGaussianBlur");
			filter.appendChild(feGaussianBlur);
			(this || _global).feGaussianBlur = feGaussianBlur;
		}
		SVGGaussianBlurEffect.prototype.renderFrame = function (forceRender) {
			if (forceRender || (this || _global).filterManager._mdf) {
				var kBlurrinessToSigma = 0.3;
				var sigma =
					(this || _global).filterManager.effectElements[0].p.v *
					kBlurrinessToSigma;
				var dimensions = (this || _global).filterManager.effectElements[1].p.v;
				var sigmaX = dimensions == 3 ? 0 : sigma;
				var sigmaY = dimensions == 2 ? 0 : sigma;
				(this || _global).feGaussianBlur.setAttribute(
					"stdDeviation",
					sigmaX + " " + sigmaY,
				);
				var edgeMode =
					(this || _global).filterManager.effectElements[2].p.v == 1
						? "wrap"
						: "duplicate";
				(this || _global).feGaussianBlur.setAttribute("edgeMode", edgeMode);
			}
		};
		function SVGStrokeEffect(elem2, filterManager) {
			(this || _global).initialized = false;
			(this || _global).filterManager = filterManager;
			(this || _global).elem = elem2;
			(this || _global).paths = [];
		}
		SVGStrokeEffect.prototype.initialize = function () {
			var elemChildren =
				(this || _global).elem.layerElement.children ||
				(this || _global).elem.layerElement.childNodes;
			var path;
			var groupPath;
			var i;
			var len;
			if ((this || _global).filterManager.effectElements[1].p.v === 1) {
				len = (this || _global).elem.maskManager.masksProperties.length;
				i = 0;
			} else {
				i = (this || _global).filterManager.effectElements[0].p.v - 1;
				len = i + 1;
			}
			groupPath = createNS("g");
			groupPath.setAttribute("fill", "none");
			groupPath.setAttribute("stroke-linecap", "round");
			groupPath.setAttribute("stroke-dashoffset", 1);
			for (i; i < len; i += 1) {
				path = createNS("path");
				groupPath.appendChild(path);
				(this || _global).paths.push({
					p: path,
					m: i,
				});
			}
			if ((this || _global).filterManager.effectElements[10].p.v === 3) {
				var mask22 = createNS("mask");
				var id = createElementID();
				mask22.setAttribute("id", id);
				mask22.setAttribute("mask-type", "alpha");
				mask22.appendChild(groupPath);
				(this || _global).elem.globalData.defs.appendChild(mask22);
				var g = createNS("g");
				g.setAttribute("mask", "url(" + locationHref + "#" + id + ")");
				while (elemChildren[0]) {
					g.appendChild(elemChildren[0]);
				}
				(this || _global).elem.layerElement.appendChild(g);
				(this || _global).masker = mask22;
				groupPath.setAttribute("stroke", "#fff");
			} else if (
				(this || _global).filterManager.effectElements[10].p.v === 1 ||
				(this || _global).filterManager.effectElements[10].p.v === 2
			) {
				if ((this || _global).filterManager.effectElements[10].p.v === 2) {
					elemChildren =
						(this || _global).elem.layerElement.children ||
						(this || _global).elem.layerElement.childNodes;
					while (elemChildren.length) {
						(this || _global).elem.layerElement.removeChild(elemChildren[0]);
					}
				}
				(this || _global).elem.layerElement.appendChild(groupPath);
				(this || _global).elem.layerElement.removeAttribute("mask");
				groupPath.setAttribute("stroke", "#fff");
			}
			(this || _global).initialized = true;
			(this || _global).pathMasker = groupPath;
		};
		SVGStrokeEffect.prototype.renderFrame = function (forceRender) {
			if (!(this || _global).initialized) {
				this.initialize();
			}
			var i;
			var len = (this || _global).paths.length;
			var mask22;
			var path;
			for (i = 0; i < len; i += 1) {
				if ((this || _global).paths[i].m !== -1) {
					mask22 = (this || _global).elem.maskManager.viewData[
						(this || _global).paths[i].m
					];
					path = (this || _global).paths[i].p;
					if (
						forceRender ||
						(this || _global).filterManager._mdf ||
						mask22.prop._mdf
					) {
						path.setAttribute("d", mask22.lastPath);
					}
					if (
						forceRender ||
						(this || _global).filterManager.effectElements[9].p._mdf ||
						(this || _global).filterManager.effectElements[4].p._mdf ||
						(this || _global).filterManager.effectElements[7].p._mdf ||
						(this || _global).filterManager.effectElements[8].p._mdf ||
						mask22.prop._mdf
					) {
						var dasharrayValue;
						if (
							(this || _global).filterManager.effectElements[7].p.v !== 0 ||
							(this || _global).filterManager.effectElements[8].p.v !== 100
						) {
							var s =
								Math.min(
									(this || _global).filterManager.effectElements[7].p.v,
									(this || _global).filterManager.effectElements[8].p.v,
								) * 0.01;
							var e =
								Math.max(
									(this || _global).filterManager.effectElements[7].p.v,
									(this || _global).filterManager.effectElements[8].p.v,
								) * 0.01;
							var l = path.getTotalLength();
							dasharrayValue = "0 0 0 " + l * s + " ";
							var lineLength = l * (e - s);
							var segment =
								1 +
								(this || _global).filterManager.effectElements[4].p.v *
									2 *
									(this || _global).filterManager.effectElements[9].p.v *
									0.01;
							var units = Math.floor(lineLength / segment);
							var j;
							for (j = 0; j < units; j += 1) {
								dasharrayValue +=
									"1 " +
									(this || _global).filterManager.effectElements[4].p.v *
										2 *
										(this || _global).filterManager.effectElements[9].p.v *
										0.01 +
									" ";
							}
							dasharrayValue += "0 " + l * 10 + " 0 0";
						} else {
							dasharrayValue =
								"1 " +
								(this || _global).filterManager.effectElements[4].p.v *
									2 *
									(this || _global).filterManager.effectElements[9].p.v *
									0.01;
						}
						path.setAttribute("stroke-dasharray", dasharrayValue);
					}
				}
			}
			if (
				forceRender ||
				(this || _global).filterManager.effectElements[4].p._mdf
			) {
				(this || _global).pathMasker.setAttribute(
					"stroke-width",
					(this || _global).filterManager.effectElements[4].p.v * 2,
				);
			}
			if (
				forceRender ||
				(this || _global).filterManager.effectElements[6].p._mdf
			) {
				(this || _global).pathMasker.setAttribute(
					"opacity",
					(this || _global).filterManager.effectElements[6].p.v,
				);
			}
			if (
				(this || _global).filterManager.effectElements[10].p.v === 1 ||
				(this || _global).filterManager.effectElements[10].p.v === 2
			) {
				if (
					forceRender ||
					(this || _global).filterManager.effectElements[3].p._mdf
				) {
					var color = (this || _global).filterManager.effectElements[3].p.v;
					(this || _global).pathMasker.setAttribute(
						"stroke",
						"rgb(" +
							bmFloor(color[0] * 255) +
							"," +
							bmFloor(color[1] * 255) +
							"," +
							bmFloor(color[2] * 255) +
							")",
					);
				}
			}
		};
		function SVGTritoneFilter(filter, filterManager) {
			(this || _global).filterManager = filterManager;
			var feColorMatrix = createNS("feColorMatrix");
			feColorMatrix.setAttribute("type", "matrix");
			feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
			feColorMatrix.setAttribute(
				"values",
				"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0",
			);
			feColorMatrix.setAttribute("result", "f1");
			filter.appendChild(feColorMatrix);
			var feComponentTransfer = createNS("feComponentTransfer");
			feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
			filter.appendChild(feComponentTransfer);
			(this || _global).matrixFilter = feComponentTransfer;
			var feFuncR = createNS("feFuncR");
			feFuncR.setAttribute("type", "table");
			feComponentTransfer.appendChild(feFuncR);
			(this || _global).feFuncR = feFuncR;
			var feFuncG = createNS("feFuncG");
			feFuncG.setAttribute("type", "table");
			feComponentTransfer.appendChild(feFuncG);
			(this || _global).feFuncG = feFuncG;
			var feFuncB = createNS("feFuncB");
			feFuncB.setAttribute("type", "table");
			feComponentTransfer.appendChild(feFuncB);
			(this || _global).feFuncB = feFuncB;
		}
		SVGTritoneFilter.prototype.renderFrame = function (forceRender) {
			if (forceRender || (this || _global).filterManager._mdf) {
				var color1 = (this || _global).filterManager.effectElements[0].p.v;
				var color2 = (this || _global).filterManager.effectElements[1].p.v;
				var color3 = (this || _global).filterManager.effectElements[2].p.v;
				var tableR = color3[0] + " " + color2[0] + " " + color1[0];
				var tableG = color3[1] + " " + color2[1] + " " + color1[1];
				var tableB = color3[2] + " " + color2[2] + " " + color1[2];
				(this || _global).feFuncR.setAttribute("tableValues", tableR);
				(this || _global).feFuncG.setAttribute("tableValues", tableG);
				(this || _global).feFuncB.setAttribute("tableValues", tableB);
			}
		};
		function SVGProLevelsFilter(filter, filterManager) {
			(this || _global).filterManager = filterManager;
			var effectElements = (this || _global).filterManager.effectElements;
			var feComponentTransfer = createNS("feComponentTransfer");
			if (
				effectElements[10].p.k ||
				effectElements[10].p.v !== 0 ||
				effectElements[11].p.k ||
				effectElements[11].p.v !== 1 ||
				effectElements[12].p.k ||
				effectElements[12].p.v !== 1 ||
				effectElements[13].p.k ||
				effectElements[13].p.v !== 0 ||
				effectElements[14].p.k ||
				effectElements[14].p.v !== 1
			) {
				(this || _global).feFuncR = this.createFeFunc(
					"feFuncR",
					feComponentTransfer,
				);
			}
			if (
				effectElements[17].p.k ||
				effectElements[17].p.v !== 0 ||
				effectElements[18].p.k ||
				effectElements[18].p.v !== 1 ||
				effectElements[19].p.k ||
				effectElements[19].p.v !== 1 ||
				effectElements[20].p.k ||
				effectElements[20].p.v !== 0 ||
				effectElements[21].p.k ||
				effectElements[21].p.v !== 1
			) {
				(this || _global).feFuncG = this.createFeFunc(
					"feFuncG",
					feComponentTransfer,
				);
			}
			if (
				effectElements[24].p.k ||
				effectElements[24].p.v !== 0 ||
				effectElements[25].p.k ||
				effectElements[25].p.v !== 1 ||
				effectElements[26].p.k ||
				effectElements[26].p.v !== 1 ||
				effectElements[27].p.k ||
				effectElements[27].p.v !== 0 ||
				effectElements[28].p.k ||
				effectElements[28].p.v !== 1
			) {
				(this || _global).feFuncB = this.createFeFunc(
					"feFuncB",
					feComponentTransfer,
				);
			}
			if (
				effectElements[31].p.k ||
				effectElements[31].p.v !== 0 ||
				effectElements[32].p.k ||
				effectElements[32].p.v !== 1 ||
				effectElements[33].p.k ||
				effectElements[33].p.v !== 1 ||
				effectElements[34].p.k ||
				effectElements[34].p.v !== 0 ||
				effectElements[35].p.k ||
				effectElements[35].p.v !== 1
			) {
				(this || _global).feFuncA = this.createFeFunc(
					"feFuncA",
					feComponentTransfer,
				);
			}
			if (
				(this || _global).feFuncR ||
				(this || _global).feFuncG ||
				(this || _global).feFuncB ||
				(this || _global).feFuncA
			) {
				feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
				filter.appendChild(feComponentTransfer);
				feComponentTransfer = createNS("feComponentTransfer");
			}
			if (
				effectElements[3].p.k ||
				effectElements[3].p.v !== 0 ||
				effectElements[4].p.k ||
				effectElements[4].p.v !== 1 ||
				effectElements[5].p.k ||
				effectElements[5].p.v !== 1 ||
				effectElements[6].p.k ||
				effectElements[6].p.v !== 0 ||
				effectElements[7].p.k ||
				effectElements[7].p.v !== 1
			) {
				feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
				filter.appendChild(feComponentTransfer);
				(this || _global).feFuncRComposed = this.createFeFunc(
					"feFuncR",
					feComponentTransfer,
				);
				(this || _global).feFuncGComposed = this.createFeFunc(
					"feFuncG",
					feComponentTransfer,
				);
				(this || _global).feFuncBComposed = this.createFeFunc(
					"feFuncB",
					feComponentTransfer,
				);
			}
		}
		SVGProLevelsFilter.prototype.createFeFunc = function (
			type,
			feComponentTransfer,
		) {
			var feFunc = createNS(type);
			feFunc.setAttribute("type", "table");
			feComponentTransfer.appendChild(feFunc);
			return feFunc;
		};
		SVGProLevelsFilter.prototype.getTableValue = function (
			inputBlack,
			inputWhite,
			gamma,
			outputBlack,
			outputWhite,
		) {
			var cnt = 0;
			var segments = 256;
			var perc;
			var min = Math.min(inputBlack, inputWhite);
			var max = Math.max(inputBlack, inputWhite);
			var table = Array.call(null, {
				length: segments,
			});
			var colorValue;
			var pos = 0;
			var outputDelta = outputWhite - outputBlack;
			var inputDelta = inputWhite - inputBlack;
			while (cnt <= 256) {
				perc = cnt / 256;
				if (perc <= min) {
					colorValue = inputDelta < 0 ? outputWhite : outputBlack;
				} else if (perc >= max) {
					colorValue = inputDelta < 0 ? outputBlack : outputWhite;
				} else {
					colorValue =
						outputBlack +
						outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma);
				}
				table[pos] = colorValue;
				pos += 1;
				cnt += 256 / (segments - 1);
			}
			return table.join(" ");
		};
		SVGProLevelsFilter.prototype.renderFrame = function (forceRender) {
			if (forceRender || (this || _global).filterManager._mdf) {
				var val2;
				var effectElements = (this || _global).filterManager.effectElements;
				if (
					(this || _global).feFuncRComposed &&
					(forceRender ||
						effectElements[3].p._mdf ||
						effectElements[4].p._mdf ||
						effectElements[5].p._mdf ||
						effectElements[6].p._mdf ||
						effectElements[7].p._mdf)
				) {
					val2 = this.getTableValue(
						effectElements[3].p.v,
						effectElements[4].p.v,
						effectElements[5].p.v,
						effectElements[6].p.v,
						effectElements[7].p.v,
					);
					(this || _global).feFuncRComposed.setAttribute("tableValues", val2);
					(this || _global).feFuncGComposed.setAttribute("tableValues", val2);
					(this || _global).feFuncBComposed.setAttribute("tableValues", val2);
				}
				if (
					(this || _global).feFuncR &&
					(forceRender ||
						effectElements[10].p._mdf ||
						effectElements[11].p._mdf ||
						effectElements[12].p._mdf ||
						effectElements[13].p._mdf ||
						effectElements[14].p._mdf)
				) {
					val2 = this.getTableValue(
						effectElements[10].p.v,
						effectElements[11].p.v,
						effectElements[12].p.v,
						effectElements[13].p.v,
						effectElements[14].p.v,
					);
					(this || _global).feFuncR.setAttribute("tableValues", val2);
				}
				if (
					(this || _global).feFuncG &&
					(forceRender ||
						effectElements[17].p._mdf ||
						effectElements[18].p._mdf ||
						effectElements[19].p._mdf ||
						effectElements[20].p._mdf ||
						effectElements[21].p._mdf)
				) {
					val2 = this.getTableValue(
						effectElements[17].p.v,
						effectElements[18].p.v,
						effectElements[19].p.v,
						effectElements[20].p.v,
						effectElements[21].p.v,
					);
					(this || _global).feFuncG.setAttribute("tableValues", val2);
				}
				if (
					(this || _global).feFuncB &&
					(forceRender ||
						effectElements[24].p._mdf ||
						effectElements[25].p._mdf ||
						effectElements[26].p._mdf ||
						effectElements[27].p._mdf ||
						effectElements[28].p._mdf)
				) {
					val2 = this.getTableValue(
						effectElements[24].p.v,
						effectElements[25].p.v,
						effectElements[26].p.v,
						effectElements[27].p.v,
						effectElements[28].p.v,
					);
					(this || _global).feFuncB.setAttribute("tableValues", val2);
				}
				if (
					(this || _global).feFuncA &&
					(forceRender ||
						effectElements[31].p._mdf ||
						effectElements[32].p._mdf ||
						effectElements[33].p._mdf ||
						effectElements[34].p._mdf ||
						effectElements[35].p._mdf)
				) {
					val2 = this.getTableValue(
						effectElements[31].p.v,
						effectElements[32].p.v,
						effectElements[33].p.v,
						effectElements[34].p.v,
						effectElements[35].p.v,
					);
					(this || _global).feFuncA.setAttribute("tableValues", val2);
				}
			}
		};
		function SVGDropShadowEffect(filter, filterManager) {
			var filterSize =
				filterManager.container.globalData.renderConfig.filterSize;
			filter.setAttribute("x", filterSize.x);
			filter.setAttribute("y", filterSize.y);
			filter.setAttribute("width", filterSize.width);
			filter.setAttribute("height", filterSize.height);
			(this || _global).filterManager = filterManager;
			var feGaussianBlur = createNS("feGaussianBlur");
			feGaussianBlur.setAttribute("in", "SourceAlpha");
			feGaussianBlur.setAttribute("result", "drop_shadow_1");
			feGaussianBlur.setAttribute("stdDeviation", "0");
			(this || _global).feGaussianBlur = feGaussianBlur;
			filter.appendChild(feGaussianBlur);
			var feOffset = createNS("feOffset");
			feOffset.setAttribute("dx", "25");
			feOffset.setAttribute("dy", "0");
			feOffset.setAttribute("in", "drop_shadow_1");
			feOffset.setAttribute("result", "drop_shadow_2");
			(this || _global).feOffset = feOffset;
			filter.appendChild(feOffset);
			var feFlood = createNS("feFlood");
			feFlood.setAttribute("flood-color", "#00ff00");
			feFlood.setAttribute("flood-opacity", "1");
			feFlood.setAttribute("result", "drop_shadow_3");
			(this || _global).feFlood = feFlood;
			filter.appendChild(feFlood);
			var feComposite = createNS("feComposite");
			feComposite.setAttribute("in", "drop_shadow_3");
			feComposite.setAttribute("in2", "drop_shadow_2");
			feComposite.setAttribute("operator", "in");
			feComposite.setAttribute("result", "drop_shadow_4");
			filter.appendChild(feComposite);
			var feMerge = createNS("feMerge");
			filter.appendChild(feMerge);
			var feMergeNode;
			feMergeNode = createNS("feMergeNode");
			feMerge.appendChild(feMergeNode);
			feMergeNode = createNS("feMergeNode");
			feMergeNode.setAttribute("in", "SourceGraphic");
			(this || _global).feMergeNode = feMergeNode;
			(this || _global).feMerge = feMerge;
			(this || _global).originalNodeAdded = false;
			feMerge.appendChild(feMergeNode);
		}
		SVGDropShadowEffect.prototype.renderFrame = function (forceRender) {
			if (forceRender || (this || _global).filterManager._mdf) {
				if (
					forceRender ||
					(this || _global).filterManager.effectElements[4].p._mdf
				) {
					(this || _global).feGaussianBlur.setAttribute(
						"stdDeviation",
						(this || _global).filterManager.effectElements[4].p.v / 4,
					);
				}
				if (
					forceRender ||
					(this || _global).filterManager.effectElements[0].p._mdf
				) {
					var col = (this || _global).filterManager.effectElements[0].p.v;
					(this || _global).feFlood.setAttribute(
						"flood-color",
						rgbToHex(
							Math.round(col[0] * 255),
							Math.round(col[1] * 255),
							Math.round(col[2] * 255),
						),
					);
				}
				if (
					forceRender ||
					(this || _global).filterManager.effectElements[1].p._mdf
				) {
					(this || _global).feFlood.setAttribute(
						"flood-opacity",
						(this || _global).filterManager.effectElements[1].p.v / 255,
					);
				}
				if (
					forceRender ||
					(this || _global).filterManager.effectElements[2].p._mdf ||
					(this || _global).filterManager.effectElements[3].p._mdf
				) {
					var distance = (this || _global).filterManager.effectElements[3].p.v;
					var angle =
						((this || _global).filterManager.effectElements[2].p.v - 90) *
						degToRads;
					var x = distance * Math.cos(angle);
					var y = distance * Math.sin(angle);
					(this || _global).feOffset.setAttribute("dx", x);
					(this || _global).feOffset.setAttribute("dy", y);
				}
			}
		};
		var _svgMatteSymbols = [];
		function SVGMatte3Effect(filterElem, filterManager, elem2) {
			(this || _global).initialized = false;
			(this || _global).filterManager = filterManager;
			(this || _global).filterElem = filterElem;
			(this || _global).elem = elem2;
			elem2.matteElement = createNS("g");
			elem2.matteElement.appendChild(elem2.layerElement);
			elem2.matteElement.appendChild(elem2.transformedElement);
			elem2.baseElement = elem2.matteElement;
		}
		SVGMatte3Effect.prototype.findSymbol = function (mask22) {
			var i = 0;
			var len = _svgMatteSymbols.length;
			while (i < len) {
				if (_svgMatteSymbols[i] === mask22) {
					return _svgMatteSymbols[i];
				}
				i += 1;
			}
			return null;
		};
		SVGMatte3Effect.prototype.replaceInParent = function (mask22, symbolId) {
			var parentNode = mask22.layerElement.parentNode;
			if (!parentNode) {
				return;
			}
			var children = parentNode.children;
			var i = 0;
			var len = children.length;
			while (i < len) {
				if (children[i] === mask22.layerElement) {
					break;
				}
				i += 1;
			}
			var nextChild;
			if (i <= len - 2) {
				nextChild = children[i + 1];
			}
			var useElem = createNS("use");
			useElem.setAttribute("href", "#" + symbolId);
			if (nextChild) {
				parentNode.insertBefore(useElem, nextChild);
			} else {
				parentNode.appendChild(useElem);
			}
		};
		SVGMatte3Effect.prototype.setElementAsMask = function (elem2, mask22) {
			if (!this.findSymbol(mask22)) {
				var symbolId = createElementID();
				var masker = createNS("mask");
				masker.setAttribute("id", mask22.layerId);
				masker.setAttribute("mask-type", "alpha");
				_svgMatteSymbols.push(mask22);
				var defs = elem2.globalData.defs;
				defs.appendChild(masker);
				var symbol = createNS("symbol");
				symbol.setAttribute("id", symbolId);
				this.replaceInParent(mask22, symbolId);
				symbol.appendChild(mask22.layerElement);
				defs.appendChild(symbol);
				var useElem = createNS("use");
				useElem.setAttribute("href", "#" + symbolId);
				masker.appendChild(useElem);
				mask22.data.hd = false;
				mask22.show();
			}
			elem2.setMatte(mask22.layerId);
		};
		SVGMatte3Effect.prototype.initialize = function () {
			var ind = (this || _global).filterManager.effectElements[0].p.v;
			var elements = (this || _global).elem.comp.elements;
			var i = 0;
			var len = elements.length;
			while (i < len) {
				if (elements[i] && elements[i].data.ind === ind) {
					this.setElementAsMask((this || _global).elem, elements[i]);
				}
				i += 1;
			}
			(this || _global).initialized = true;
		};
		SVGMatte3Effect.prototype.renderFrame = function () {
			if (!(this || _global).initialized) {
				this.initialize();
			}
		};
		function SVGEffects(elem2) {
			var i;
			var len = elem2.data.ef ? elem2.data.ef.length : 0;
			var filId = createElementID();
			var fil = filtersFactory.createFilter(filId, true);
			var count = 0;
			(this || _global).filters = [];
			var filterManager;
			for (i = 0; i < len; i += 1) {
				filterManager = null;
				if (elem2.data.ef[i].ty === 20) {
					count += 1;
					filterManager = new SVGTintFilter(
						fil,
						elem2.effectsManager.effectElements[i],
					);
				} else if (elem2.data.ef[i].ty === 21) {
					count += 1;
					filterManager = new SVGFillFilter(
						fil,
						elem2.effectsManager.effectElements[i],
					);
				} else if (elem2.data.ef[i].ty === 22) {
					filterManager = new SVGStrokeEffect(
						elem2,
						elem2.effectsManager.effectElements[i],
					);
				} else if (elem2.data.ef[i].ty === 23) {
					count += 1;
					filterManager = new SVGTritoneFilter(
						fil,
						elem2.effectsManager.effectElements[i],
					);
				} else if (elem2.data.ef[i].ty === 24) {
					count += 1;
					filterManager = new SVGProLevelsFilter(
						fil,
						elem2.effectsManager.effectElements[i],
					);
				} else if (elem2.data.ef[i].ty === 25) {
					count += 1;
					filterManager = new SVGDropShadowEffect(
						fil,
						elem2.effectsManager.effectElements[i],
					);
				} else if (elem2.data.ef[i].ty === 28) {
					filterManager = new SVGMatte3Effect(
						fil,
						elem2.effectsManager.effectElements[i],
						elem2,
					);
				} else if (elem2.data.ef[i].ty === 29) {
					count += 1;
					filterManager = new SVGGaussianBlurEffect(
						fil,
						elem2.effectsManager.effectElements[i],
					);
				}
				if (filterManager) {
					(this || _global).filters.push(filterManager);
				}
			}
			if (count) {
				elem2.globalData.defs.appendChild(fil);
				elem2.layerElement.setAttribute(
					"filter",
					"url(" + locationHref + "#" + filId + ")",
				);
			}
			if ((this || _global).filters.length) {
				elem2.addRenderableComponent(this || _global);
			}
		}
		SVGEffects.prototype.renderFrame = function (_isFirstFrame) {
			var i;
			var len = (this || _global).filters.length;
			for (i = 0; i < len; i += 1) {
				(this || _global).filters[i].renderFrame(_isFirstFrame);
			}
		};
		function CVContextData() {
			(this || _global).saved = [];
			(this || _global).cArrPos = 0;
			(this || _global).cTr = new Matrix();
			(this || _global).cO = 1;
			var i;
			var len = 15;
			(this || _global).savedOp = createTypedArray("float32", len);
			for (i = 0; i < len; i += 1) {
				(this || _global).saved[i] = createTypedArray("float32", 16);
			}
			(this || _global)._length = len;
		}
		CVContextData.prototype.duplicate = function () {
			var newLength = (this || _global)._length * 2;
			var currentSavedOp = (this || _global).savedOp;
			(this || _global).savedOp = createTypedArray("float32", newLength);
			(this || _global).savedOp.set(currentSavedOp);
			var i = 0;
			for (i = (this || _global)._length; i < newLength; i += 1) {
				(this || _global).saved[i] = createTypedArray("float32", 16);
			}
			(this || _global)._length = newLength;
		};
		CVContextData.prototype.reset = function () {
			(this || _global).cArrPos = 0;
			(this || _global).cTr.reset();
			(this || _global).cO = 1;
		};
		function CVBaseElement() {}
		CVBaseElement.prototype = {
			createElements: function () {},
			initRendererElement: function () {},
			createContainerElements: function () {
				(this || _global).canvasContext = (
					this || _global
				).globalData.canvasContext;
				(this || _global).renderableEffectsManager = new CVEffects(
					this || _global,
				);
			},
			createContent: function () {},
			setBlendMode: function () {
				var globalData2 = (this || _global).globalData;
				if (globalData2.blendMode !== (this || _global).data.bm) {
					globalData2.blendMode = (this || _global).data.bm;
					var blendModeValue = getBlendMode((this || _global).data.bm);
					globalData2.canvasContext.globalCompositeOperation = blendModeValue;
				}
			},
			createRenderableComponents: function () {
				(this || _global).maskManager = new CVMaskElement(
					(this || _global).data,
					this || _global,
				);
			},
			hideElement: function () {
				if (
					!(this || _global).hidden &&
					(!(this || _global).isInRange || (this || _global).isTransparent)
				) {
					(this || _global).hidden = true;
				}
			},
			showElement: function () {
				if ((this || _global).isInRange && !(this || _global).isTransparent) {
					(this || _global).hidden = false;
					(this || _global)._isFirstFrame = true;
					(this || _global).maskManager._isFirstFrame = true;
				}
			},
			renderFrame: function () {
				if ((this || _global).hidden || (this || _global).data.hd) {
					return;
				}
				this.renderTransform();
				this.renderRenderable();
				this.setBlendMode();
				var forceRealStack = (this || _global).data.ty === 0;
				(this || _global).globalData.renderer.save(forceRealStack);
				(this || _global).globalData.renderer.ctxTransform(
					(this || _global).finalTransform.mat.props,
				);
				(this || _global).globalData.renderer.ctxOpacity(
					(this || _global).finalTransform.mProp.o.v,
				);
				this.renderInnerContent();
				(this || _global).globalData.renderer.restore(forceRealStack);
				if ((this || _global).maskManager.hasMasks) {
					(this || _global).globalData.renderer.restore(true);
				}
				if ((this || _global)._isFirstFrame) {
					(this || _global)._isFirstFrame = false;
				}
			},
			destroy: function () {
				(this || _global).canvasContext = null;
				(this || _global).data = null;
				(this || _global).globalData = null;
				(this || _global).maskManager.destroy();
			},
			mHelper: new Matrix(),
		};
		CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
		CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;
		function CVImageElement(data2, globalData2, comp2) {
			(this || _global).assetData = globalData2.getAssetData(data2.refId);
			(this || _global).img = globalData2.imageLoader.getAsset(
				(this || _global).assetData,
			);
			this.initElement(data2, globalData2, comp2);
		}
		extendPrototype(
			[
				BaseElement,
				TransformElement,
				CVBaseElement,
				HierarchyElement,
				FrameElement,
				RenderableElement,
			],
			CVImageElement,
		);
		CVImageElement.prototype.initElement =
			SVGShapeElement.prototype.initElement;
		CVImageElement.prototype.prepareFrame =
			IImageElement.prototype.prepareFrame;
		CVImageElement.prototype.createContent = function () {
			if (
				(this || _global).img.width &&
				((this || _global).assetData.w !== (this || _global).img.width ||
					(this || _global).assetData.h !== (this || _global).img.height)
			) {
				var canvas = createTag("canvas");
				canvas.width = (this || _global).assetData.w;
				canvas.height = (this || _global).assetData.h;
				var ctx = canvas.getContext("2d");
				var imgW = (this || _global).img.width;
				var imgH = (this || _global).img.height;
				var imgRel = imgW / imgH;
				var canvasRel =
					(this || _global).assetData.w / (this || _global).assetData.h;
				var widthCrop;
				var heightCrop;
				var par =
					(this || _global).assetData.pr ||
					(this || _global).globalData.renderConfig.imagePreserveAspectRatio;
				if (
					(imgRel > canvasRel && par === "xMidYMid slice") ||
					(imgRel < canvasRel && par !== "xMidYMid slice")
				) {
					heightCrop = imgH;
					widthCrop = heightCrop * canvasRel;
				} else {
					widthCrop = imgW;
					heightCrop = widthCrop / canvasRel;
				}
				ctx.drawImage(
					(this || _global).img,
					(imgW - widthCrop) / 2,
					(imgH - heightCrop) / 2,
					widthCrop,
					heightCrop,
					0,
					0,
					(this || _global).assetData.w,
					(this || _global).assetData.h,
				);
				(this || _global).img = canvas;
			}
		};
		CVImageElement.prototype.renderInnerContent = function () {
			(this || _global).canvasContext.drawImage((this || _global).img, 0, 0);
		};
		CVImageElement.prototype.destroy = function () {
			(this || _global).img = null;
		};
		function CVCompElement(data2, globalData2, comp2) {
			(this || _global).completeLayers = false;
			(this || _global).layers = data2.layers;
			(this || _global).pendingElements = [];
			(this || _global).elements = createSizedArray(
				(this || _global).layers.length,
			);
			this.initElement(data2, globalData2, comp2);
			(this || _global).tm = data2.tm
				? PropertyFactory.getProp(
						this || _global,
						data2.tm,
						0,
						globalData2.frameRate,
						this || _global,
					)
				: {
						_placeholder: true,
					};
		}
		extendPrototype(
			[CanvasRenderer, ICompElement, CVBaseElement],
			CVCompElement,
		);
		CVCompElement.prototype.renderInnerContent = function () {
			var ctx = (this || _global).canvasContext;
			ctx.beginPath();
			ctx.moveTo(0, 0);
			ctx.lineTo((this || _global).data.w, 0);
			ctx.lineTo((this || _global).data.w, (this || _global).data.h);
			ctx.lineTo(0, (this || _global).data.h);
			ctx.lineTo(0, 0);
			ctx.clip();
			var i;
			var len = (this || _global).layers.length;
			for (i = len - 1; i >= 0; i -= 1) {
				if ((this || _global).completeLayers || (this || _global).elements[i]) {
					(this || _global).elements[i].renderFrame();
				}
			}
		};
		CVCompElement.prototype.destroy = function () {
			var i;
			var len = (this || _global).layers.length;
			for (i = len - 1; i >= 0; i -= 1) {
				if ((this || _global).elements[i]) {
					(this || _global).elements[i].destroy();
				}
			}
			(this || _global).layers = null;
			(this || _global).elements = null;
		};
		function CVMaskElement(data2, element) {
			(this || _global).data = data2;
			(this || _global).element = element;
			(this || _global).masksProperties =
				(this || _global).data.masksProperties || [];
			(this || _global).viewData = createSizedArray(
				(this || _global).masksProperties.length,
			);
			var i;
			var len = (this || _global).masksProperties.length;
			var hasMasks = false;
			for (i = 0; i < len; i += 1) {
				if ((this || _global).masksProperties[i].mode !== "n") {
					hasMasks = true;
				}
				(this || _global).viewData[i] = ShapePropertyFactory.getShapeProp(
					(this || _global).element,
					(this || _global).masksProperties[i],
					3,
				);
			}
			(this || _global).hasMasks = hasMasks;
			if (hasMasks) {
				(this || _global).element.addRenderableComponent(this || _global);
			}
		}
		CVMaskElement.prototype.renderFrame = function () {
			if (!(this || _global).hasMasks) {
				return;
			}
			var transform2 = (this || _global).element.finalTransform.mat;
			var ctx = (this || _global).element.canvasContext;
			var i;
			var len = (this || _global).masksProperties.length;
			var pt;
			var pts;
			var data2;
			ctx.beginPath();
			for (i = 0; i < len; i += 1) {
				if ((this || _global).masksProperties[i].mode !== "n") {
					if ((this || _global).masksProperties[i].inv) {
						ctx.moveTo(0, 0);
						ctx.lineTo((this || _global).element.globalData.compSize.w, 0);
						ctx.lineTo(
							(this || _global).element.globalData.compSize.w,
							(this || _global).element.globalData.compSize.h,
						);
						ctx.lineTo(0, (this || _global).element.globalData.compSize.h);
						ctx.lineTo(0, 0);
					}
					data2 = (this || _global).viewData[i].v;
					pt = transform2.applyToPointArray(data2.v[0][0], data2.v[0][1], 0);
					ctx.moveTo(pt[0], pt[1]);
					var j;
					var jLen = data2._length;
					for (j = 1; j < jLen; j += 1) {
						pts = transform2.applyToTriplePoints(
							data2.o[j - 1],
							data2.i[j],
							data2.v[j],
						);
						ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
					}
					pts = transform2.applyToTriplePoints(
						data2.o[j - 1],
						data2.i[0],
						data2.v[0],
					);
					ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
				}
			}
			(this || _global).element.globalData.renderer.save(true);
			ctx.clip();
		};
		CVMaskElement.prototype.getMaskProperty =
			MaskElement.prototype.getMaskProperty;
		CVMaskElement.prototype.destroy = function () {
			(this || _global).element = null;
		};
		function CVShapeElement(data2, globalData2, comp2) {
			(this || _global).shapes = [];
			(this || _global).shapesData = data2.shapes;
			(this || _global).stylesList = [];
			(this || _global).itemsData = [];
			(this || _global).prevViewData = [];
			(this || _global).shapeModifiers = [];
			(this || _global).processedElements = [];
			(this || _global).transformsManager = new ShapeTransformManager();
			this.initElement(data2, globalData2, comp2);
		}
		extendPrototype(
			[
				BaseElement,
				TransformElement,
				CVBaseElement,
				IShapeElement,
				HierarchyElement,
				FrameElement,
				RenderableElement,
			],
			CVShapeElement,
		);
		CVShapeElement.prototype.initElement =
			RenderableDOMElement.prototype.initElement;
		CVShapeElement.prototype.transformHelper = {
			opacity: 1,
			_opMdf: false,
		};
		CVShapeElement.prototype.dashResetter = [];
		CVShapeElement.prototype.createContent = function () {
			this.searchShapes(
				(this || _global).shapesData,
				(this || _global).itemsData,
				(this || _global).prevViewData,
				true,
				[],
			);
		};
		CVShapeElement.prototype.createStyleElement = function (data2, transforms) {
			var styleElem = {
				data: data2,
				type: data2.ty,
				preTransforms: (this || _global).transformsManager.addTransformSequence(
					transforms,
				),
				transforms: [],
				elements: [],
				closed: data2.hd === true,
			};
			var elementData = {};
			if (data2.ty === "fl" || data2.ty === "st") {
				elementData.c = PropertyFactory.getProp(
					this || _global,
					data2.c,
					1,
					255,
					this || _global,
				);
				if (!elementData.c.k) {
					styleElem.co =
						"rgb(" +
						bmFloor(elementData.c.v[0]) +
						"," +
						bmFloor(elementData.c.v[1]) +
						"," +
						bmFloor(elementData.c.v[2]) +
						")";
				}
			} else if (data2.ty === "gf" || data2.ty === "gs") {
				elementData.s = PropertyFactory.getProp(
					this || _global,
					data2.s,
					1,
					null,
					this || _global,
				);
				elementData.e = PropertyFactory.getProp(
					this || _global,
					data2.e,
					1,
					null,
					this || _global,
				);
				elementData.h = PropertyFactory.getProp(
					this || _global,
					data2.h || {
						k: 0,
					},
					0,
					0.01,
					this || _global,
				);
				elementData.a = PropertyFactory.getProp(
					this || _global,
					data2.a || {
						k: 0,
					},
					0,
					degToRads,
					this || _global,
				);
				elementData.g = new GradientProperty(
					this || _global,
					data2.g,
					this || _global,
				);
			}
			elementData.o = PropertyFactory.getProp(
				this || _global,
				data2.o,
				0,
				0.01,
				this || _global,
			);
			if (data2.ty === "st" || data2.ty === "gs") {
				styleElem.lc = (this || _global).lcEnum[data2.lc] || "round";
				styleElem.lj = (this || _global).ljEnum[data2.lj] || "round";
				if (data2.lj == 1) {
					styleElem.ml = data2.ml;
				}
				elementData.w = PropertyFactory.getProp(
					this || _global,
					data2.w,
					0,
					null,
					this || _global,
				);
				if (!elementData.w.k) {
					styleElem.wi = elementData.w.v;
				}
				if (data2.d) {
					var d = new DashProperty(
						this || _global,
						data2.d,
						"canvas",
						this || _global,
					);
					elementData.d = d;
					if (!elementData.d.k) {
						styleElem.da = elementData.d.dashArray;
						styleElem.do = elementData.d.dashoffset[0];
					}
				}
			} else {
				styleElem.r = data2.r === 2 ? "evenodd" : "nonzero";
			}
			(this || _global).stylesList.push(styleElem);
			elementData.style = styleElem;
			return elementData;
		};
		CVShapeElement.prototype.createGroupElement = function () {
			var elementData = {
				it: [],
				prevViewData: [],
			};
			return elementData;
		};
		CVShapeElement.prototype.createTransformElement = function (data2) {
			var elementData = {
				transform: {
					opacity: 1,
					_opMdf: false,
					key: (this || _global).transformsManager.getNewKey(),
					op: PropertyFactory.getProp(
						this || _global,
						data2.o,
						0,
						0.01,
						this || _global,
					),
					mProps: TransformPropertyFactory.getTransformProperty(
						this || _global,
						data2,
						this || _global,
					),
				},
			};
			return elementData;
		};
		CVShapeElement.prototype.createShapeElement = function (data2) {
			var elementData = new CVShapeData(
				this || _global,
				data2,
				(this || _global).stylesList,
				(this || _global).transformsManager,
			);
			(this || _global).shapes.push(elementData);
			this.addShapeToModifiers(elementData);
			return elementData;
		};
		CVShapeElement.prototype.reloadShapes = function () {
			(this || _global)._isFirstFrame = true;
			var i;
			var len = (this || _global).itemsData.length;
			for (i = 0; i < len; i += 1) {
				(this || _global).prevViewData[i] = (this || _global).itemsData[i];
			}
			this.searchShapes(
				(this || _global).shapesData,
				(this || _global).itemsData,
				(this || _global).prevViewData,
				true,
				[],
			);
			len = (this || _global).dynamicProperties.length;
			for (i = 0; i < len; i += 1) {
				(this || _global).dynamicProperties[i].getValue();
			}
			this.renderModifiers();
			(this || _global).transformsManager.processSequences(
				(this || _global)._isFirstFrame,
			);
		};
		CVShapeElement.prototype.addTransformToStyleList = function (transform2) {
			var i;
			var len = (this || _global).stylesList.length;
			for (i = 0; i < len; i += 1) {
				if (!(this || _global).stylesList[i].closed) {
					(this || _global).stylesList[i].transforms.push(transform2);
				}
			}
		};
		CVShapeElement.prototype.removeTransformFromStyleList = function () {
			var i;
			var len = (this || _global).stylesList.length;
			for (i = 0; i < len; i += 1) {
				if (!(this || _global).stylesList[i].closed) {
					(this || _global).stylesList[i].transforms.pop();
				}
			}
		};
		CVShapeElement.prototype.closeStyles = function (styles) {
			var i;
			var len = styles.length;
			for (i = 0; i < len; i += 1) {
				styles[i].closed = true;
			}
		};
		CVShapeElement.prototype.searchShapes = function (
			arr,
			itemsData,
			prevViewData,
			shouldRender,
			transforms,
		) {
			var i;
			var len = arr.length - 1;
			var j;
			var jLen;
			var ownStyles = [];
			var ownModifiers = [];
			var processedPos;
			var modifier;
			var currentTransform;
			var ownTransforms = [].concat(transforms);
			for (i = len; i >= 0; i -= 1) {
				processedPos = this.searchProcessedElement(arr[i]);
				if (!processedPos) {
					arr[i]._shouldRender = shouldRender;
				} else {
					itemsData[i] = prevViewData[processedPos - 1];
				}
				if (
					arr[i].ty === "fl" ||
					arr[i].ty === "st" ||
					arr[i].ty === "gf" ||
					arr[i].ty === "gs"
				) {
					if (!processedPos) {
						itemsData[i] = this.createStyleElement(arr[i], ownTransforms);
					} else {
						itemsData[i].style.closed = false;
					}
					ownStyles.push(itemsData[i].style);
				} else if (arr[i].ty === "gr") {
					if (!processedPos) {
						itemsData[i] = this.createGroupElement(arr[i]);
					} else {
						jLen = itemsData[i].it.length;
						for (j = 0; j < jLen; j += 1) {
							itemsData[i].prevViewData[j] = itemsData[i].it[j];
						}
					}
					this.searchShapes(
						arr[i].it,
						itemsData[i].it,
						itemsData[i].prevViewData,
						shouldRender,
						ownTransforms,
					);
				} else if (arr[i].ty === "tr") {
					if (!processedPos) {
						currentTransform = this.createTransformElement(arr[i]);
						itemsData[i] = currentTransform;
					}
					ownTransforms.push(itemsData[i]);
					this.addTransformToStyleList(itemsData[i]);
				} else if (
					arr[i].ty === "sh" ||
					arr[i].ty === "rc" ||
					arr[i].ty === "el" ||
					arr[i].ty === "sr"
				) {
					if (!processedPos) {
						itemsData[i] = this.createShapeElement(arr[i]);
					}
				} else if (
					arr[i].ty === "tm" ||
					arr[i].ty === "rd" ||
					arr[i].ty === "pb"
				) {
					if (!processedPos) {
						modifier = ShapeModifiers.getModifier(arr[i].ty);
						modifier.init(this || _global, arr[i]);
						itemsData[i] = modifier;
						(this || _global).shapeModifiers.push(modifier);
					} else {
						modifier = itemsData[i];
						modifier.closed = false;
					}
					ownModifiers.push(modifier);
				} else if (arr[i].ty === "rp") {
					if (!processedPos) {
						modifier = ShapeModifiers.getModifier(arr[i].ty);
						itemsData[i] = modifier;
						modifier.init(this || _global, arr, i, itemsData);
						(this || _global).shapeModifiers.push(modifier);
						shouldRender = false;
					} else {
						modifier = itemsData[i];
						modifier.closed = true;
					}
					ownModifiers.push(modifier);
				}
				this.addProcessedElement(arr[i], i + 1);
			}
			this.removeTransformFromStyleList();
			this.closeStyles(ownStyles);
			len = ownModifiers.length;
			for (i = 0; i < len; i += 1) {
				ownModifiers[i].closed = true;
			}
		};
		CVShapeElement.prototype.renderInnerContent = function () {
			(this || _global).transformHelper.opacity = 1;
			(this || _global).transformHelper._opMdf = false;
			this.renderModifiers();
			(this || _global).transformsManager.processSequences(
				(this || _global)._isFirstFrame,
			);
			this.renderShape(
				(this || _global).transformHelper,
				(this || _global).shapesData,
				(this || _global).itemsData,
				true,
			);
		};
		CVShapeElement.prototype.renderShapeTransform = function (
			parentTransform,
			groupTransform,
		) {
			if (
				parentTransform._opMdf ||
				groupTransform.op._mdf ||
				(this || _global)._isFirstFrame
			) {
				groupTransform.opacity = parentTransform.opacity;
				groupTransform.opacity *= groupTransform.op.v;
				groupTransform._opMdf = true;
			}
		};
		CVShapeElement.prototype.drawLayer = function () {
			var i;
			var len = (this || _global).stylesList.length;
			var j;
			var jLen;
			var k;
			var kLen;
			var elems;
			var nodes;
			var renderer2 = (this || _global).globalData.renderer;
			var ctx = (this || _global).globalData.canvasContext;
			var type;
			var currentStyle;
			for (i = 0; i < len; i += 1) {
				currentStyle = (this || _global).stylesList[i];
				type = currentStyle.type;
				if (
					!(
						((type === "st" || type === "gs") && currentStyle.wi === 0) ||
						!currentStyle.data._shouldRender ||
						currentStyle.coOp === 0 ||
						(this || _global).globalData.currentGlobalAlpha === 0
					)
				) {
					renderer2.save();
					elems = currentStyle.elements;
					if (type === "st" || type === "gs") {
						ctx.strokeStyle =
							type === "st" ? currentStyle.co : currentStyle.grd;
						ctx.lineWidth = currentStyle.wi;
						ctx.lineCap = currentStyle.lc;
						ctx.lineJoin = currentStyle.lj;
						ctx.miterLimit = currentStyle.ml || 0;
					} else {
						ctx.fillStyle = type === "fl" ? currentStyle.co : currentStyle.grd;
					}
					renderer2.ctxOpacity(currentStyle.coOp);
					if (type !== "st" && type !== "gs") {
						ctx.beginPath();
					}
					renderer2.ctxTransform(
						currentStyle.preTransforms.finalTransform.props,
					);
					jLen = elems.length;
					for (j = 0; j < jLen; j += 1) {
						if (type === "st" || type === "gs") {
							ctx.beginPath();
							if (currentStyle.da) {
								ctx.setLineDash(currentStyle.da);
								ctx.lineDashOffset = currentStyle.do;
							}
						}
						nodes = elems[j].trNodes;
						kLen = nodes.length;
						for (k = 0; k < kLen; k += 1) {
							if (nodes[k].t === "m") {
								ctx.moveTo(nodes[k].p[0], nodes[k].p[1]);
							} else if (nodes[k].t === "c") {
								ctx.bezierCurveTo(
									nodes[k].pts[0],
									nodes[k].pts[1],
									nodes[k].pts[2],
									nodes[k].pts[3],
									nodes[k].pts[4],
									nodes[k].pts[5],
								);
							} else {
								ctx.closePath();
							}
						}
						if (type === "st" || type === "gs") {
							ctx.stroke();
							if (currentStyle.da) {
								ctx.setLineDash((this || _global).dashResetter);
							}
						}
					}
					if (type !== "st" && type !== "gs") {
						ctx.fill(currentStyle.r);
					}
					renderer2.restore();
				}
			}
		};
		CVShapeElement.prototype.renderShape = function (
			parentTransform,
			items,
			data2,
			isMain,
		) {
			var i;
			var len = items.length - 1;
			var groupTransform;
			groupTransform = parentTransform;
			for (i = len; i >= 0; i -= 1) {
				if (items[i].ty === "tr") {
					groupTransform = data2[i].transform;
					this.renderShapeTransform(parentTransform, groupTransform);
				} else if (
					items[i].ty === "sh" ||
					items[i].ty === "el" ||
					items[i].ty === "rc" ||
					items[i].ty === "sr"
				) {
					this.renderPath(items[i], data2[i]);
				} else if (items[i].ty === "fl") {
					this.renderFill(items[i], data2[i], groupTransform);
				} else if (items[i].ty === "st") {
					this.renderStroke(items[i], data2[i], groupTransform);
				} else if (items[i].ty === "gf" || items[i].ty === "gs") {
					this.renderGradientFill(items[i], data2[i], groupTransform);
				} else if (items[i].ty === "gr") {
					this.renderShape(groupTransform, items[i].it, data2[i].it);
				} else if (items[i].ty === "tm") {
				}
			}
			if (isMain) {
				this.drawLayer();
			}
		};
		CVShapeElement.prototype.renderStyledShape = function (styledShape, shape) {
			if (
				(this || _global)._isFirstFrame ||
				shape._mdf ||
				styledShape.transforms._mdf
			) {
				var shapeNodes = styledShape.trNodes;
				var paths = shape.paths;
				var i;
				var len;
				var j;
				var jLen = paths._length;
				shapeNodes.length = 0;
				var groupTransformMat = styledShape.transforms.finalTransform;
				for (j = 0; j < jLen; j += 1) {
					var pathNodes = paths.shapes[j];
					if (pathNodes && pathNodes.v) {
						len = pathNodes._length;
						for (i = 1; i < len; i += 1) {
							if (i === 1) {
								shapeNodes.push({
									t: "m",
									p: groupTransformMat.applyToPointArray(
										pathNodes.v[0][0],
										pathNodes.v[0][1],
										0,
									),
								});
							}
							shapeNodes.push({
								t: "c",
								pts: groupTransformMat.applyToTriplePoints(
									pathNodes.o[i - 1],
									pathNodes.i[i],
									pathNodes.v[i],
								),
							});
						}
						if (len === 1) {
							shapeNodes.push({
								t: "m",
								p: groupTransformMat.applyToPointArray(
									pathNodes.v[0][0],
									pathNodes.v[0][1],
									0,
								),
							});
						}
						if (pathNodes.c && len) {
							shapeNodes.push({
								t: "c",
								pts: groupTransformMat.applyToTriplePoints(
									pathNodes.o[i - 1],
									pathNodes.i[0],
									pathNodes.v[0],
								),
							});
							shapeNodes.push({
								t: "z",
							});
						}
					}
				}
				styledShape.trNodes = shapeNodes;
			}
		};
		CVShapeElement.prototype.renderPath = function (pathData, itemData) {
			if (pathData.hd !== true && pathData._shouldRender) {
				var i;
				var len = itemData.styledShapes.length;
				for (i = 0; i < len; i += 1) {
					this.renderStyledShape(itemData.styledShapes[i], itemData.sh);
				}
			}
		};
		CVShapeElement.prototype.renderFill = function (
			styleData,
			itemData,
			groupTransform,
		) {
			var styleElem = itemData.style;
			if (itemData.c._mdf || (this || _global)._isFirstFrame) {
				styleElem.co =
					"rgb(" +
					bmFloor(itemData.c.v[0]) +
					"," +
					bmFloor(itemData.c.v[1]) +
					"," +
					bmFloor(itemData.c.v[2]) +
					")";
			}
			if (
				itemData.o._mdf ||
				groupTransform._opMdf ||
				(this || _global)._isFirstFrame
			) {
				styleElem.coOp = itemData.o.v * groupTransform.opacity;
			}
		};
		CVShapeElement.prototype.renderGradientFill = function (
			styleData,
			itemData,
			groupTransform,
		) {
			var styleElem = itemData.style;
			var grd;
			if (
				!styleElem.grd ||
				itemData.g._mdf ||
				itemData.s._mdf ||
				itemData.e._mdf ||
				(styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf))
			) {
				var ctx = (this || _global).globalData.canvasContext;
				var pt1 = itemData.s.v;
				var pt2 = itemData.e.v;
				if (styleData.t === 1) {
					grd = ctx.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);
				} else {
					var rad = Math.sqrt(
						Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2),
					);
					var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
					var percent = itemData.h.v;
					if (percent >= 1) {
						percent = 0.99;
					} else if (percent <= -1) {
						percent = -0.99;
					}
					var dist = rad * percent;
					var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
					var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
					grd = ctx.createRadialGradient(x, y, 0, pt1[0], pt1[1], rad);
				}
				var i;
				var len = styleData.g.p;
				var cValues = itemData.g.c;
				var opacity = 1;
				for (i = 0; i < len; i += 1) {
					if (itemData.g._hasOpacity && itemData.g._collapsable) {
						opacity = itemData.g.o[i * 2 + 1];
					}
					grd.addColorStop(
						cValues[i * 4] / 100,
						"rgba(" +
							cValues[i * 4 + 1] +
							"," +
							cValues[i * 4 + 2] +
							"," +
							cValues[i * 4 + 3] +
							"," +
							opacity +
							")",
					);
				}
				styleElem.grd = grd;
			}
			styleElem.coOp = itemData.o.v * groupTransform.opacity;
		};
		CVShapeElement.prototype.renderStroke = function (
			styleData,
			itemData,
			groupTransform,
		) {
			var styleElem = itemData.style;
			var d = itemData.d;
			if (d && (d._mdf || (this || _global)._isFirstFrame)) {
				styleElem.da = d.dashArray;
				styleElem.do = d.dashoffset[0];
			}
			if (itemData.c._mdf || (this || _global)._isFirstFrame) {
				styleElem.co =
					"rgb(" +
					bmFloor(itemData.c.v[0]) +
					"," +
					bmFloor(itemData.c.v[1]) +
					"," +
					bmFloor(itemData.c.v[2]) +
					")";
			}
			if (
				itemData.o._mdf ||
				groupTransform._opMdf ||
				(this || _global)._isFirstFrame
			) {
				styleElem.coOp = itemData.o.v * groupTransform.opacity;
			}
			if (itemData.w._mdf || (this || _global)._isFirstFrame) {
				styleElem.wi = itemData.w.v;
			}
		};
		CVShapeElement.prototype.destroy = function () {
			(this || _global).shapesData = null;
			(this || _global).globalData = null;
			(this || _global).canvasContext = null;
			(this || _global).stylesList.length = 0;
			(this || _global).itemsData.length = 0;
		};
		function CVSolidElement(data2, globalData2, comp2) {
			this.initElement(data2, globalData2, comp2);
		}
		extendPrototype(
			[
				BaseElement,
				TransformElement,
				CVBaseElement,
				HierarchyElement,
				FrameElement,
				RenderableElement,
			],
			CVSolidElement,
		);
		CVSolidElement.prototype.initElement =
			SVGShapeElement.prototype.initElement;
		CVSolidElement.prototype.prepareFrame =
			IImageElement.prototype.prepareFrame;
		CVSolidElement.prototype.renderInnerContent = function () {
			var ctx = (this || _global).canvasContext;
			ctx.fillStyle = (this || _global).data.sc;
			ctx.fillRect(0, 0, (this || _global).data.sw, (this || _global).data.sh);
		};
		function CVTextElement(data2, globalData2, comp2) {
			(this || _global).textSpans = [];
			(this || _global).yOffset = 0;
			(this || _global).fillColorAnim = false;
			(this || _global).strokeColorAnim = false;
			(this || _global).strokeWidthAnim = false;
			(this || _global).stroke = false;
			(this || _global).fill = false;
			(this || _global).justifyOffset = 0;
			(this || _global).currentRender = null;
			(this || _global).renderType = "canvas";
			(this || _global).values = {
				fill: "rgba(0,0,0,0)",
				stroke: "rgba(0,0,0,0)",
				sWidth: 0,
				fValue: "",
			};
			this.initElement(data2, globalData2, comp2);
		}
		extendPrototype(
			[
				BaseElement,
				TransformElement,
				CVBaseElement,
				HierarchyElement,
				FrameElement,
				RenderableElement,
				ITextElement,
			],
			CVTextElement,
		);
		CVTextElement.prototype.tHelper = createTag("canvas").getContext("2d");
		CVTextElement.prototype.buildNewText = function () {
			var documentData = (this || _global).textProperty.currentData;
			(this || _global).renderedLetters = createSizedArray(
				documentData.l ? documentData.l.length : 0,
			);
			var hasFill = false;
			if (documentData.fc) {
				hasFill = true;
				(this || _global).values.fill = this.buildColor(documentData.fc);
			} else {
				(this || _global).values.fill = "rgba(0,0,0,0)";
			}
			(this || _global).fill = hasFill;
			var hasStroke = false;
			if (documentData.sc) {
				hasStroke = true;
				(this || _global).values.stroke = this.buildColor(documentData.sc);
				(this || _global).values.sWidth = documentData.sw;
			}
			var fontData = (this || _global).globalData.fontManager.getFontByName(
				documentData.f,
			);
			var i;
			var len;
			var letters = documentData.l;
			var matrixHelper = (this || _global).mHelper;
			(this || _global).stroke = hasStroke;
			(this || _global).values.fValue =
				documentData.finalSize +
				"px " +
				(this || _global).globalData.fontManager.getFontByName(documentData.f)
					.fFamily;
			len = documentData.finalText.length;
			var charData;
			var shapeData;
			var k;
			var kLen;
			var shapes;
			var j;
			var jLen;
			var pathNodes;
			var commands;
			var pathArr;
			var singleShape = (this || _global).data.singleShape;
			var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
			var xPos = 0;
			var yPos = 0;
			var firstLine = true;
			var cnt = 0;
			for (i = 0; i < len; i += 1) {
				charData = (this || _global).globalData.fontManager.getCharData(
					documentData.finalText[i],
					fontData.fStyle,
					(this || _global).globalData.fontManager.getFontByName(documentData.f)
						.fFamily,
				);
				shapeData = (charData && charData.data) || {};
				matrixHelper.reset();
				if (singleShape && letters[i].n) {
					xPos = -trackingOffset;
					yPos += documentData.yOffset;
					yPos += firstLine ? 1 : 0;
					firstLine = false;
				}
				shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
				jLen = shapes.length;
				matrixHelper.scale(
					documentData.finalSize / 100,
					documentData.finalSize / 100,
				);
				if (singleShape) {
					this.applyTextPropertiesToMatrix(
						documentData,
						matrixHelper,
						letters[i].line,
						xPos,
						yPos,
					);
				}
				commands = createSizedArray(jLen);
				for (j = 0; j < jLen; j += 1) {
					kLen = shapes[j].ks.k.i.length;
					pathNodes = shapes[j].ks.k;
					pathArr = [];
					for (k = 1; k < kLen; k += 1) {
						if (k === 1) {
							pathArr.push(
								matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0),
								matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0),
							);
						}
						pathArr.push(
							matrixHelper.applyToX(
								pathNodes.o[k - 1][0],
								pathNodes.o[k - 1][1],
								0,
							),
							matrixHelper.applyToY(
								pathNodes.o[k - 1][0],
								pathNodes.o[k - 1][1],
								0,
							),
							matrixHelper.applyToX(pathNodes.i[k][0], pathNodes.i[k][1], 0),
							matrixHelper.applyToY(pathNodes.i[k][0], pathNodes.i[k][1], 0),
							matrixHelper.applyToX(pathNodes.v[k][0], pathNodes.v[k][1], 0),
							matrixHelper.applyToY(pathNodes.v[k][0], pathNodes.v[k][1], 0),
						);
					}
					pathArr.push(
						matrixHelper.applyToX(
							pathNodes.o[k - 1][0],
							pathNodes.o[k - 1][1],
							0,
						),
						matrixHelper.applyToY(
							pathNodes.o[k - 1][0],
							pathNodes.o[k - 1][1],
							0,
						),
						matrixHelper.applyToX(pathNodes.i[0][0], pathNodes.i[0][1], 0),
						matrixHelper.applyToY(pathNodes.i[0][0], pathNodes.i[0][1], 0),
						matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0),
						matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0),
					);
					commands[j] = pathArr;
				}
				if (singleShape) {
					xPos += letters[i].l;
					xPos += trackingOffset;
				}
				if ((this || _global).textSpans[cnt]) {
					(this || _global).textSpans[cnt].elem = commands;
				} else {
					(this || _global).textSpans[cnt] = {
						elem: commands,
					};
				}
				cnt += 1;
			}
		};
		CVTextElement.prototype.renderInnerContent = function () {
			var ctx = (this || _global).canvasContext;
			ctx.font = (this || _global).values.fValue;
			ctx.lineCap = "butt";
			ctx.lineJoin = "miter";
			ctx.miterLimit = 4;
			if (!(this || _global).data.singleShape) {
				(this || _global).textAnimator.getMeasures(
					(this || _global).textProperty.currentData,
					(this || _global).lettersChangedFlag,
				);
			}
			var i;
			var len;
			var j;
			var jLen;
			var k;
			var kLen;
			var renderedLetters = (this || _global).textAnimator.renderedLetters;
			var letters = (this || _global).textProperty.currentData.l;
			len = letters.length;
			var renderedLetter;
			var lastFill = null;
			var lastStroke = null;
			var lastStrokeW = null;
			var commands;
			var pathArr;
			for (i = 0; i < len; i += 1) {
				if (!letters[i].n) {
					renderedLetter = renderedLetters[i];
					if (renderedLetter) {
						(this || _global).globalData.renderer.save();
						(this || _global).globalData.renderer.ctxTransform(
							renderedLetter.p,
						);
						(this || _global).globalData.renderer.ctxOpacity(renderedLetter.o);
					}
					if ((this || _global).fill) {
						if (renderedLetter && renderedLetter.fc) {
							if (lastFill !== renderedLetter.fc) {
								lastFill = renderedLetter.fc;
								ctx.fillStyle = renderedLetter.fc;
							}
						} else if (lastFill !== (this || _global).values.fill) {
							lastFill = (this || _global).values.fill;
							ctx.fillStyle = (this || _global).values.fill;
						}
						commands = (this || _global).textSpans[i].elem;
						jLen = commands.length;
						(this || _global).globalData.canvasContext.beginPath();
						for (j = 0; j < jLen; j += 1) {
							pathArr = commands[j];
							kLen = pathArr.length;
							(this || _global).globalData.canvasContext.moveTo(
								pathArr[0],
								pathArr[1],
							);
							for (k = 2; k < kLen; k += 6) {
								(this || _global).globalData.canvasContext.bezierCurveTo(
									pathArr[k],
									pathArr[k + 1],
									pathArr[k + 2],
									pathArr[k + 3],
									pathArr[k + 4],
									pathArr[k + 5],
								);
							}
						}
						(this || _global).globalData.canvasContext.closePath();
						(this || _global).globalData.canvasContext.fill();
					}
					if ((this || _global).stroke) {
						if (renderedLetter && renderedLetter.sw) {
							if (lastStrokeW !== renderedLetter.sw) {
								lastStrokeW = renderedLetter.sw;
								ctx.lineWidth = renderedLetter.sw;
							}
						} else if (lastStrokeW !== (this || _global).values.sWidth) {
							lastStrokeW = (this || _global).values.sWidth;
							ctx.lineWidth = (this || _global).values.sWidth;
						}
						if (renderedLetter && renderedLetter.sc) {
							if (lastStroke !== renderedLetter.sc) {
								lastStroke = renderedLetter.sc;
								ctx.strokeStyle = renderedLetter.sc;
							}
						} else if (lastStroke !== (this || _global).values.stroke) {
							lastStroke = (this || _global).values.stroke;
							ctx.strokeStyle = (this || _global).values.stroke;
						}
						commands = (this || _global).textSpans[i].elem;
						jLen = commands.length;
						(this || _global).globalData.canvasContext.beginPath();
						for (j = 0; j < jLen; j += 1) {
							pathArr = commands[j];
							kLen = pathArr.length;
							(this || _global).globalData.canvasContext.moveTo(
								pathArr[0],
								pathArr[1],
							);
							for (k = 2; k < kLen; k += 6) {
								(this || _global).globalData.canvasContext.bezierCurveTo(
									pathArr[k],
									pathArr[k + 1],
									pathArr[k + 2],
									pathArr[k + 3],
									pathArr[k + 4],
									pathArr[k + 5],
								);
							}
						}
						(this || _global).globalData.canvasContext.closePath();
						(this || _global).globalData.canvasContext.stroke();
					}
					if (renderedLetter) {
						(this || _global).globalData.renderer.restore();
					}
				}
			}
		};
		function CVEffects() {}
		CVEffects.prototype.renderFrame = function () {};
		function HBaseElement() {}
		HBaseElement.prototype = {
			checkBlendMode: function () {},
			initRendererElement: function () {
				(this || _global).baseElement = createTag(
					(this || _global).data.tg || "div",
				);
				if ((this || _global).data.hasMask) {
					(this || _global).svgElement = createNS("svg");
					(this || _global).layerElement = createNS("g");
					(this || _global).maskedElement = (this || _global).layerElement;
					(this || _global).svgElement.appendChild(
						(this || _global).layerElement,
					);
					(this || _global).baseElement.appendChild(
						(this || _global).svgElement,
					);
				} else {
					(this || _global).layerElement = (this || _global).baseElement;
				}
				styleDiv((this || _global).baseElement);
			},
			createContainerElements: function () {
				(this || _global).renderableEffectsManager = new CVEffects(
					this || _global,
				);
				(this || _global).transformedElement = (this || _global).baseElement;
				(this || _global).maskedElement = (this || _global).layerElement;
				if ((this || _global).data.ln) {
					(this || _global).layerElement.setAttribute(
						"id",
						(this || _global).data.ln,
					);
				}
				if ((this || _global).data.cl) {
					(this || _global).layerElement.setAttribute(
						"class",
						(this || _global).data.cl,
					);
				}
				if ((this || _global).data.bm !== 0) {
					this.setBlendMode();
				}
			},
			renderElement: function () {
				var transformedElementStyle = (this || _global).transformedElement
					? (this || _global).transformedElement.style
					: {};
				if ((this || _global).finalTransform._matMdf) {
					var matrixValue = (this || _global).finalTransform.mat.toCSS();
					transformedElementStyle.transform = matrixValue;
					transformedElementStyle.webkitTransform = matrixValue;
				}
				if ((this || _global).finalTransform._opMdf) {
					transformedElementStyle.opacity = (
						this || _global
					).finalTransform.mProp.o.v;
				}
			},
			renderFrame: function () {
				if ((this || _global).data.hd || (this || _global).hidden) {
					return;
				}
				this.renderTransform();
				this.renderRenderable();
				this.renderElement();
				this.renderInnerContent();
				if ((this || _global)._isFirstFrame) {
					(this || _global)._isFirstFrame = false;
				}
			},
			destroy: function () {
				(this || _global).layerElement = null;
				(this || _global).transformedElement = null;
				if ((this || _global).matteElement) {
					(this || _global).matteElement = null;
				}
				if ((this || _global).maskManager) {
					(this || _global).maskManager.destroy();
					(this || _global).maskManager = null;
				}
			},
			createRenderableComponents: function () {
				(this || _global).maskManager = new MaskElement(
					(this || _global).data,
					this || _global,
					(this || _global).globalData,
				);
			},
			addEffects: function () {},
			setMatte: function () {},
		};
		HBaseElement.prototype.getBaseElement =
			SVGBaseElement.prototype.getBaseElement;
		HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
		HBaseElement.prototype.buildElementParenting =
			HybridRenderer.prototype.buildElementParenting;
		function HSolidElement(data2, globalData2, comp2) {
			this.initElement(data2, globalData2, comp2);
		}
		extendPrototype(
			[
				BaseElement,
				TransformElement,
				HBaseElement,
				HierarchyElement,
				FrameElement,
				RenderableDOMElement,
			],
			HSolidElement,
		);
		HSolidElement.prototype.createContent = function () {
			var rect;
			if ((this || _global).data.hasMask) {
				rect = createNS("rect");
				rect.setAttribute("width", (this || _global).data.sw);
				rect.setAttribute("height", (this || _global).data.sh);
				rect.setAttribute("fill", (this || _global).data.sc);
				(this || _global).svgElement.setAttribute(
					"width",
					(this || _global).data.sw,
				);
				(this || _global).svgElement.setAttribute(
					"height",
					(this || _global).data.sh,
				);
			} else {
				rect = createTag("div");
				rect.style.width = (this || _global).data.sw + "px";
				rect.style.height = (this || _global).data.sh + "px";
				rect.style.backgroundColor = (this || _global).data.sc;
			}
			(this || _global).layerElement.appendChild(rect);
		};
		function HCompElement(data2, globalData2, comp2) {
			(this || _global).layers = data2.layers;
			(this || _global).supports3d = !data2.hasMask;
			(this || _global).completeLayers = false;
			(this || _global).pendingElements = [];
			(this || _global).elements = (this || _global).layers
				? createSizedArray((this || _global).layers.length)
				: [];
			this.initElement(data2, globalData2, comp2);
			(this || _global).tm = data2.tm
				? PropertyFactory.getProp(
						this || _global,
						data2.tm,
						0,
						globalData2.frameRate,
						this || _global,
					)
				: {
						_placeholder: true,
					};
		}
		extendPrototype([HybridRenderer, ICompElement, HBaseElement], HCompElement);
		HCompElement.prototype._createBaseContainerElements =
			HCompElement.prototype.createContainerElements;
		HCompElement.prototype.createContainerElements = function () {
			this._createBaseContainerElements();
			if ((this || _global).data.hasMask) {
				(this || _global).svgElement.setAttribute(
					"width",
					(this || _global).data.w,
				);
				(this || _global).svgElement.setAttribute(
					"height",
					(this || _global).data.h,
				);
				(this || _global).transformedElement = (this || _global).baseElement;
			} else {
				(this || _global).transformedElement = (this || _global).layerElement;
			}
		};
		HCompElement.prototype.addTo3dContainer = function (elem2, pos) {
			var j = 0;
			var nextElement;
			while (j < pos) {
				if (
					(this || _global).elements[j] &&
					(this || _global).elements[j].getBaseElement
				) {
					nextElement = (this || _global).elements[j].getBaseElement();
				}
				j += 1;
			}
			if (nextElement) {
				(this || _global).layerElement.insertBefore(elem2, nextElement);
			} else {
				(this || _global).layerElement.appendChild(elem2);
			}
		};
		function HShapeElement(data2, globalData2, comp2) {
			(this || _global).shapes = [];
			(this || _global).shapesData = data2.shapes;
			(this || _global).stylesList = [];
			(this || _global).shapeModifiers = [];
			(this || _global).itemsData = [];
			(this || _global).processedElements = [];
			(this || _global).animatedContents = [];
			(this || _global).shapesContainer = createNS("g");
			this.initElement(data2, globalData2, comp2);
			(this || _global).prevViewData = [];
			(this || _global).currentBBox = {
				x: 999999,
				y: -999999,
				h: 0,
				w: 0,
			};
		}
		extendPrototype(
			[
				BaseElement,
				TransformElement,
				HSolidElement,
				SVGShapeElement,
				HBaseElement,
				HierarchyElement,
				FrameElement,
				RenderableElement,
			],
			HShapeElement,
		);
		HShapeElement.prototype._renderShapeFrame =
			HShapeElement.prototype.renderInnerContent;
		HShapeElement.prototype.createContent = function () {
			var cont;
			(this || _global).baseElement.style.fontSize = 0;
			if ((this || _global).data.hasMask) {
				(this || _global).layerElement.appendChild(
					(this || _global).shapesContainer,
				);
				cont = (this || _global).svgElement;
			} else {
				cont = createNS("svg");
				var size = (this || _global).comp.data
					? (this || _global).comp.data
					: (this || _global).globalData.compSize;
				cont.setAttribute("width", size.w);
				cont.setAttribute("height", size.h);
				cont.appendChild((this || _global).shapesContainer);
				(this || _global).layerElement.appendChild(cont);
			}
			this.searchShapes(
				(this || _global).shapesData,
				(this || _global).itemsData,
				(this || _global).prevViewData,
				(this || _global).shapesContainer,
				0,
				[],
				true,
			);
			this.filterUniqueShapes();
			(this || _global).shapeCont = cont;
		};
		HShapeElement.prototype.getTransformedPoint = function (
			transformers,
			point,
		) {
			var i;
			var len = transformers.length;
			for (i = 0; i < len; i += 1) {
				point = transformers[i].mProps.v.applyToPointArray(
					point[0],
					point[1],
					0,
				);
			}
			return point;
		};
		HShapeElement.prototype.calculateShapeBoundingBox = function (
			item,
			boundingBox,
		) {
			var shape = item.sh.v;
			var transformers = item.transformers;
			var i;
			var len = shape._length;
			var vPoint;
			var oPoint;
			var nextIPoint;
			var nextVPoint;
			if (len <= 1) {
				return;
			}
			for (i = 0; i < len - 1; i += 1) {
				vPoint = this.getTransformedPoint(transformers, shape.v[i]);
				oPoint = this.getTransformedPoint(transformers, shape.o[i]);
				nextIPoint = this.getTransformedPoint(transformers, shape.i[i + 1]);
				nextVPoint = this.getTransformedPoint(transformers, shape.v[i + 1]);
				this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
			}
			if (shape.c) {
				vPoint = this.getTransformedPoint(transformers, shape.v[i]);
				oPoint = this.getTransformedPoint(transformers, shape.o[i]);
				nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
				nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
				this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
			}
		};
		HShapeElement.prototype.checkBounds = function (
			vPoint,
			oPoint,
			nextIPoint,
			nextVPoint,
			boundingBox,
		) {
			this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
			var bounds = (this || _global).shapeBoundingBox;
			boundingBox.x = bmMin(bounds.left, boundingBox.x);
			boundingBox.xMax = bmMax(bounds.right, boundingBox.xMax);
			boundingBox.y = bmMin(bounds.top, boundingBox.y);
			boundingBox.yMax = bmMax(bounds.bottom, boundingBox.yMax);
		};
		HShapeElement.prototype.shapeBoundingBox = {
			left: 0,
			right: 0,
			top: 0,
			bottom: 0,
		};
		HShapeElement.prototype.tempBoundingBox = {
			x: 0,
			xMax: 0,
			y: 0,
			yMax: 0,
			width: 0,
			height: 0,
		};
		HShapeElement.prototype.getBoundsOfCurve = function (p0, p1, p2, p3) {
			var bounds = [
				[p0[0], p3[0]],
				[p0[1], p3[1]],
			];
			for (var a, b, c, t, b2ac, t1, t2, i = 0; i < 2; ++i) {
				b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
				a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
				c = 3 * p1[i] - 3 * p0[i];
				b |= 0;
				a |= 0;
				c |= 0;
				if (a === 0 && b === 0) {
				} else if (a === 0) {
					t = -c / b;
					if (t > 0 && t < 1) {
						bounds[i].push(this.calculateF(t, p0, p1, p2, p3, i));
					}
				} else {
					b2ac = b * b - 4 * c * a;
					if (b2ac >= 0) {
						t1 = (-b + bmSqrt(b2ac)) / (2 * a);
						if (t1 > 0 && t1 < 1)
							bounds[i].push(this.calculateF(t1, p0, p1, p2, p3, i));
						t2 = (-b - bmSqrt(b2ac)) / (2 * a);
						if (t2 > 0 && t2 < 1)
							bounds[i].push(this.calculateF(t2, p0, p1, p2, p3, i));
					}
				}
			}
			(this || _global).shapeBoundingBox.left = bmMin.apply(null, bounds[0]);
			(this || _global).shapeBoundingBox.top = bmMin.apply(null, bounds[1]);
			(this || _global).shapeBoundingBox.right = bmMax.apply(null, bounds[0]);
			(this || _global).shapeBoundingBox.bottom = bmMax.apply(null, bounds[1]);
		};
		HShapeElement.prototype.calculateF = function (t, p0, p1, p2, p3, i) {
			return (
				bmPow(1 - t, 3) * p0[i] +
				3 * bmPow(1 - t, 2) * t * p1[i] +
				3 * (1 - t) * bmPow(t, 2) * p2[i] +
				bmPow(t, 3) * p3[i]
			);
		};
		HShapeElement.prototype.calculateBoundingBox = function (
			itemsData,
			boundingBox,
		) {
			var i;
			var len = itemsData.length;
			for (i = 0; i < len; i += 1) {
				if (itemsData[i] && itemsData[i].sh) {
					this.calculateShapeBoundingBox(itemsData[i], boundingBox);
				} else if (itemsData[i] && itemsData[i].it) {
					this.calculateBoundingBox(itemsData[i].it, boundingBox);
				}
			}
		};
		HShapeElement.prototype.currentBoxContains = function (box) {
			return (
				(this || _global).currentBBox.x <= box.x &&
				(this || _global).currentBBox.y <= box.y &&
				(this || _global).currentBBox.width + (this || _global).currentBBox.x >=
					box.x + box.width &&
				(this || _global).currentBBox.height +
					(this || _global).currentBBox.y >=
					box.y + box.height
			);
		};
		HShapeElement.prototype.renderInnerContent = function () {
			this._renderShapeFrame();
			if (
				!(this || _global).hidden &&
				((this || _global)._isFirstFrame || (this || _global)._mdf)
			) {
				var tempBoundingBox = (this || _global).tempBoundingBox;
				var max = 999999;
				tempBoundingBox.x = max;
				tempBoundingBox.xMax = -max;
				tempBoundingBox.y = max;
				tempBoundingBox.yMax = -max;
				this.calculateBoundingBox((this || _global).itemsData, tempBoundingBox);
				tempBoundingBox.width =
					tempBoundingBox.xMax < tempBoundingBox.x
						? 0
						: tempBoundingBox.xMax - tempBoundingBox.x;
				tempBoundingBox.height =
					tempBoundingBox.yMax < tempBoundingBox.y
						? 0
						: tempBoundingBox.yMax - tempBoundingBox.y;
				if (this.currentBoxContains(tempBoundingBox)) {
					return;
				}
				var changed = false;
				if ((this || _global).currentBBox.w !== tempBoundingBox.width) {
					(this || _global).currentBBox.w = tempBoundingBox.width;
					(this || _global).shapeCont.setAttribute(
						"width",
						tempBoundingBox.width,
					);
					changed = true;
				}
				if ((this || _global).currentBBox.h !== tempBoundingBox.height) {
					(this || _global).currentBBox.h = tempBoundingBox.height;
					(this || _global).shapeCont.setAttribute(
						"height",
						tempBoundingBox.height,
					);
					changed = true;
				}
				if (
					changed ||
					(this || _global).currentBBox.x !== tempBoundingBox.x ||
					(this || _global).currentBBox.y !== tempBoundingBox.y
				) {
					(this || _global).currentBBox.w = tempBoundingBox.width;
					(this || _global).currentBBox.h = tempBoundingBox.height;
					(this || _global).currentBBox.x = tempBoundingBox.x;
					(this || _global).currentBBox.y = tempBoundingBox.y;
					(this || _global).shapeCont.setAttribute(
						"viewBox",
						(this || _global).currentBBox.x +
							" " +
							(this || _global).currentBBox.y +
							" " +
							(this || _global).currentBBox.w +
							" " +
							(this || _global).currentBBox.h,
					);
					var shapeStyle = (this || _global).shapeCont.style;
					var shapeTransform =
						"translate(" +
						(this || _global).currentBBox.x +
						"px," +
						(this || _global).currentBBox.y +
						"px)";
					shapeStyle.transform = shapeTransform;
					shapeStyle.webkitTransform = shapeTransform;
				}
			}
		};
		function HTextElement(data2, globalData2, comp2) {
			(this || _global).textSpans = [];
			(this || _global).textPaths = [];
			(this || _global).currentBBox = {
				x: 999999,
				y: -999999,
				h: 0,
				w: 0,
			};
			(this || _global).renderType = "svg";
			(this || _global).isMasked = false;
			this.initElement(data2, globalData2, comp2);
		}
		extendPrototype(
			[
				BaseElement,
				TransformElement,
				HBaseElement,
				HierarchyElement,
				FrameElement,
				RenderableDOMElement,
				ITextElement,
			],
			HTextElement,
		);
		HTextElement.prototype.createContent = function () {
			(this || _global).isMasked = this.checkMasks();
			if ((this || _global).isMasked) {
				(this || _global).renderType = "svg";
				(this || _global).compW = (this || _global).comp.data.w;
				(this || _global).compH = (this || _global).comp.data.h;
				(this || _global).svgElement.setAttribute(
					"width",
					(this || _global).compW,
				);
				(this || _global).svgElement.setAttribute(
					"height",
					(this || _global).compH,
				);
				var g = createNS("g");
				(this || _global).maskedElement.appendChild(g);
				(this || _global).innerElem = g;
			} else {
				(this || _global).renderType = "html";
				(this || _global).innerElem = (this || _global).layerElement;
			}
			this.checkParenting();
		};
		HTextElement.prototype.buildNewText = function () {
			var documentData = (this || _global).textProperty.currentData;
			(this || _global).renderedLetters = createSizedArray(
				documentData.l ? documentData.l.length : 0,
			);
			var innerElemStyle = (this || _global).innerElem.style;
			var textColor = documentData.fc
				? this.buildColor(documentData.fc)
				: "rgba(0,0,0,0)";
			innerElemStyle.fill = textColor;
			innerElemStyle.color = textColor;
			if (documentData.sc) {
				innerElemStyle.stroke = this.buildColor(documentData.sc);
				innerElemStyle.strokeWidth = documentData.sw + "px";
			}
			var fontData = (this || _global).globalData.fontManager.getFontByName(
				documentData.f,
			);
			if (!(this || _global).globalData.fontManager.chars) {
				innerElemStyle.fontSize = documentData.finalSize + "px";
				innerElemStyle.lineHeight = documentData.finalSize + "px";
				if (fontData.fClass) {
					(this || _global).innerElem.className = fontData.fClass;
				} else {
					innerElemStyle.fontFamily = fontData.fFamily;
					var fWeight = documentData.fWeight;
					var fStyle = documentData.fStyle;
					innerElemStyle.fontStyle = fStyle;
					innerElemStyle.fontWeight = fWeight;
				}
			}
			var i;
			var len;
			var letters = documentData.l;
			len = letters.length;
			var tSpan;
			var tParent;
			var tCont;
			var matrixHelper = (this || _global).mHelper;
			var shapes;
			var shapeStr = "";
			var cnt = 0;
			for (i = 0; i < len; i += 1) {
				if ((this || _global).globalData.fontManager.chars) {
					if (!(this || _global).textPaths[cnt]) {
						tSpan = createNS("path");
						tSpan.setAttribute("stroke-linecap", "butt");
						tSpan.setAttribute("stroke-linejoin", "round");
						tSpan.setAttribute("stroke-miterlimit", "4");
					} else {
						tSpan = (this || _global).textPaths[cnt];
					}
					if (!(this || _global).isMasked) {
						if ((this || _global).textSpans[cnt]) {
							tParent = (this || _global).textSpans[cnt];
							tCont = tParent.children[0];
						} else {
							tParent = createTag("div");
							tParent.style.lineHeight = 0;
							tCont = createNS("svg");
							tCont.appendChild(tSpan);
							styleDiv(tParent);
						}
					}
				} else if (!(this || _global).isMasked) {
					if ((this || _global).textSpans[cnt]) {
						tParent = (this || _global).textSpans[cnt];
						tSpan = (this || _global).textPaths[cnt];
					} else {
						tParent = createTag("span");
						styleDiv(tParent);
						tSpan = createTag("span");
						styleDiv(tSpan);
						tParent.appendChild(tSpan);
					}
				} else {
					tSpan = (this || _global).textPaths[cnt]
						? (this || _global).textPaths[cnt]
						: createNS("text");
				}
				if ((this || _global).globalData.fontManager.chars) {
					var charData = (this || _global).globalData.fontManager.getCharData(
						documentData.finalText[i],
						fontData.fStyle,
						(this || _global).globalData.fontManager.getFontByName(
							documentData.f,
						).fFamily,
					);
					var shapeData;
					if (charData) {
						shapeData = charData.data;
					} else {
						shapeData = null;
					}
					matrixHelper.reset();
					if (shapeData && shapeData.shapes) {
						shapes = shapeData.shapes[0].it;
						matrixHelper.scale(
							documentData.finalSize / 100,
							documentData.finalSize / 100,
						);
						shapeStr = this.createPathShape(matrixHelper, shapes);
						tSpan.setAttribute("d", shapeStr);
					}
					if (!(this || _global).isMasked) {
						(this || _global).innerElem.appendChild(tParent);
						if (shapeData && shapeData.shapes) {
							document.body.appendChild(tCont);
							var boundingBox = tCont.getBBox();
							tCont.setAttribute("width", boundingBox.width + 2);
							tCont.setAttribute("height", boundingBox.height + 2);
							tCont.setAttribute(
								"viewBox",
								boundingBox.x -
									1 +
									" " +
									(boundingBox.y - 1) +
									" " +
									(boundingBox.width + 2) +
									" " +
									(boundingBox.height + 2),
							);
							var tContStyle = tCont.style;
							var tContTranslation =
								"translate(" +
								(boundingBox.x - 1) +
								"px," +
								(boundingBox.y - 1) +
								"px)";
							tContStyle.transform = tContTranslation;
							tContStyle.webkitTransform = tContTranslation;
							letters[i].yOffset = boundingBox.y - 1;
						} else {
							tCont.setAttribute("width", 1);
							tCont.setAttribute("height", 1);
						}
						tParent.appendChild(tCont);
					} else {
						(this || _global).innerElem.appendChild(tSpan);
					}
				} else {
					tSpan.textContent = letters[i].val;
					tSpan.setAttributeNS(
						"http://www.w3.org/XML/1998/namespace",
						"xml:space",
						"preserve",
					);
					if (!(this || _global).isMasked) {
						(this || _global).innerElem.appendChild(tParent);
						var tStyle = tSpan.style;
						var tSpanTranslation =
							"translate3d(0," + -documentData.finalSize / 1.2 + "px,0)";
						tStyle.transform = tSpanTranslation;
						tStyle.webkitTransform = tSpanTranslation;
					} else {
						(this || _global).innerElem.appendChild(tSpan);
					}
				}
				if (!(this || _global).isMasked) {
					(this || _global).textSpans[cnt] = tParent;
				} else {
					(this || _global).textSpans[cnt] = tSpan;
				}
				(this || _global).textSpans[cnt].style.display = "block";
				(this || _global).textPaths[cnt] = tSpan;
				cnt += 1;
			}
			while (cnt < (this || _global).textSpans.length) {
				(this || _global).textSpans[cnt].style.display = "none";
				cnt += 1;
			}
		};
		HTextElement.prototype.renderInnerContent = function () {
			var svgStyle;
			if ((this || _global).data.singleShape) {
				if (
					!(this || _global)._isFirstFrame &&
					!(this || _global).lettersChangedFlag
				) {
					return;
				}
				if (
					(this || _global).isMasked &&
					(this || _global).finalTransform._matMdf
				) {
					(this || _global).svgElement.setAttribute(
						"viewBox",
						-(this || _global).finalTransform.mProp.p.v[0] +
							" " +
							-(this || _global).finalTransform.mProp.p.v[1] +
							" " +
							(this || _global).compW +
							" " +
							(this || _global).compH,
					);
					svgStyle = (this || _global).svgElement.style;
					var translation =
						"translate(" +
						-(this || _global).finalTransform.mProp.p.v[0] +
						"px," +
						-(this || _global).finalTransform.mProp.p.v[1] +
						"px)";
					svgStyle.transform = translation;
					svgStyle.webkitTransform = translation;
				}
			}
			(this || _global).textAnimator.getMeasures(
				(this || _global).textProperty.currentData,
				(this || _global).lettersChangedFlag,
			);
			if (
				!(this || _global).lettersChangedFlag &&
				!(this || _global).textAnimator.lettersChangedFlag
			) {
				return;
			}
			var i;
			var len;
			var count = 0;
			var renderedLetters = (this || _global).textAnimator.renderedLetters;
			var letters = (this || _global).textProperty.currentData.l;
			len = letters.length;
			var renderedLetter;
			var textSpan;
			var textPath;
			for (i = 0; i < len; i += 1) {
				if (letters[i].n) {
					count += 1;
				} else {
					textSpan = (this || _global).textSpans[i];
					textPath = (this || _global).textPaths[i];
					renderedLetter = renderedLetters[count];
					count += 1;
					if (renderedLetter._mdf.m) {
						if (!(this || _global).isMasked) {
							textSpan.style.webkitTransform = renderedLetter.m;
							textSpan.style.transform = renderedLetter.m;
						} else {
							textSpan.setAttribute("transform", renderedLetter.m);
						}
					}
					textSpan.style.opacity = renderedLetter.o;
					if (renderedLetter.sw && renderedLetter._mdf.sw) {
						textPath.setAttribute("stroke-width", renderedLetter.sw);
					}
					if (renderedLetter.sc && renderedLetter._mdf.sc) {
						textPath.setAttribute("stroke", renderedLetter.sc);
					}
					if (renderedLetter.fc && renderedLetter._mdf.fc) {
						textPath.setAttribute("fill", renderedLetter.fc);
						textPath.style.color = renderedLetter.fc;
					}
				}
			}
			if (
				(this || _global).innerElem.getBBox &&
				!(this || _global).hidden &&
				((this || _global)._isFirstFrame || (this || _global)._mdf)
			) {
				var boundingBox = (this || _global).innerElem.getBBox();
				if ((this || _global).currentBBox.w !== boundingBox.width) {
					(this || _global).currentBBox.w = boundingBox.width;
					(this || _global).svgElement.setAttribute("width", boundingBox.width);
				}
				if ((this || _global).currentBBox.h !== boundingBox.height) {
					(this || _global).currentBBox.h = boundingBox.height;
					(this || _global).svgElement.setAttribute(
						"height",
						boundingBox.height,
					);
				}
				var margin = 1;
				if (
					(this || _global).currentBBox.w !== boundingBox.width + margin * 2 ||
					(this || _global).currentBBox.h !== boundingBox.height + margin * 2 ||
					(this || _global).currentBBox.x !== boundingBox.x - margin ||
					(this || _global).currentBBox.y !== boundingBox.y - margin
				) {
					(this || _global).currentBBox.w = boundingBox.width + margin * 2;
					(this || _global).currentBBox.h = boundingBox.height + margin * 2;
					(this || _global).currentBBox.x = boundingBox.x - margin;
					(this || _global).currentBBox.y = boundingBox.y - margin;
					(this || _global).svgElement.setAttribute(
						"viewBox",
						(this || _global).currentBBox.x +
							" " +
							(this || _global).currentBBox.y +
							" " +
							(this || _global).currentBBox.w +
							" " +
							(this || _global).currentBBox.h,
					);
					svgStyle = (this || _global).svgElement.style;
					var svgTransform =
						"translate(" +
						(this || _global).currentBBox.x +
						"px," +
						(this || _global).currentBBox.y +
						"px)";
					svgStyle.transform = svgTransform;
					svgStyle.webkitTransform = svgTransform;
				}
			}
		};
		function HImageElement(data2, globalData2, comp2) {
			(this || _global).assetData = globalData2.getAssetData(data2.refId);
			this.initElement(data2, globalData2, comp2);
		}
		extendPrototype(
			[
				BaseElement,
				TransformElement,
				HBaseElement,
				HSolidElement,
				HierarchyElement,
				FrameElement,
				RenderableElement,
			],
			HImageElement,
		);
		HImageElement.prototype.createContent = function () {
			var assetPath = (this || _global).globalData.getAssetsPath(
				(this || _global).assetData,
			);
			var img = new Image();
			if ((this || _global).data.hasMask) {
				(this || _global).imageElem = createNS("image");
				(this || _global).imageElem.setAttribute(
					"width",
					(this || _global).assetData.w + "px",
				);
				(this || _global).imageElem.setAttribute(
					"height",
					(this || _global).assetData.h + "px",
				);
				(this || _global).imageElem.setAttributeNS(
					"http://www.w3.org/1999/xlink",
					"href",
					assetPath,
				);
				(this || _global).layerElement.appendChild((this || _global).imageElem);
				(this || _global).baseElement.setAttribute(
					"width",
					(this || _global).assetData.w,
				);
				(this || _global).baseElement.setAttribute(
					"height",
					(this || _global).assetData.h,
				);
			} else {
				(this || _global).layerElement.appendChild(img);
			}
			img.crossOrigin = "anonymous";
			img.src = assetPath;
			if ((this || _global).data.ln) {
				(this || _global).baseElement.setAttribute(
					"id",
					(this || _global).data.ln,
				);
			}
		};
		function HCameraElement(data2, globalData2, comp2) {
			this.initFrame();
			this.initBaseData(data2, globalData2, comp2);
			this.initHierarchy();
			var getProp = PropertyFactory.getProp;
			(this || _global).pe = getProp(
				this || _global,
				data2.pe,
				0,
				0,
				this || _global,
			);
			if (data2.ks.p.s) {
				(this || _global).px = getProp(
					this || _global,
					data2.ks.p.x,
					1,
					0,
					this || _global,
				);
				(this || _global).py = getProp(
					this || _global,
					data2.ks.p.y,
					1,
					0,
					this || _global,
				);
				(this || _global).pz = getProp(
					this || _global,
					data2.ks.p.z,
					1,
					0,
					this || _global,
				);
			} else {
				(this || _global).p = getProp(
					this || _global,
					data2.ks.p,
					1,
					0,
					this || _global,
				);
			}
			if (data2.ks.a) {
				(this || _global).a = getProp(
					this || _global,
					data2.ks.a,
					1,
					0,
					this || _global,
				);
			}
			if (data2.ks.or.k.length && data2.ks.or.k[0].to) {
				var i;
				var len = data2.ks.or.k.length;
				for (i = 0; i < len; i += 1) {
					data2.ks.or.k[i].to = null;
					data2.ks.or.k[i].ti = null;
				}
			}
			(this || _global).or = getProp(
				this || _global,
				data2.ks.or,
				1,
				degToRads,
				this || _global,
			);
			(this || _global).or.sh = true;
			(this || _global).rx = getProp(
				this || _global,
				data2.ks.rx,
				0,
				degToRads,
				this || _global,
			);
			(this || _global).ry = getProp(
				this || _global,
				data2.ks.ry,
				0,
				degToRads,
				this || _global,
			);
			(this || _global).rz = getProp(
				this || _global,
				data2.ks.rz,
				0,
				degToRads,
				this || _global,
			);
			(this || _global).mat = new Matrix();
			(this || _global)._prevMat = new Matrix();
			(this || _global)._isFirstFrame = true;
			(this || _global).finalTransform = {
				mProp: this || _global,
			};
		}
		extendPrototype(
			[BaseElement, FrameElement, HierarchyElement],
			HCameraElement,
		);
		HCameraElement.prototype.setup = function () {
			var i;
			var len = (this || _global).comp.threeDElements.length;
			var comp2;
			var perspectiveStyle;
			var containerStyle;
			for (i = 0; i < len; i += 1) {
				comp2 = (this || _global).comp.threeDElements[i];
				if (comp2.type === "3d") {
					perspectiveStyle = comp2.perspectiveElem.style;
					containerStyle = comp2.container.style;
					var perspective = (this || _global).pe.v + "px";
					var origin = "0px 0px 0px";
					var matrix = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
					perspectiveStyle.perspective = perspective;
					perspectiveStyle.webkitPerspective = perspective;
					containerStyle.transformOrigin = origin;
					containerStyle.mozTransformOrigin = origin;
					containerStyle.webkitTransformOrigin = origin;
					perspectiveStyle.transform = matrix;
					perspectiveStyle.webkitTransform = matrix;
				}
			}
		};
		HCameraElement.prototype.createElements = function () {};
		HCameraElement.prototype.hide = function () {};
		HCameraElement.prototype.renderFrame = function () {
			var _mdf = (this || _global)._isFirstFrame;
			var i;
			var len;
			if ((this || _global).hierarchy) {
				len = (this || _global).hierarchy.length;
				for (i = 0; i < len; i += 1) {
					_mdf =
						(this || _global).hierarchy[i].finalTransform.mProp._mdf || _mdf;
				}
			}
			if (
				_mdf ||
				(this || _global).pe._mdf ||
				((this || _global).p && (this || _global).p._mdf) ||
				((this || _global).px &&
					((this || _global).px._mdf ||
						(this || _global).py._mdf ||
						(this || _global).pz._mdf)) ||
				(this || _global).rx._mdf ||
				(this || _global).ry._mdf ||
				(this || _global).rz._mdf ||
				(this || _global).or._mdf ||
				((this || _global).a && (this || _global).a._mdf)
			) {
				(this || _global).mat.reset();
				if ((this || _global).hierarchy) {
					len = (this || _global).hierarchy.length - 1;
					for (i = len; i >= 0; i -= 1) {
						var mTransf = (this || _global).hierarchy[i].finalTransform.mProp;
						(this || _global).mat.translate(
							-mTransf.p.v[0],
							-mTransf.p.v[1],
							mTransf.p.v[2],
						);
						(this || _global).mat
							.rotateX(-mTransf.or.v[0])
							.rotateY(-mTransf.or.v[1])
							.rotateZ(mTransf.or.v[2]);
						(this || _global).mat
							.rotateX(-mTransf.rx.v)
							.rotateY(-mTransf.ry.v)
							.rotateZ(mTransf.rz.v);
						(this || _global).mat.scale(
							1 / mTransf.s.v[0],
							1 / mTransf.s.v[1],
							1 / mTransf.s.v[2],
						);
						(this || _global).mat.translate(
							mTransf.a.v[0],
							mTransf.a.v[1],
							mTransf.a.v[2],
						);
					}
				}
				if ((this || _global).p) {
					(this || _global).mat.translate(
						-(this || _global).p.v[0],
						-(this || _global).p.v[1],
						(this || _global).p.v[2],
					);
				} else {
					(this || _global).mat.translate(
						-(this || _global).px.v,
						-(this || _global).py.v,
						(this || _global).pz.v,
					);
				}
				if ((this || _global).a) {
					var diffVector;
					if ((this || _global).p) {
						diffVector = [
							(this || _global).p.v[0] - (this || _global).a.v[0],
							(this || _global).p.v[1] - (this || _global).a.v[1],
							(this || _global).p.v[2] - (this || _global).a.v[2],
						];
					} else {
						diffVector = [
							(this || _global).px.v - (this || _global).a.v[0],
							(this || _global).py.v - (this || _global).a.v[1],
							(this || _global).pz.v - (this || _global).a.v[2],
						];
					}
					var mag = Math.sqrt(
						Math.pow(diffVector[0], 2) +
							Math.pow(diffVector[1], 2) +
							Math.pow(diffVector[2], 2),
					);
					var lookDir = [
						diffVector[0] / mag,
						diffVector[1] / mag,
						diffVector[2] / mag,
					];
					var lookLengthOnXZ = Math.sqrt(
						lookDir[2] * lookDir[2] + lookDir[0] * lookDir[0],
					);
					var mRotationX = Math.atan2(lookDir[1], lookLengthOnXZ);
					var mRotationY = Math.atan2(lookDir[0], -lookDir[2]);
					(this || _global).mat.rotateY(mRotationY).rotateX(-mRotationX);
				}
				(this || _global).mat
					.rotateX(-(this || _global).rx.v)
					.rotateY(-(this || _global).ry.v)
					.rotateZ((this || _global).rz.v);
				(this || _global).mat
					.rotateX(-(this || _global).or.v[0])
					.rotateY(-(this || _global).or.v[1])
					.rotateZ((this || _global).or.v[2]);
				(this || _global).mat.translate(
					(this || _global).globalData.compSize.w / 2,
					(this || _global).globalData.compSize.h / 2,
					0,
				);
				(this || _global).mat.translate(0, 0, (this || _global).pe.v);
				var hasMatrixChanged = !(this || _global)._prevMat.equals(
					(this || _global).mat,
				);
				if (
					(hasMatrixChanged || (this || _global).pe._mdf) &&
					(this || _global).comp.threeDElements
				) {
					len = (this || _global).comp.threeDElements.length;
					var comp2;
					var perspectiveStyle;
					var containerStyle;
					for (i = 0; i < len; i += 1) {
						comp2 = (this || _global).comp.threeDElements[i];
						if (comp2.type === "3d") {
							if (hasMatrixChanged) {
								var matValue = (this || _global).mat.toCSS();
								containerStyle = comp2.container.style;
								containerStyle.transform = matValue;
								containerStyle.webkitTransform = matValue;
							}
							if ((this || _global).pe._mdf) {
								perspectiveStyle = comp2.perspectiveElem.style;
								perspectiveStyle.perspective = (this || _global).pe.v + "px";
								perspectiveStyle.webkitPerspective =
									(this || _global).pe.v + "px";
							}
						}
					}
					(this || _global).mat.clone((this || _global)._prevMat);
				}
			}
			(this || _global)._isFirstFrame = false;
		};
		HCameraElement.prototype.prepareFrame = function (num) {
			this.prepareProperties(num, true);
		};
		HCameraElement.prototype.destroy = function () {};
		HCameraElement.prototype.getBaseElement = function () {
			return null;
		};
		function HEffects() {}
		HEffects.prototype.renderFrame = function () {};
		var animationManager = (function () {
			var moduleOb = {};
			var registeredAnimations = [];
			var initTime = 0;
			var len = 0;
			var playingAnimationsNum = 0;
			var _stopped = true;
			var _isFrozen = false;
			function removeElement(ev) {
				var i = 0;
				var animItem = ev.target;
				while (i < len) {
					if (registeredAnimations[i].animation === animItem) {
						registeredAnimations.splice(i, 1);
						i -= 1;
						len -= 1;
						if (!animItem.isPaused) {
							subtractPlayingCount();
						}
					}
					i += 1;
				}
			}
			function registerAnimation(element, animationData2) {
				if (!element) {
					return null;
				}
				var i = 0;
				while (i < len) {
					if (
						registeredAnimations[i].elem === element &&
						registeredAnimations[i].elem !== null
					) {
						return registeredAnimations[i].animation;
					}
					i += 1;
				}
				var animItem = new AnimationItem();
				setupAnimation(animItem, element);
				animItem.setData(element, animationData2);
				return animItem;
			}
			function getRegisteredAnimations() {
				var i;
				var lenAnims = registeredAnimations.length;
				var animations = [];
				for (i = 0; i < lenAnims; i += 1) {
					animations.push(registeredAnimations[i].animation);
				}
				return animations;
			}
			function addPlayingCount() {
				playingAnimationsNum += 1;
				activate();
			}
			function subtractPlayingCount() {
				playingAnimationsNum -= 1;
			}
			function setupAnimation(animItem, element) {
				animItem.addEventListener("destroy", removeElement);
				animItem.addEventListener("_active", addPlayingCount);
				animItem.addEventListener("_idle", subtractPlayingCount);
				registeredAnimations.push({
					elem: element,
					animation: animItem,
				});
				len += 1;
			}
			function loadAnimation2(params) {
				var animItem = new AnimationItem();
				setupAnimation(animItem, null);
				animItem.setParams(params);
				return animItem;
			}
			function setSpeed(val2, animation) {
				var i;
				for (i = 0; i < len; i += 1) {
					registeredAnimations[i].animation.setSpeed(val2, animation);
				}
			}
			function setDirection(val2, animation) {
				var i;
				for (i = 0; i < len; i += 1) {
					registeredAnimations[i].animation.setDirection(val2, animation);
				}
			}
			function play(animation) {
				var i;
				for (i = 0; i < len; i += 1) {
					registeredAnimations[i].animation.play(animation);
				}
			}
			function resume(nowTime) {
				var elapsedTime = nowTime - initTime;
				var i;
				for (i = 0; i < len; i += 1) {
					registeredAnimations[i].animation.advanceTime(elapsedTime);
				}
				initTime = nowTime;
				if (playingAnimationsNum && !_isFrozen) {
					window.requestAnimationFrame(resume);
				} else {
					_stopped = true;
				}
			}
			function first(nowTime) {
				initTime = nowTime;
				window.requestAnimationFrame(resume);
			}
			function pause(animation) {
				var i;
				for (i = 0; i < len; i += 1) {
					registeredAnimations[i].animation.pause(animation);
				}
			}
			function goToAndStop(value2, isFrame, animation) {
				var i;
				for (i = 0; i < len; i += 1) {
					registeredAnimations[i].animation.goToAndStop(
						value2,
						isFrame,
						animation,
					);
				}
			}
			function stop(animation) {
				var i;
				for (i = 0; i < len; i += 1) {
					registeredAnimations[i].animation.stop(animation);
				}
			}
			function togglePause(animation) {
				var i;
				for (i = 0; i < len; i += 1) {
					registeredAnimations[i].animation.togglePause(animation);
				}
			}
			function destroy(animation) {
				var i;
				for (i = len - 1; i >= 0; i -= 1) {
					registeredAnimations[i].animation.destroy(animation);
				}
			}
			function searchAnimations2(animationData2, standalone2, renderer2) {
				var animElements = [].concat(
					[].slice.call(document.getElementsByClassName("lottie")),
					[].slice.call(document.getElementsByClassName("bodymovin")),
				);
				var i;
				var lenAnims = animElements.length;
				for (i = 0; i < lenAnims; i += 1) {
					if (renderer2) {
						animElements[i].setAttribute("data-bm-type", renderer2);
					}
					registerAnimation(animElements[i], animationData2);
				}
				if (standalone2 && lenAnims === 0) {
					if (!renderer2) {
						renderer2 = "svg";
					}
					var body = document.getElementsByTagName("body")[0];
					body.innerText = "";
					var div2 = createTag("div");
					div2.style.width = "100%";
					div2.style.height = "100%";
					div2.setAttribute("data-bm-type", renderer2);
					body.appendChild(div2);
					registerAnimation(div2, animationData2);
				}
			}
			function resize() {
				var i;
				for (i = 0; i < len; i += 1) {
					registeredAnimations[i].animation.resize();
				}
			}
			function activate() {
				if (!_isFrozen && playingAnimationsNum) {
					if (_stopped) {
						window.requestAnimationFrame(first);
						_stopped = false;
					}
				}
			}
			function freeze() {
				_isFrozen = true;
			}
			function unfreeze() {
				_isFrozen = false;
				activate();
			}
			function setVolume(val2, animation) {
				var i;
				for (i = 0; i < len; i += 1) {
					registeredAnimations[i].animation.setVolume(val2, animation);
				}
			}
			function mute(animation) {
				var i;
				for (i = 0; i < len; i += 1) {
					registeredAnimations[i].animation.mute(animation);
				}
			}
			function unmute(animation) {
				var i;
				for (i = 0; i < len; i += 1) {
					registeredAnimations[i].animation.unmute(animation);
				}
			}
			moduleOb.registerAnimation = registerAnimation;
			moduleOb.loadAnimation = loadAnimation2;
			moduleOb.setSpeed = setSpeed;
			moduleOb.setDirection = setDirection;
			moduleOb.play = play;
			moduleOb.pause = pause;
			moduleOb.stop = stop;
			moduleOb.togglePause = togglePause;
			moduleOb.searchAnimations = searchAnimations2;
			moduleOb.resize = resize;
			moduleOb.goToAndStop = goToAndStop;
			moduleOb.destroy = destroy;
			moduleOb.freeze = freeze;
			moduleOb.unfreeze = unfreeze;
			moduleOb.setVolume = setVolume;
			moduleOb.mute = mute;
			moduleOb.unmute = unmute;
			moduleOb.getRegisteredAnimations = getRegisteredAnimations;
			return moduleOb;
		})();
		var AnimationItem = function () {
			(this || _global)._cbs = [];
			(this || _global).name = "";
			(this || _global).path = "";
			(this || _global).isLoaded = false;
			(this || _global).currentFrame = 0;
			(this || _global).currentRawFrame = 0;
			(this || _global).firstFrame = 0;
			(this || _global).totalFrames = 0;
			(this || _global).frameRate = 0;
			(this || _global).frameMult = 0;
			(this || _global).playSpeed = 1;
			(this || _global).playDirection = 1;
			(this || _global).playCount = 0;
			(this || _global).animationData = {};
			(this || _global).assets = [];
			(this || _global).isPaused = true;
			(this || _global).autoplay = false;
			(this || _global).loop = true;
			(this || _global).renderer = null;
			(this || _global).animationID = createElementID();
			(this || _global).assetsPath = "";
			(this || _global).timeCompleted = 0;
			(this || _global).segmentPos = 0;
			(this || _global).isSubframeEnabled = subframeEnabled;
			(this || _global).segments = [];
			(this || _global)._idle = true;
			(this || _global)._completedLoop = false;
			(this || _global).projectInterface = ProjectInterface();
			(this || _global).imagePreloader = new ImagePreloader();
			(this || _global).audioController = audioControllerFactory();
			(this || _global).markers = [];
		};
		extendPrototype([BaseEvent], AnimationItem);
		AnimationItem.prototype.setParams = function (params) {
			if (params.wrapper || params.container) {
				(this || _global).wrapper = params.wrapper || params.container;
			}
			var animType = "svg";
			if (params.animType) {
				animType = params.animType;
			} else if (params.renderer) {
				animType = params.renderer;
			}
			switch (animType) {
				case "canvas":
					(this || _global).renderer = new CanvasRenderer(
						this || _global,
						params.rendererSettings,
					);
					break;
				case "svg":
					(this || _global).renderer = new SVGRenderer(
						this || _global,
						params.rendererSettings,
					);
					break;
				default:
					(this || _global).renderer = new HybridRenderer(
						this || _global,
						params.rendererSettings,
					);
					break;
			}
			(this || _global).imagePreloader.setCacheType(
				animType,
				(this || _global).renderer.globalData.defs,
			);
			(this || _global).renderer.setProjectInterface(
				(this || _global).projectInterface,
			);
			(this || _global).animType = animType;
			if (
				params.loop === "" ||
				params.loop === null ||
				params.loop === void 0 ||
				params.loop === true
			) {
				(this || _global).loop = true;
			} else if (params.loop === false) {
				(this || _global).loop = false;
			} else {
				(this || _global).loop = parseInt(params.loop, 10);
			}
			(this || _global).autoplay =
				"autoplay" in params ? params.autoplay : true;
			(this || _global).name = params.name ? params.name : "";
			(this || _global).autoloadSegments = Object.prototype.hasOwnProperty.call(
				params,
				"autoloadSegments",
			)
				? params.autoloadSegments
				: true;
			(this || _global).assetsPath = params.assetsPath;
			(this || _global).initialSegment = params.initialSegment;
			if (params.audioFactory) {
				(this || _global).audioController.setAudioFactory(params.audioFactory);
			}
			if (params.animationData) {
				this.configAnimation(params.animationData);
			} else if (params.path) {
				if (params.path.lastIndexOf("\\") !== -1) {
					(this || _global).path = params.path.substr(
						0,
						params.path.lastIndexOf("\\") + 1,
					);
				} else {
					(this || _global).path = params.path.substr(
						0,
						params.path.lastIndexOf("/") + 1,
					);
				}
				(this || _global).fileName = params.path.substr(
					params.path.lastIndexOf("/") + 1,
				);
				(this || _global).fileName = (this || _global).fileName.substr(
					0,
					(this || _global).fileName.lastIndexOf(".json"),
				);
				assetLoader.load(
					params.path,
					(this || _global).configAnimation.bind(this || _global),
					function () {
						this.trigger("data_failed");
					}.bind(this || _global),
				);
			}
		};
		AnimationItem.prototype.setData = function (wrapper, animationData2) {
			if (animationData2) {
				if (typeof animationData2 !== "object") {
					animationData2 = JSON.parse(animationData2);
				}
			}
			var params = {
				wrapper,
				animationData: animationData2,
			};
			var wrapperAttributes = wrapper.attributes;
			params.path = wrapperAttributes.getNamedItem("data-animation-path")
				? wrapperAttributes.getNamedItem("data-animation-path").value
				: wrapperAttributes.getNamedItem("data-bm-path")
					? wrapperAttributes.getNamedItem("data-bm-path").value
					: wrapperAttributes.getNamedItem("bm-path")
						? wrapperAttributes.getNamedItem("bm-path").value
						: "";
			params.animType = wrapperAttributes.getNamedItem("data-anim-type")
				? wrapperAttributes.getNamedItem("data-anim-type").value
				: wrapperAttributes.getNamedItem("data-bm-type")
					? wrapperAttributes.getNamedItem("data-bm-type").value
					: wrapperAttributes.getNamedItem("bm-type")
						? wrapperAttributes.getNamedItem("bm-type").value
						: wrapperAttributes.getNamedItem("data-bm-renderer")
							? wrapperAttributes.getNamedItem("data-bm-renderer").value
							: wrapperAttributes.getNamedItem("bm-renderer")
								? wrapperAttributes.getNamedItem("bm-renderer").value
								: "canvas";
			var loop = wrapperAttributes.getNamedItem("data-anim-loop")
				? wrapperAttributes.getNamedItem("data-anim-loop").value
				: wrapperAttributes.getNamedItem("data-bm-loop")
					? wrapperAttributes.getNamedItem("data-bm-loop").value
					: wrapperAttributes.getNamedItem("bm-loop")
						? wrapperAttributes.getNamedItem("bm-loop").value
						: "";
			if (loop === "false") {
				params.loop = false;
			} else if (loop === "true") {
				params.loop = true;
			} else if (loop !== "") {
				params.loop = parseInt(loop, 10);
			}
			var autoplay = wrapperAttributes.getNamedItem("data-anim-autoplay")
				? wrapperAttributes.getNamedItem("data-anim-autoplay").value
				: wrapperAttributes.getNamedItem("data-bm-autoplay")
					? wrapperAttributes.getNamedItem("data-bm-autoplay").value
					: wrapperAttributes.getNamedItem("bm-autoplay")
						? wrapperAttributes.getNamedItem("bm-autoplay").value
						: true;
			params.autoplay = autoplay !== "false";
			params.name = wrapperAttributes.getNamedItem("data-name")
				? wrapperAttributes.getNamedItem("data-name").value
				: wrapperAttributes.getNamedItem("data-bm-name")
					? wrapperAttributes.getNamedItem("data-bm-name").value
					: wrapperAttributes.getNamedItem("bm-name")
						? wrapperAttributes.getNamedItem("bm-name").value
						: "";
			var prerender = wrapperAttributes.getNamedItem("data-anim-prerender")
				? wrapperAttributes.getNamedItem("data-anim-prerender").value
				: wrapperAttributes.getNamedItem("data-bm-prerender")
					? wrapperAttributes.getNamedItem("data-bm-prerender").value
					: wrapperAttributes.getNamedItem("bm-prerender")
						? wrapperAttributes.getNamedItem("bm-prerender").value
						: "";
			if (prerender === "false") {
				params.prerender = false;
			}
			this.setParams(params);
		};
		AnimationItem.prototype.includeLayers = function (data2) {
			if (data2.op > (this || _global).animationData.op) {
				(this || _global).animationData.op = data2.op;
				(this || _global).totalFrames = Math.floor(
					data2.op - (this || _global).animationData.ip,
				);
			}
			var layers = (this || _global).animationData.layers;
			var i;
			var len = layers.length;
			var newLayers = data2.layers;
			var j;
			var jLen = newLayers.length;
			for (j = 0; j < jLen; j += 1) {
				i = 0;
				while (i < len) {
					if (layers[i].id === newLayers[j].id) {
						layers[i] = newLayers[j];
						break;
					}
					i += 1;
				}
			}
			if (data2.chars || data2.fonts) {
				(this || _global).renderer.globalData.fontManager.addChars(data2.chars);
				(this || _global).renderer.globalData.fontManager.addFonts(
					data2.fonts,
					(this || _global).renderer.globalData.defs,
				);
			}
			if (data2.assets) {
				len = data2.assets.length;
				for (i = 0; i < len; i += 1) {
					(this || _global).animationData.assets.push(data2.assets[i]);
				}
			}
			(this || _global).animationData.__complete = false;
			dataManager.completeData(
				(this || _global).animationData,
				(this || _global).renderer.globalData.fontManager,
			);
			(this || _global).renderer.includeLayers(data2.layers);
			if (expressionsPlugin) {
				expressionsPlugin.initExpressions(this || _global);
			}
			this.loadNextSegment();
		};
		AnimationItem.prototype.loadNextSegment = function () {
			var segments = (this || _global).animationData.segments;
			if (
				!segments ||
				segments.length === 0 ||
				!(this || _global).autoloadSegments
			) {
				this.trigger("data_ready");
				(this || _global).timeCompleted = (this || _global).totalFrames;
				return;
			}
			var segment = segments.shift();
			(this || _global).timeCompleted =
				segment.time * (this || _global).frameRate;
			var segmentPath =
				(this || _global).path +
				(this || _global).fileName +
				"_" +
				(this || _global).segmentPos +
				".json";
			(this || _global).segmentPos += 1;
			assetLoader.load(
				segmentPath,
				(this || _global).includeLayers.bind(this || _global),
				function () {
					this.trigger("data_failed");
				}.bind(this || _global),
			);
		};
		AnimationItem.prototype.loadSegments = function () {
			var segments = (this || _global).animationData.segments;
			if (!segments) {
				(this || _global).timeCompleted = (this || _global).totalFrames;
			}
			this.loadNextSegment();
		};
		AnimationItem.prototype.imagesLoaded = function () {
			this.trigger("loaded_images");
			this.checkLoaded();
		};
		AnimationItem.prototype.preloadImages = function () {
			(this || _global).imagePreloader.setAssetsPath(
				(this || _global).assetsPath,
			);
			(this || _global).imagePreloader.setPath((this || _global).path);
			(this || _global).imagePreloader.loadAssets(
				(this || _global).animationData.assets,
				(this || _global).imagesLoaded.bind(this || _global),
			);
		};
		AnimationItem.prototype.configAnimation = function (animData) {
			if (!(this || _global).renderer) {
				return;
			}
			try {
				(this || _global).animationData = animData;
				if ((this || _global).initialSegment) {
					(this || _global).totalFrames = Math.floor(
						(this || _global).initialSegment[1] -
							(this || _global).initialSegment[0],
					);
					(this || _global).firstFrame = Math.round(
						(this || _global).initialSegment[0],
					);
				} else {
					(this || _global).totalFrames = Math.floor(
						(this || _global).animationData.op -
							(this || _global).animationData.ip,
					);
					(this || _global).firstFrame = Math.round(
						(this || _global).animationData.ip,
					);
				}
				(this || _global).renderer.configAnimation(animData);
				if (!animData.assets) {
					animData.assets = [];
				}
				(this || _global).assets = (this || _global).animationData.assets;
				(this || _global).frameRate = (this || _global).animationData.fr;
				(this || _global).frameMult = (this || _global).animationData.fr / 1e3;
				(this || _global).renderer.searchExtraCompositions(animData.assets);
				(this || _global).markers = markerParser(animData.markers || []);
				this.trigger("config_ready");
				this.preloadImages();
				this.loadSegments();
				this.updaFrameModifier();
				this.waitForFontsLoaded();
				if ((this || _global).isPaused) {
					(this || _global).audioController.pause();
				}
			} catch (error) {
				this.triggerConfigError(error);
			}
		};
		AnimationItem.prototype.waitForFontsLoaded = function () {
			if (!(this || _global).renderer) {
				return;
			}
			if ((this || _global).renderer.globalData.fontManager.isLoaded) {
				this.checkLoaded();
			} else {
				setTimeout(
					(this || _global).waitForFontsLoaded.bind(this || _global),
					20,
				);
			}
		};
		AnimationItem.prototype.checkLoaded = function () {
			if (
				!(this || _global).isLoaded &&
				(this || _global).renderer.globalData.fontManager.isLoaded &&
				((this || _global).imagePreloader.loadedImages() ||
					(this || _global).renderer.rendererType !== "canvas") &&
				(this || _global).imagePreloader.loadedFootages()
			) {
				(this || _global).isLoaded = true;
				dataManager.completeData(
					(this || _global).animationData,
					(this || _global).renderer.globalData.fontManager,
				);
				if (expressionsPlugin) {
					expressionsPlugin.initExpressions(this || _global);
				}
				(this || _global).renderer.initItems();
				setTimeout(
					function () {
						this.trigger("DOMLoaded");
					}.bind(this || _global),
					0,
				);
				this.gotoFrame();
				if ((this || _global).autoplay) {
					this.play();
				}
			}
		};
		AnimationItem.prototype.resize = function () {
			(this || _global).renderer.updateContainerSize();
		};
		AnimationItem.prototype.setSubframe = function (flag) {
			(this || _global).isSubframeEnabled = !!flag;
		};
		AnimationItem.prototype.gotoFrame = function () {
			(this || _global).currentFrame = (this || _global).isSubframeEnabled
				? (this || _global).currentRawFrame
				: ~~(this || _global).currentRawFrame;
			if (
				(this || _global).timeCompleted !== (this || _global).totalFrames &&
				(this || _global).currentFrame > (this || _global).timeCompleted
			) {
				(this || _global).currentFrame = (this || _global).timeCompleted;
			}
			this.trigger("enterFrame");
			this.renderFrame();
		};
		AnimationItem.prototype.renderFrame = function () {
			if ((this || _global).isLoaded === false || !(this || _global).renderer) {
				return;
			}
			try {
				(this || _global).renderer.renderFrame(
					(this || _global).currentFrame + (this || _global).firstFrame,
				);
			} catch (error) {
				this.triggerRenderFrameError(error);
			}
		};
		AnimationItem.prototype.play = function (name2) {
			if (name2 && (this || _global).name !== name2) {
				return;
			}
			if ((this || _global).isPaused === true) {
				(this || _global).isPaused = false;
				(this || _global).audioController.resume();
				if ((this || _global)._idle) {
					(this || _global)._idle = false;
					this.trigger("_active");
				}
			}
		};
		AnimationItem.prototype.pause = function (name2) {
			if (name2 && (this || _global).name !== name2) {
				return;
			}
			if ((this || _global).isPaused === false) {
				(this || _global).isPaused = true;
				(this || _global)._idle = true;
				this.trigger("_idle");
				(this || _global).audioController.pause();
			}
		};
		AnimationItem.prototype.togglePause = function (name2) {
			if (name2 && (this || _global).name !== name2) {
				return;
			}
			if ((this || _global).isPaused === true) {
				this.play();
			} else {
				this.pause();
			}
		};
		AnimationItem.prototype.stop = function (name2) {
			if (name2 && (this || _global).name !== name2) {
				return;
			}
			this.pause();
			(this || _global).playCount = 0;
			(this || _global)._completedLoop = false;
			this.setCurrentRawFrameValue(0);
		};
		AnimationItem.prototype.getMarkerData = function (markerName) {
			var marker;
			for (var i = 0; i < (this || _global).markers.length; i += 1) {
				marker = (this || _global).markers[i];
				if (marker.payload && marker.payload.name === markerName) {
					return marker;
				}
			}
			return null;
		};
		AnimationItem.prototype.goToAndStop = function (value2, isFrame, name2) {
			if (name2 && (this || _global).name !== name2) {
				return;
			}
			var numValue = Number(value2);
			if (isNaN(numValue)) {
				var marker = this.getMarkerData(value2);
				if (marker) {
					this.goToAndStop(marker.time, true);
				}
			} else if (isFrame) {
				this.setCurrentRawFrameValue(value2);
			} else {
				this.setCurrentRawFrameValue(value2 * (this || _global).frameModifier);
			}
			this.pause();
		};
		AnimationItem.prototype.goToAndPlay = function (value2, isFrame, name2) {
			if (name2 && (this || _global).name !== name2) {
				return;
			}
			var numValue = Number(value2);
			if (isNaN(numValue)) {
				var marker = this.getMarkerData(value2);
				if (marker) {
					if (!marker.duration) {
						this.goToAndStop(marker.time, true);
					} else {
						this.playSegments(
							[marker.time, marker.time + marker.duration],
							true,
						);
					}
				}
			} else {
				this.goToAndStop(numValue, isFrame, name2);
			}
			this.play();
		};
		AnimationItem.prototype.advanceTime = function (value2) {
			if (
				(this || _global).isPaused === true ||
				(this || _global).isLoaded === false
			) {
				return;
			}
			var nextValue =
				(this || _global).currentRawFrame +
				value2 * (this || _global).frameModifier;
			var _isComplete = false;
			if (
				nextValue >= (this || _global).totalFrames - 1 &&
				(this || _global).frameModifier > 0
			) {
				if (
					!(this || _global).loop ||
					(this || _global).playCount === (this || _global).loop
				) {
					if (
						!this.checkSegments(
							nextValue > (this || _global).totalFrames
								? nextValue % (this || _global).totalFrames
								: 0,
						)
					) {
						_isComplete = true;
						nextValue = (this || _global).totalFrames - 1;
					}
				} else if (nextValue >= (this || _global).totalFrames) {
					(this || _global).playCount += 1;
					if (!this.checkSegments(nextValue % (this || _global).totalFrames)) {
						this.setCurrentRawFrameValue(
							nextValue % (this || _global).totalFrames,
						);
						(this || _global)._completedLoop = true;
						this.trigger("loopComplete");
					}
				} else {
					this.setCurrentRawFrameValue(nextValue);
				}
			} else if (nextValue < 0) {
				if (!this.checkSegments(nextValue % (this || _global).totalFrames)) {
					if (
						(this || _global).loop &&
						!(
							(this || _global).playCount-- <= 0 &&
							(this || _global).loop !== true
						)
					) {
						this.setCurrentRawFrameValue(
							(this || _global).totalFrames +
								(nextValue % (this || _global).totalFrames),
						);
						if (!(this || _global)._completedLoop) {
							(this || _global)._completedLoop = true;
						} else {
							this.trigger("loopComplete");
						}
					} else {
						_isComplete = true;
						nextValue = 0;
					}
				}
			} else {
				this.setCurrentRawFrameValue(nextValue);
			}
			if (_isComplete) {
				this.setCurrentRawFrameValue(nextValue);
				this.pause();
				this.trigger("complete");
			}
		};
		AnimationItem.prototype.adjustSegment = function (arr, offset) {
			(this || _global).playCount = 0;
			if (arr[1] < arr[0]) {
				if ((this || _global).frameModifier > 0) {
					if ((this || _global).playSpeed < 0) {
						this.setSpeed(-(this || _global).playSpeed);
					} else {
						this.setDirection(-1);
					}
				}
				(this || _global).totalFrames = arr[0] - arr[1];
				(this || _global).timeCompleted = (this || _global).totalFrames;
				(this || _global).firstFrame = arr[1];
				this.setCurrentRawFrameValue(
					(this || _global).totalFrames - 1e-3 - offset,
				);
			} else if (arr[1] > arr[0]) {
				if ((this || _global).frameModifier < 0) {
					if ((this || _global).playSpeed < 0) {
						this.setSpeed(-(this || _global).playSpeed);
					} else {
						this.setDirection(1);
					}
				}
				(this || _global).totalFrames = arr[1] - arr[0];
				(this || _global).timeCompleted = (this || _global).totalFrames;
				(this || _global).firstFrame = arr[0];
				this.setCurrentRawFrameValue(1e-3 + offset);
			}
			this.trigger("segmentStart");
		};
		AnimationItem.prototype.setSegment = function (init, end) {
			var pendingFrame = -1;
			if ((this || _global).isPaused) {
				if (
					(this || _global).currentRawFrame + (this || _global).firstFrame <
					init
				) {
					pendingFrame = init;
				} else if (
					(this || _global).currentRawFrame + (this || _global).firstFrame >
					end
				) {
					pendingFrame = end - init;
				}
			}
			(this || _global).firstFrame = init;
			(this || _global).totalFrames = end - init;
			(this || _global).timeCompleted = (this || _global).totalFrames;
			if (pendingFrame !== -1) {
				this.goToAndStop(pendingFrame, true);
			}
		};
		AnimationItem.prototype.playSegments = function (arr, forceFlag) {
			if (forceFlag) {
				(this || _global).segments.length = 0;
			}
			if (typeof arr[0] === "object") {
				var i;
				var len = arr.length;
				for (i = 0; i < len; i += 1) {
					(this || _global).segments.push(arr[i]);
				}
			} else {
				(this || _global).segments.push(arr);
			}
			if ((this || _global).segments.length && forceFlag) {
				this.adjustSegment((this || _global).segments.shift(), 0);
			}
			if ((this || _global).isPaused) {
				this.play();
			}
		};
		AnimationItem.prototype.resetSegments = function (forceFlag) {
			(this || _global).segments.length = 0;
			(this || _global).segments.push([
				(this || _global).animationData.ip,
				(this || _global).animationData.op,
			]);
			if (forceFlag) {
				this.checkSegments(0);
			}
		};
		AnimationItem.prototype.checkSegments = function (offset) {
			if ((this || _global).segments.length) {
				this.adjustSegment((this || _global).segments.shift(), offset);
				return true;
			}
			return false;
		};
		AnimationItem.prototype.destroy = function (name2) {
			if (
				(name2 && (this || _global).name !== name2) ||
				!(this || _global).renderer
			) {
				return;
			}
			(this || _global).renderer.destroy();
			(this || _global).imagePreloader.destroy();
			this.trigger("destroy");
			(this || _global)._cbs = null;
			(this || _global).onEnterFrame = null;
			(this || _global).onLoopComplete = null;
			(this || _global).onComplete = null;
			(this || _global).onSegmentStart = null;
			(this || _global).onDestroy = null;
			(this || _global).renderer = null;
			(this || _global).renderer = null;
			(this || _global).imagePreloader = null;
			(this || _global).projectInterface = null;
		};
		AnimationItem.prototype.setCurrentRawFrameValue = function (value2) {
			(this || _global).currentRawFrame = value2;
			this.gotoFrame();
		};
		AnimationItem.prototype.setSpeed = function (val2) {
			(this || _global).playSpeed = val2;
			this.updaFrameModifier();
		};
		AnimationItem.prototype.setDirection = function (val2) {
			(this || _global).playDirection = val2 < 0 ? -1 : 1;
			this.updaFrameModifier();
		};
		AnimationItem.prototype.setVolume = function (val2, name2) {
			if (name2 && (this || _global).name !== name2) {
				return;
			}
			(this || _global).audioController.setVolume(val2);
		};
		AnimationItem.prototype.getVolume = function () {
			return (this || _global).audioController.getVolume();
		};
		AnimationItem.prototype.mute = function (name2) {
			if (name2 && (this || _global).name !== name2) {
				return;
			}
			(this || _global).audioController.mute();
		};
		AnimationItem.prototype.unmute = function (name2) {
			if (name2 && (this || _global).name !== name2) {
				return;
			}
			(this || _global).audioController.unmute();
		};
		AnimationItem.prototype.updaFrameModifier = function () {
			(this || _global).frameModifier =
				(this || _global).frameMult *
				(this || _global).playSpeed *
				(this || _global).playDirection;
			(this || _global).audioController.setRate(
				(this || _global).playSpeed * (this || _global).playDirection,
			);
		};
		AnimationItem.prototype.getPath = function () {
			return (this || _global).path;
		};
		AnimationItem.prototype.getAssetsPath = function (assetData) {
			var path = "";
			if (assetData.e) {
				path = assetData.p;
			} else if ((this || _global).assetsPath) {
				var imagePath = assetData.p;
				if (imagePath.indexOf("images/") !== -1) {
					imagePath = imagePath.split("/")[1];
				}
				path = (this || _global).assetsPath + imagePath;
			} else {
				path = (this || _global).path;
				path += assetData.u ? assetData.u : "";
				path += assetData.p;
			}
			return path;
		};
		AnimationItem.prototype.getAssetData = function (id) {
			var i = 0;
			var len = (this || _global).assets.length;
			while (i < len) {
				if (id === (this || _global).assets[i].id) {
					return (this || _global).assets[i];
				}
				i += 1;
			}
			return null;
		};
		AnimationItem.prototype.hide = function () {
			(this || _global).renderer.hide();
		};
		AnimationItem.prototype.show = function () {
			(this || _global).renderer.show();
		};
		AnimationItem.prototype.getDuration = function (isFrame) {
			return isFrame
				? (this || _global).totalFrames
				: (this || _global).totalFrames / (this || _global).frameRate;
		};
		AnimationItem.prototype.trigger = function (name2) {
			if ((this || _global)._cbs && (this || _global)._cbs[name2]) {
				switch (name2) {
					case "enterFrame":
						this.triggerEvent(
							name2,
							new BMEnterFrameEvent(
								name2,
								(this || _global).currentFrame,
								(this || _global).totalFrames,
								(this || _global).frameModifier,
							),
						);
						break;
					case "loopComplete":
						this.triggerEvent(
							name2,
							new BMCompleteLoopEvent(
								name2,
								(this || _global).loop,
								(this || _global).playCount,
								(this || _global).frameMult,
							),
						);
						break;
					case "complete":
						this.triggerEvent(
							name2,
							new BMCompleteEvent(name2, (this || _global).frameMult),
						);
						break;
					case "segmentStart":
						this.triggerEvent(
							name2,
							new BMSegmentStartEvent(
								name2,
								(this || _global).firstFrame,
								(this || _global).totalFrames,
							),
						);
						break;
					case "destroy":
						this.triggerEvent(
							name2,
							new BMDestroyEvent(name2, this || _global),
						);
						break;
					default:
						this.triggerEvent(name2);
				}
			}
			if (name2 === "enterFrame" && (this || _global).onEnterFrame) {
				(this || _global).onEnterFrame.call(
					this || _global,
					new BMEnterFrameEvent(
						name2,
						(this || _global).currentFrame,
						(this || _global).totalFrames,
						(this || _global).frameMult,
					),
				);
			}
			if (name2 === "loopComplete" && (this || _global).onLoopComplete) {
				(this || _global).onLoopComplete.call(
					this || _global,
					new BMCompleteLoopEvent(
						name2,
						(this || _global).loop,
						(this || _global).playCount,
						(this || _global).frameMult,
					),
				);
			}
			if (name2 === "complete" && (this || _global).onComplete) {
				(this || _global).onComplete.call(
					this || _global,
					new BMCompleteEvent(name2, (this || _global).frameMult),
				);
			}
			if (name2 === "segmentStart" && (this || _global).onSegmentStart) {
				(this || _global).onSegmentStart.call(
					this || _global,
					new BMSegmentStartEvent(
						name2,
						(this || _global).firstFrame,
						(this || _global).totalFrames,
					),
				);
			}
			if (name2 === "destroy" && (this || _global).onDestroy) {
				(this || _global).onDestroy.call(
					this || _global,
					new BMDestroyEvent(name2, this || _global),
				);
			}
		};
		AnimationItem.prototype.triggerRenderFrameError = function (nativeError) {
			var error = new BMRenderFrameErrorEvent(
				nativeError,
				(this || _global).currentFrame,
			);
			this.triggerEvent("error", error);
			if ((this || _global).onError) {
				(this || _global).onError.call(this || _global, error);
			}
		};
		AnimationItem.prototype.triggerConfigError = function (nativeError) {
			var error = new BMConfigErrorEvent(
				nativeError,
				(this || _global).currentFrame,
			);
			this.triggerEvent("error", error);
			if ((this || _global).onError) {
				(this || _global).onError.call(this || _global, error);
			}
		};
		var Expressions = (function () {
			var ob2 = {};
			ob2.initExpressions = initExpressions;
			function initExpressions(animation) {
				var stackCount = 0;
				var registers = [];
				function pushExpression() {
					stackCount += 1;
				}
				function popExpression() {
					stackCount -= 1;
					if (stackCount === 0) {
						releaseInstances();
					}
				}
				function registerExpressionProperty(expression) {
					if (registers.indexOf(expression) === -1) {
						registers.push(expression);
					}
				}
				function releaseInstances() {
					var i;
					var len = registers.length;
					for (i = 0; i < len; i += 1) {
						registers[i].release();
					}
					registers.length = 0;
				}
				animation.renderer.compInterface = CompExpressionInterface(
					animation.renderer,
				);
				animation.renderer.globalData.projectInterface.registerComposition(
					animation.renderer,
				);
				animation.renderer.globalData.pushExpression = pushExpression;
				animation.renderer.globalData.popExpression = popExpression;
				animation.renderer.globalData.registerExpressionProperty =
					registerExpressionProperty;
			}
			return ob2;
		})();
		expressionsPlugin = Expressions;
		var ExpressionManager = (function () {
			"use strict";

			var ob = {};
			var Math = BMMath;
			var window = null;
			var document = null;
			function $bm_isInstanceOfArray(arr) {
				return arr.constructor === Array || arr.constructor === Float32Array;
			}
			function isNumerable(tOfV, v) {
				return (
					tOfV === "number" ||
					tOfV === "boolean" ||
					tOfV === "string" ||
					v instanceof Number
				);
			}
			function $bm_neg(a) {
				var tOfA = typeof a;
				if (tOfA === "number" || tOfA === "boolean" || a instanceof Number) {
					return -a;
				}
				if ($bm_isInstanceOfArray(a)) {
					var i;
					var lenA = a.length;
					var retArr = [];
					for (i = 0; i < lenA; i += 1) {
						retArr[i] = -a[i];
					}
					return retArr;
				}
				if (a.propType) {
					return a.v;
				}
				return -a;
			}
			var easeInBez = BezierFactory.getBezierEasing(
				0.333,
				0,
				0.833,
				0.833,
				"easeIn",
			).get;
			var easeOutBez = BezierFactory.getBezierEasing(
				0.167,
				0.167,
				0.667,
				1,
				"easeOut",
			).get;
			var easeInOutBez = BezierFactory.getBezierEasing(
				0.33,
				0,
				0.667,
				1,
				"easeInOut",
			).get;
			function sum(a, b) {
				var tOfA = typeof a;
				var tOfB = typeof b;
				if (tOfA === "string" || tOfB === "string") {
					return a + b;
				}
				if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
					return a + b;
				}
				if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
					a = a.slice(0);
					a[0] += b;
					return a;
				}
				if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
					b = b.slice(0);
					b[0] = a + b[0];
					return b;
				}
				if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
					var i = 0;
					var lenA = a.length;
					var lenB = b.length;
					var retArr = [];
					while (i < lenA || i < lenB) {
						if (
							(typeof a[i] === "number" || a[i] instanceof Number) &&
							(typeof b[i] === "number" || b[i] instanceof Number)
						) {
							retArr[i] = a[i] + b[i];
						} else {
							retArr[i] = b[i] === void 0 ? a[i] : a[i] || b[i];
						}
						i += 1;
					}
					return retArr;
				}
				return 0;
			}
			var add = sum;
			function sub(a, b) {
				var tOfA = typeof a;
				var tOfB = typeof b;
				if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
					if (tOfA === "string") {
						a = parseInt(a, 10);
					}
					if (tOfB === "string") {
						b = parseInt(b, 10);
					}
					return a - b;
				}
				if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
					a = a.slice(0);
					a[0] -= b;
					return a;
				}
				if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
					b = b.slice(0);
					b[0] = a - b[0];
					return b;
				}
				if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
					var i = 0;
					var lenA = a.length;
					var lenB = b.length;
					var retArr = [];
					while (i < lenA || i < lenB) {
						if (
							(typeof a[i] === "number" || a[i] instanceof Number) &&
							(typeof b[i] === "number" || b[i] instanceof Number)
						) {
							retArr[i] = a[i] - b[i];
						} else {
							retArr[i] = b[i] === void 0 ? a[i] : a[i] || b[i];
						}
						i += 1;
					}
					return retArr;
				}
				return 0;
			}
			function mul(a, b) {
				var tOfA = typeof a;
				var tOfB = typeof b;
				var arr;
				if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
					return a * b;
				}
				var i;
				var len;
				if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
					len = a.length;
					arr = createTypedArray("float32", len);
					for (i = 0; i < len; i += 1) {
						arr[i] = a[i] * b;
					}
					return arr;
				}
				if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
					len = b.length;
					arr = createTypedArray("float32", len);
					for (i = 0; i < len; i += 1) {
						arr[i] = a * b[i];
					}
					return arr;
				}
				return 0;
			}
			function div(a, b) {
				var tOfA = typeof a;
				var tOfB = typeof b;
				var arr;
				if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
					return a / b;
				}
				var i;
				var len;
				if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
					len = a.length;
					arr = createTypedArray("float32", len);
					for (i = 0; i < len; i += 1) {
						arr[i] = a[i] / b;
					}
					return arr;
				}
				if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
					len = b.length;
					arr = createTypedArray("float32", len);
					for (i = 0; i < len; i += 1) {
						arr[i] = a / b[i];
					}
					return arr;
				}
				return 0;
			}
			function mod(a, b) {
				if (typeof a === "string") {
					a = parseInt(a, 10);
				}
				if (typeof b === "string") {
					b = parseInt(b, 10);
				}
				return a % b;
			}
			var $bm_sum = sum;
			var $bm_sub = sub;
			var $bm_mul = mul;
			var $bm_div = div;
			var $bm_mod = mod;
			function clamp(num, min, max) {
				if (min > max) {
					var mm = max;
					max = min;
					min = mm;
				}
				return Math.min(Math.max(num, min), max);
			}
			function radiansToDegrees(val2) {
				return val2 / degToRads;
			}
			var radians_to_degrees = radiansToDegrees;
			function degreesToRadians(val2) {
				return val2 * degToRads;
			}
			var degrees_to_radians = radiansToDegrees;
			var helperLengthArray = [0, 0, 0, 0, 0, 0];
			function length(arr1, arr2) {
				if (typeof arr1 === "number" || arr1 instanceof Number) {
					arr2 = arr2 || 0;
					return Math.abs(arr1 - arr2);
				}
				if (!arr2) {
					arr2 = helperLengthArray;
				}
				var i;
				var len = Math.min(arr1.length, arr2.length);
				var addedLength = 0;
				for (i = 0; i < len; i += 1) {
					addedLength += Math.pow(arr2[i] - arr1[i], 2);
				}
				return Math.sqrt(addedLength);
			}
			function normalize(vec) {
				return div(vec, length(vec));
			}
			function rgbToHsl(val2) {
				var r = val2[0];
				var g = val2[1];
				var b = val2[2];
				var max = Math.max(r, g, b);
				var min = Math.min(r, g, b);
				var h;
				var s;
				var l = (max + min) / 2;
				if (max === min) {
					h = 0;
					s = 0;
				} else {
					var d = max - min;
					s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
					switch (max) {
						case r:
							h = (g - b) / d + (g < b ? 6 : 0);
							break;
						case g:
							h = (b - r) / d + 2;
							break;
						case b:
							h = (r - g) / d + 4;
							break;
						default:
							break;
					}
					h /= 6;
				}
				return [h, s, l, val2[3]];
			}
			function hue2rgb(p, q, t) {
				if (t < 0) t += 1;
				if (t > 1) t -= 1;
				if (t < 1 / 6) return p + (q - p) * 6 * t;
				if (t < 1 / 2) return q;
				if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
				return p;
			}
			function hslToRgb(val2) {
				var h = val2[0];
				var s = val2[1];
				var l = val2[2];
				var r;
				var g;
				var b;
				if (s === 0) {
					r = l;
					b = l;
					g = l;
				} else {
					var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
					var p = 2 * l - q;
					r = hue2rgb(p, q, h + 1 / 3);
					g = hue2rgb(p, q, h);
					b = hue2rgb(p, q, h - 1 / 3);
				}
				return [r, g, b, val2[3]];
			}
			function linear(t, tMin, tMax, value1, value2) {
				if (value1 === void 0 || value2 === void 0) {
					value1 = tMin;
					value2 = tMax;
					tMin = 0;
					tMax = 1;
				}
				if (tMax < tMin) {
					var _tMin = tMax;
					tMax = tMin;
					tMin = _tMin;
				}
				if (t <= tMin) {
					return value1;
				}
				if (t >= tMax) {
					return value2;
				}
				var perc = tMax === tMin ? 0 : (t - tMin) / (tMax - tMin);
				if (!value1.length) {
					return value1 + (value2 - value1) * perc;
				}
				var i;
				var len = value1.length;
				var arr = createTypedArray("float32", len);
				for (i = 0; i < len; i += 1) {
					arr[i] = value1[i] + (value2[i] - value1[i]) * perc;
				}
				return arr;
			}
			function random(min, max) {
				if (max === void 0) {
					if (min === void 0) {
						min = 0;
						max = 1;
					} else {
						max = min;
						min = void 0;
					}
				}
				if (max.length) {
					var i;
					var len = max.length;
					if (!min) {
						min = createTypedArray("float32", len);
					}
					var arr = createTypedArray("float32", len);
					var rnd = BMMath.random();
					for (i = 0; i < len; i += 1) {
						arr[i] = min[i] + rnd * (max[i] - min[i]);
					}
					return arr;
				}
				if (min === void 0) {
					min = 0;
				}
				var rndm = BMMath.random();
				return min + rndm * (max - min);
			}
			function createPath(points, inTangents, outTangents, closed) {
				var i;
				var len = points.length;
				var path = shapePool.newElement();
				path.setPathData(!!closed, len);
				var arrPlaceholder = [0, 0];
				var inVertexPoint;
				var outVertexPoint;
				for (i = 0; i < len; i += 1) {
					inVertexPoint =
						inTangents && inTangents[i] ? inTangents[i] : arrPlaceholder;
					outVertexPoint =
						outTangents && outTangents[i] ? outTangents[i] : arrPlaceholder;
					path.setTripleAt(
						points[i][0],
						points[i][1],
						outVertexPoint[0] + points[i][0],
						outVertexPoint[1] + points[i][1],
						inVertexPoint[0] + points[i][0],
						inVertexPoint[1] + points[i][1],
						i,
						true,
					);
				}
				return path;
			}
			function initiateExpression(elem, data, property) {
				var val = data.x;
				var needsVelocity = /velocity(?![\w\d])/.test(val);
				var _needsRandom = val.indexOf("random") !== -1;
				var elemType = elem.data.ty;
				var transform;
				var $bm_transform;
				var content;
				var effect;
				var thisProperty = property;
				thisProperty.valueAtTime = thisProperty.getValueAtTime;
				Object.defineProperty(thisProperty, "value", {
					get: function () {
						return thisProperty.v;
					},
				});
				elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate;
				elem.comp.displayStartTime = 0;
				var inPoint = elem.data.ip / elem.comp.globalData.frameRate;
				var outPoint = elem.data.op / elem.comp.globalData.frameRate;
				var width = elem.data.sw ? elem.data.sw : 0;
				var height = elem.data.sh ? elem.data.sh : 0;
				var name = elem.data.nm;
				var loopIn;
				var loop_in;
				var loopOut;
				var loop_out;
				var smooth;
				var toWorld;
				var fromWorld;
				var fromComp;
				var toComp;
				var fromCompToSurface;
				var position;
				var rotation;
				var anchorPoint;
				var scale;
				var thisLayer;
				var thisComp;
				var mask;
				var valueAtTime;
				var velocityAtTime;
				var scoped_bm_rt;
				var expression_function = eval(
					"[function _expression_function(){" + val + ";scoped_bm_rt=$bm_rt}]",
				)[0];
				var numKeys = property.kf ? data.k.length : 0;
				var active =
					!(this || _global).data || (this || _global).data.hd !== true;
				var wiggle = function wiggle2(freq, amp) {
					var iWiggle;
					var j;
					var lenWiggle = (this || _global).pv.length
						? (this || _global).pv.length
						: 1;
					var addedAmps = createTypedArray("float32", lenWiggle);
					freq = 5;
					var iterations = Math.floor(time * freq);
					iWiggle = 0;
					j = 0;
					while (iWiggle < iterations) {
						for (j = 0; j < lenWiggle; j += 1) {
							addedAmps[j] += -amp + amp * 2 * BMMath.random();
						}
						iWiggle += 1;
					}
					var periods = time * freq;
					var perc = periods - Math.floor(periods);
					var arr = createTypedArray("float32", lenWiggle);
					if (lenWiggle > 1) {
						for (j = 0; j < lenWiggle; j += 1) {
							arr[j] =
								(this || _global).pv[j] +
								addedAmps[j] +
								(-amp + amp * 2 * BMMath.random()) * perc;
						}
						return arr;
					}
					return (
						(this || _global).pv +
						addedAmps[0] +
						(-amp + amp * 2 * BMMath.random()) * perc
					);
				}.bind(this || _global);
				if (thisProperty.loopIn) {
					loopIn = thisProperty.loopIn.bind(thisProperty);
					loop_in = loopIn;
				}
				if (thisProperty.loopOut) {
					loopOut = thisProperty.loopOut.bind(thisProperty);
					loop_out = loopOut;
				}
				if (thisProperty.smooth) {
					smooth = thisProperty.smooth.bind(thisProperty);
				}
				function loopInDuration(type, duration) {
					return loopIn(type, duration, true);
				}
				function loopOutDuration(type, duration) {
					return loopOut(type, duration, true);
				}
				if ((this || _global).getValueAtTime) {
					valueAtTime = (this || _global).getValueAtTime.bind(this || _global);
				}
				if ((this || _global).getVelocityAtTime) {
					velocityAtTime = (this || _global).getVelocityAtTime.bind(
						this || _global,
					);
				}
				var comp = elem.comp.globalData.projectInterface.bind(
					elem.comp.globalData.projectInterface,
				);
				function lookAt(elem1, elem2) {
					var fVec = [
						elem2[0] - elem1[0],
						elem2[1] - elem1[1],
						elem2[2] - elem1[2],
					];
					var pitch =
						Math.atan2(
							fVec[0],
							Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2]),
						) / degToRads;
					var yaw = -Math.atan2(fVec[1], fVec[2]) / degToRads;
					return [yaw, pitch, 0];
				}
				function easeOut(t, tMin, tMax, val1, val2) {
					return applyEase(easeOutBez, t, tMin, tMax, val1, val2);
				}
				function easeIn(t, tMin, tMax, val1, val2) {
					return applyEase(easeInBez, t, tMin, tMax, val1, val2);
				}
				function ease(t, tMin, tMax, val1, val2) {
					return applyEase(easeInOutBez, t, tMin, tMax, val1, val2);
				}
				function applyEase(fn, t, tMin, tMax, val1, val2) {
					if (val1 === void 0) {
						val1 = tMin;
						val2 = tMax;
					} else {
						t = (t - tMin) / (tMax - tMin);
					}
					if (t > 1) {
						t = 1;
					} else if (t < 0) {
						t = 0;
					}
					var mult = fn(t);
					if ($bm_isInstanceOfArray(val1)) {
						var iKey;
						var lenKey = val1.length;
						var arr = createTypedArray("float32", lenKey);
						for (iKey = 0; iKey < lenKey; iKey += 1) {
							arr[iKey] = (val2[iKey] - val1[iKey]) * mult + val1[iKey];
						}
						return arr;
					}
					return (val2 - val1) * mult + val1;
				}
				function nearestKey(time2) {
					var iKey;
					var lenKey = data.k.length;
					var index2;
					var keyTime;
					if (!data.k.length || typeof data.k[0] === "number") {
						index2 = 0;
						keyTime = 0;
					} else {
						index2 = -1;
						time2 *= elem.comp.globalData.frameRate;
						if (time2 < data.k[0].t) {
							index2 = 1;
							keyTime = data.k[0].t;
						} else {
							for (iKey = 0; iKey < lenKey - 1; iKey += 1) {
								if (time2 === data.k[iKey].t) {
									index2 = iKey + 1;
									keyTime = data.k[iKey].t;
									break;
								} else if (
									time2 > data.k[iKey].t &&
									time2 < data.k[iKey + 1].t
								) {
									if (time2 - data.k[iKey].t > data.k[iKey + 1].t - time2) {
										index2 = iKey + 2;
										keyTime = data.k[iKey + 1].t;
									} else {
										index2 = iKey + 1;
										keyTime = data.k[iKey].t;
									}
									break;
								}
							}
							if (index2 === -1) {
								index2 = iKey + 1;
								keyTime = data.k[iKey].t;
							}
						}
					}
					var obKey = {};
					obKey.index = index2;
					obKey.time = keyTime / elem.comp.globalData.frameRate;
					return obKey;
				}
				function key(ind) {
					var obKey;
					var iKey;
					var lenKey;
					if (!data.k.length || typeof data.k[0] === "number") {
						throw new Error("The property has no keyframe at index " + ind);
					}
					ind -= 1;
					obKey = {
						time: data.k[ind].t / elem.comp.globalData.frameRate,
						value: [],
					};
					var arr = Object.prototype.hasOwnProperty.call(data.k[ind], "s")
						? data.k[ind].s
						: data.k[ind - 1].e;
					lenKey = arr.length;
					for (iKey = 0; iKey < lenKey; iKey += 1) {
						obKey[iKey] = arr[iKey];
						obKey.value[iKey] = arr[iKey];
					}
					return obKey;
				}
				function framesToTime(frames, fps) {
					if (!fps) {
						fps = elem.comp.globalData.frameRate;
					}
					return frames / fps;
				}
				function timeToFrames(t, fps) {
					if (!t && t !== 0) {
						t = time;
					}
					if (!fps) {
						fps = elem.comp.globalData.frameRate;
					}
					return t * fps;
				}
				function seedRandom(seed) {
					BMMath.seedrandom(randSeed + seed);
				}
				function sourceRectAtTime() {
					return elem.sourceRectAtTime();
				}
				function substring(init, end) {
					if (typeof value === "string") {
						if (end === void 0) {
							return value.substring(init);
						}
						return value.substring(init, end);
					}
					return "";
				}
				function substr(init, end) {
					if (typeof value === "string") {
						if (end === void 0) {
							return value.substr(init);
						}
						return value.substr(init, end);
					}
					return "";
				}
				function posterizeTime(framesPerSecond) {
					time =
						framesPerSecond === 0
							? 0
							: Math.floor(time * framesPerSecond) / framesPerSecond;
					value = valueAtTime(time);
				}
				var time;
				var velocity;
				var value;
				var text;
				var textIndex;
				var textTotal;
				var selectorValue;
				var index = elem.data.ind;
				var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
				var parent;
				var randSeed = Math.floor(Math.random() * 1e6);
				var globalData = elem.globalData;
				function executeExpression(_value) {
					value = _value;
					if (_needsRandom) {
						seedRandom(randSeed);
					}
					if (
						(this || _global).frameExpressionId === elem.globalData.frameId &&
						(this || _global).propType !== "textSelector"
					) {
						return value;
					}
					if ((this || _global).propType === "textSelector") {
						textIndex = (this || _global).textIndex;
						textTotal = (this || _global).textTotal;
						selectorValue = (this || _global).selectorValue;
					}
					if (!thisLayer) {
						text = elem.layerInterface.text;
						thisLayer = elem.layerInterface;
						thisComp = elem.comp.compInterface;
						toWorld = thisLayer.toWorld.bind(thisLayer);
						fromWorld = thisLayer.fromWorld.bind(thisLayer);
						fromComp = thisLayer.fromComp.bind(thisLayer);
						toComp = thisLayer.toComp.bind(thisLayer);
						mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
						fromCompToSurface = fromComp;
					}
					if (!transform) {
						transform = elem.layerInterface("ADBE Transform Group");
						$bm_transform = transform;
						if (transform) {
							anchorPoint = transform.anchorPoint;
						}
					}
					if (elemType === 4 && !content) {
						content = thisLayer("ADBE Root Vectors Group");
					}
					if (!effect) {
						effect = thisLayer(4);
					}
					hasParent = !!(elem.hierarchy && elem.hierarchy.length);
					if (hasParent && !parent) {
						parent = elem.hierarchy[0].layerInterface;
					}
					time =
						(this || _global).comp.renderedFrame /
						(this || _global).comp.globalData.frameRate;
					if (needsVelocity) {
						velocity = velocityAtTime(time);
					}
					expression_function();
					(this || _global).frameExpressionId = elem.globalData.frameId;
					if (scoped_bm_rt.propType === "shape") {
						scoped_bm_rt = scoped_bm_rt.v;
					}
					return scoped_bm_rt;
				}
				return executeExpression;
			}
			ob.initiateExpression = initiateExpression;
			return ob;
		})();
		var expressionHelpers = /* @__PURE__ */ (function () {
			function searchExpressions(elem2, data2, prop) {
				if (data2.x) {
					prop.k = true;
					prop.x = true;
					prop.initiateExpression = ExpressionManager.initiateExpression;
					prop.effectsSequence.push(
						prop.initiateExpression(elem2, data2, prop).bind(prop),
					);
				}
			}
			function getValueAtTime(frameNum) {
				frameNum *= (this || _global).elem.globalData.frameRate;
				frameNum -= (this || _global).offsetTime;
				if (frameNum !== (this || _global)._cachingAtTime.lastFrame) {
					(this || _global)._cachingAtTime.lastIndex =
						(this || _global)._cachingAtTime.lastFrame < frameNum
							? (this || _global)._cachingAtTime.lastIndex
							: 0;
					(this || _global)._cachingAtTime.value = this.interpolateValue(
						frameNum,
						(this || _global)._cachingAtTime,
					);
					(this || _global)._cachingAtTime.lastFrame = frameNum;
				}
				return (this || _global)._cachingAtTime.value;
			}
			function getSpeedAtTime(frameNum) {
				var delta = -0.01;
				var v1 = this.getValueAtTime(frameNum);
				var v2 = this.getValueAtTime(frameNum + delta);
				var speed = 0;
				if (v1.length) {
					var i;
					for (i = 0; i < v1.length; i += 1) {
						speed += Math.pow(v2[i] - v1[i], 2);
					}
					speed = Math.sqrt(speed) * 100;
				} else {
					speed = 0;
				}
				return speed;
			}
			function getVelocityAtTime(frameNum) {
				if ((this || _global).vel !== void 0) {
					return (this || _global).vel;
				}
				var delta = -1e-3;
				var v1 = this.getValueAtTime(frameNum);
				var v2 = this.getValueAtTime(frameNum + delta);
				var velocity2;
				if (v1.length) {
					velocity2 = createTypedArray("float32", v1.length);
					var i;
					for (i = 0; i < v1.length; i += 1) {
						velocity2[i] = (v2[i] - v1[i]) / delta;
					}
				} else {
					velocity2 = (v2 - v1) / delta;
				}
				return velocity2;
			}
			function getStaticValueAtTime() {
				return (this || _global).pv;
			}
			function setGroupProperty(propertyGroup) {
				(this || _global).propertyGroup = propertyGroup;
			}
			return {
				searchExpressions,
				getSpeedAtTime,
				getVelocityAtTime,
				getValueAtTime,
				getStaticValueAtTime,
				setGroupProperty,
			};
		})();
		(function addPropertyDecorator() {
			function loopOut2(type, duration, durationFlag) {
				if (!(this || _global).k || !(this || _global).keyframes) {
					return (this || _global).pv;
				}
				type = type ? type.toLowerCase() : "";
				var currentFrame = (this || _global).comp.renderedFrame;
				var keyframes = (this || _global).keyframes;
				var lastKeyFrame = keyframes[keyframes.length - 1].t;
				if (currentFrame <= lastKeyFrame) {
					return (this || _global).pv;
				}
				var cycleDuration;
				var firstKeyFrame;
				if (!durationFlag) {
					if (!duration || duration > keyframes.length - 1) {
						duration = keyframes.length - 1;
					}
					firstKeyFrame = keyframes[keyframes.length - 1 - duration].t;
					cycleDuration = lastKeyFrame - firstKeyFrame;
				} else {
					if (!duration) {
						cycleDuration = Math.max(
							0,
							lastKeyFrame - (this || _global).elem.data.ip,
						);
					} else {
						cycleDuration = Math.abs(
							lastKeyFrame -
								(this || _global).elem.comp.globalData.frameRate * duration,
						);
					}
					firstKeyFrame = lastKeyFrame - cycleDuration;
				}
				var i;
				var len;
				var ret;
				if (type === "pingpong") {
					var iterations = Math.floor(
						(currentFrame - firstKeyFrame) / cycleDuration,
					);
					if (iterations % 2 !== 0) {
						return this.getValueAtTime(
							(cycleDuration -
								((currentFrame - firstKeyFrame) % cycleDuration) +
								firstKeyFrame) /
								(this || _global).comp.globalData.frameRate,
							0,
						);
					}
				} else if (type === "offset") {
					var initV = this.getValueAtTime(
						firstKeyFrame / (this || _global).comp.globalData.frameRate,
						0,
					);
					var endV = this.getValueAtTime(
						lastKeyFrame / (this || _global).comp.globalData.frameRate,
						0,
					);
					var current = this.getValueAtTime(
						(((currentFrame - firstKeyFrame) % cycleDuration) + firstKeyFrame) /
							(this || _global).comp.globalData.frameRate,
						0,
					);
					var repeats = Math.floor(
						(currentFrame - firstKeyFrame) / cycleDuration,
					);
					if ((this || _global).pv.length) {
						ret = new Array(initV.length);
						len = ret.length;
						for (i = 0; i < len; i += 1) {
							ret[i] = (endV[i] - initV[i]) * repeats + current[i];
						}
						return ret;
					}
					return (endV - initV) * repeats + current;
				} else if (type === "continue") {
					var lastValue = this.getValueAtTime(
						lastKeyFrame / (this || _global).comp.globalData.frameRate,
						0,
					);
					var nextLastValue = this.getValueAtTime(
						(lastKeyFrame - 1e-3) / (this || _global).comp.globalData.frameRate,
						0,
					);
					if ((this || _global).pv.length) {
						ret = new Array(lastValue.length);
						len = ret.length;
						for (i = 0; i < len; i += 1) {
							ret[i] =
								lastValue[i] +
								((lastValue[i] - nextLastValue[i]) *
									((currentFrame - lastKeyFrame) /
										(this || _global).comp.globalData.frameRate)) /
									5e-4;
						}
						return ret;
					}
					return (
						lastValue +
						(lastValue - nextLastValue) * ((currentFrame - lastKeyFrame) / 1e-3)
					);
				}
				return this.getValueAtTime(
					(((currentFrame - firstKeyFrame) % cycleDuration) + firstKeyFrame) /
						(this || _global).comp.globalData.frameRate,
					0,
				);
			}
			function loopIn2(type, duration, durationFlag) {
				if (!(this || _global).k) {
					return (this || _global).pv;
				}
				type = type ? type.toLowerCase() : "";
				var currentFrame = (this || _global).comp.renderedFrame;
				var keyframes = (this || _global).keyframes;
				var firstKeyFrame = keyframes[0].t;
				if (currentFrame >= firstKeyFrame) {
					return (this || _global).pv;
				}
				var cycleDuration;
				var lastKeyFrame;
				if (!durationFlag) {
					if (!duration || duration > keyframes.length - 1) {
						duration = keyframes.length - 1;
					}
					lastKeyFrame = keyframes[duration].t;
					cycleDuration = lastKeyFrame - firstKeyFrame;
				} else {
					if (!duration) {
						cycleDuration = Math.max(
							0,
							(this || _global).elem.data.op - firstKeyFrame,
						);
					} else {
						cycleDuration = Math.abs(
							(this || _global).elem.comp.globalData.frameRate * duration,
						);
					}
					lastKeyFrame = firstKeyFrame + cycleDuration;
				}
				var i;
				var len;
				var ret;
				if (type === "pingpong") {
					var iterations = Math.floor(
						(firstKeyFrame - currentFrame) / cycleDuration,
					);
					if (iterations % 2 === 0) {
						return this.getValueAtTime(
							(((firstKeyFrame - currentFrame) % cycleDuration) +
								firstKeyFrame) /
								(this || _global).comp.globalData.frameRate,
							0,
						);
					}
				} else if (type === "offset") {
					var initV = this.getValueAtTime(
						firstKeyFrame / (this || _global).comp.globalData.frameRate,
						0,
					);
					var endV = this.getValueAtTime(
						lastKeyFrame / (this || _global).comp.globalData.frameRate,
						0,
					);
					var current = this.getValueAtTime(
						(cycleDuration -
							((firstKeyFrame - currentFrame) % cycleDuration) +
							firstKeyFrame) /
							(this || _global).comp.globalData.frameRate,
						0,
					);
					var repeats =
						Math.floor((firstKeyFrame - currentFrame) / cycleDuration) + 1;
					if ((this || _global).pv.length) {
						ret = new Array(initV.length);
						len = ret.length;
						for (i = 0; i < len; i += 1) {
							ret[i] = current[i] - (endV[i] - initV[i]) * repeats;
						}
						return ret;
					}
					return current - (endV - initV) * repeats;
				} else if (type === "continue") {
					var firstValue = this.getValueAtTime(
						firstKeyFrame / (this || _global).comp.globalData.frameRate,
						0,
					);
					var nextFirstValue = this.getValueAtTime(
						(firstKeyFrame + 1e-3) /
							(this || _global).comp.globalData.frameRate,
						0,
					);
					if ((this || _global).pv.length) {
						ret = new Array(firstValue.length);
						len = ret.length;
						for (i = 0; i < len; i += 1) {
							ret[i] =
								firstValue[i] +
								((firstValue[i] - nextFirstValue[i]) *
									(firstKeyFrame - currentFrame)) /
									1e-3;
						}
						return ret;
					}
					return (
						firstValue +
						((firstValue - nextFirstValue) * (firstKeyFrame - currentFrame)) /
							1e-3
					);
				}
				return this.getValueAtTime(
					(cycleDuration -
						(((firstKeyFrame - currentFrame) % cycleDuration) +
							firstKeyFrame)) /
						(this || _global).comp.globalData.frameRate,
					0,
				);
			}
			function smooth2(width2, samples) {
				if (!(this || _global).k) {
					return (this || _global).pv;
				}
				width2 = (width2 || 0.4) * 0.5;
				samples = Math.floor(samples || 5);
				if (samples <= 1) {
					return (this || _global).pv;
				}
				var currentTime =
					(this || _global).comp.renderedFrame /
					(this || _global).comp.globalData.frameRate;
				var initFrame = currentTime - width2;
				var endFrame = currentTime + width2;
				var sampleFrequency =
					samples > 1 ? (endFrame - initFrame) / (samples - 1) : 1;
				var i = 0;
				var j = 0;
				var value2;
				if ((this || _global).pv.length) {
					value2 = createTypedArray("float32", (this || _global).pv.length);
				} else {
					value2 = 0;
				}
				var sampleValue;
				while (i < samples) {
					sampleValue = this.getValueAtTime(initFrame + i * sampleFrequency);
					if ((this || _global).pv.length) {
						for (j = 0; j < (this || _global).pv.length; j += 1) {
							value2[j] += sampleValue[j];
						}
					} else {
						value2 += sampleValue;
					}
					i += 1;
				}
				if ((this || _global).pv.length) {
					for (j = 0; j < (this || _global).pv.length; j += 1) {
						value2[j] /= samples;
					}
				} else {
					value2 /= samples;
				}
				return value2;
			}
			function getTransformValueAtTime(time2) {
				if (!(this || _global)._transformCachingAtTime) {
					(this || _global)._transformCachingAtTime = {
						v: new Matrix(),
					};
				}
				var matrix = (this || _global)._transformCachingAtTime.v;
				matrix.cloneFromProps((this || _global).pre.props);
				if ((this || _global).appliedTransformations < 1) {
					var anchor = (this || _global).a.getValueAtTime(time2);
					matrix.translate(
						-anchor[0] * (this || _global).a.mult,
						-anchor[1] * (this || _global).a.mult,
						anchor[2] * (this || _global).a.mult,
					);
				}
				if ((this || _global).appliedTransformations < 2) {
					var scale2 = (this || _global).s.getValueAtTime(time2);
					matrix.scale(
						scale2[0] * (this || _global).s.mult,
						scale2[1] * (this || _global).s.mult,
						scale2[2] * (this || _global).s.mult,
					);
				}
				if (
					(this || _global).sk &&
					(this || _global).appliedTransformations < 3
				) {
					var skew = (this || _global).sk.getValueAtTime(time2);
					var skewAxis = (this || _global).sa.getValueAtTime(time2);
					matrix.skewFromAxis(
						-skew * (this || _global).sk.mult,
						skewAxis * (this || _global).sa.mult,
					);
				}
				if (
					(this || _global).r &&
					(this || _global).appliedTransformations < 4
				) {
					var rotation2 = (this || _global).r.getValueAtTime(time2);
					matrix.rotate(-rotation2 * (this || _global).r.mult);
				} else if (
					!(this || _global).r &&
					(this || _global).appliedTransformations < 4
				) {
					var rotationZ = (this || _global).rz.getValueAtTime(time2);
					var rotationY = (this || _global).ry.getValueAtTime(time2);
					var rotationX = (this || _global).rx.getValueAtTime(time2);
					var orientation = (this || _global).or.getValueAtTime(time2);
					matrix
						.rotateZ(-rotationZ * (this || _global).rz.mult)
						.rotateY(rotationY * (this || _global).ry.mult)
						.rotateX(rotationX * (this || _global).rx.mult)
						.rotateZ(-orientation[2] * (this || _global).or.mult)
						.rotateY(orientation[1] * (this || _global).or.mult)
						.rotateX(orientation[0] * (this || _global).or.mult);
				}
				if ((this || _global).data.p && (this || _global).data.p.s) {
					var positionX = (this || _global).px.getValueAtTime(time2);
					var positionY = (this || _global).py.getValueAtTime(time2);
					if ((this || _global).data.p.z) {
						var positionZ = (this || _global).pz.getValueAtTime(time2);
						matrix.translate(
							positionX * (this || _global).px.mult,
							positionY * (this || _global).py.mult,
							-positionZ * (this || _global).pz.mult,
						);
					} else {
						matrix.translate(
							positionX * (this || _global).px.mult,
							positionY * (this || _global).py.mult,
							0,
						);
					}
				} else {
					var position2 = (this || _global).p.getValueAtTime(time2);
					matrix.translate(
						position2[0] * (this || _global).p.mult,
						position2[1] * (this || _global).p.mult,
						-position2[2] * (this || _global).p.mult,
					);
				}
				return matrix;
			}
			function getTransformStaticValueAtTime() {
				return (this || _global).v.clone(new Matrix());
			}
			var getTransformProperty = TransformPropertyFactory.getTransformProperty;
			TransformPropertyFactory.getTransformProperty = function (
				elem2,
				data2,
				container,
			) {
				var prop = getTransformProperty(elem2, data2, container);
				if (prop.dynamicProperties.length) {
					prop.getValueAtTime = getTransformValueAtTime.bind(prop);
				} else {
					prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
				}
				prop.setGroupProperty = expressionHelpers.setGroupProperty;
				return prop;
			};
			var propertyGetProp = PropertyFactory.getProp;
			PropertyFactory.getProp = function (elem2, data2, type, mult, container) {
				var prop = propertyGetProp(elem2, data2, type, mult, container);
				if (prop.kf) {
					prop.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop);
				} else {
					prop.getValueAtTime =
						expressionHelpers.getStaticValueAtTime.bind(prop);
				}
				prop.setGroupProperty = expressionHelpers.setGroupProperty;
				prop.loopOut = loopOut2;
				prop.loopIn = loopIn2;
				prop.smooth = smooth2;
				prop.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop);
				prop.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop);
				prop.numKeys = data2.a === 1 ? data2.k.length : 0;
				prop.propertyIndex = data2.ix;
				var value2 = 0;
				if (type !== 0) {
					value2 = createTypedArray(
						"float32",
						data2.a === 1 ? data2.k[0].s.length : data2.k.length,
					);
				}
				prop._cachingAtTime = {
					lastFrame: initialDefaultFrame,
					lastIndex: 0,
					value: value2,
				};
				expressionHelpers.searchExpressions(elem2, data2, prop);
				if (prop.k) {
					container.addDynamicProperty(prop);
				}
				return prop;
			};
			function getShapeValueAtTime(frameNum) {
				if (!(this || _global)._cachingAtTime) {
					(this || _global)._cachingAtTime = {
						shapeValue: shapePool.clone((this || _global).pv),
						lastIndex: 0,
						lastTime: initialDefaultFrame,
					};
				}
				frameNum *= (this || _global).elem.globalData.frameRate;
				frameNum -= (this || _global).offsetTime;
				if (frameNum !== (this || _global)._cachingAtTime.lastTime) {
					(this || _global)._cachingAtTime.lastIndex =
						(this || _global)._cachingAtTime.lastTime < frameNum
							? (this || _global)._caching.lastIndex
							: 0;
					(this || _global)._cachingAtTime.lastTime = frameNum;
					this.interpolateShape(
						frameNum,
						(this || _global)._cachingAtTime.shapeValue,
						(this || _global)._cachingAtTime,
					);
				}
				return (this || _global)._cachingAtTime.shapeValue;
			}
			var ShapePropertyConstructorFunction =
				ShapePropertyFactory.getConstructorFunction();
			var KeyframedShapePropertyConstructorFunction =
				ShapePropertyFactory.getKeyframedConstructorFunction();
			function ShapeExpressions() {}
			ShapeExpressions.prototype = {
				vertices: function (prop, time2) {
					if ((this || _global).k) {
						this.getValue();
					}
					var shapePath = (this || _global).v;
					if (time2 !== void 0) {
						shapePath = this.getValueAtTime(time2, 0);
					}
					var i;
					var len = shapePath._length;
					var vertices = shapePath[prop];
					var points = shapePath.v;
					var arr = createSizedArray(len);
					for (i = 0; i < len; i += 1) {
						if (prop === "i" || prop === "o") {
							arr[i] = [
								vertices[i][0] - points[i][0],
								vertices[i][1] - points[i][1],
							];
						} else {
							arr[i] = [vertices[i][0], vertices[i][1]];
						}
					}
					return arr;
				},
				points: function (time2) {
					return this.vertices("v", time2);
				},
				inTangents: function (time2) {
					return this.vertices("i", time2);
				},
				outTangents: function (time2) {
					return this.vertices("o", time2);
				},
				isClosed: function () {
					return (this || _global).v.c;
				},
				pointOnPath: function (perc, time2) {
					var shapePath = (this || _global).v;
					if (time2 !== void 0) {
						shapePath = this.getValueAtTime(time2, 0);
					}
					if (!(this || _global)._segmentsLength) {
						(this || _global)._segmentsLength =
							bez.getSegmentsLength(shapePath);
					}
					var segmentsLength = (this || _global)._segmentsLength;
					var lengths = segmentsLength.lengths;
					var lengthPos = segmentsLength.totalLength * perc;
					var i = 0;
					var len = lengths.length;
					var accumulatedLength = 0;
					var pt;
					while (i < len) {
						if (accumulatedLength + lengths[i].addedLength > lengthPos) {
							var initIndex = i;
							var endIndex = shapePath.c && i === len - 1 ? 0 : i + 1;
							var segmentPerc =
								(lengthPos - accumulatedLength) / lengths[i].addedLength;
							pt = bez.getPointInSegment(
								shapePath.v[initIndex],
								shapePath.v[endIndex],
								shapePath.o[initIndex],
								shapePath.i[endIndex],
								segmentPerc,
								lengths[i],
							);
							break;
						} else {
							accumulatedLength += lengths[i].addedLength;
						}
						i += 1;
					}
					if (!pt) {
						pt = shapePath.c
							? [shapePath.v[0][0], shapePath.v[0][1]]
							: [
									shapePath.v[shapePath._length - 1][0],
									shapePath.v[shapePath._length - 1][1],
								];
					}
					return pt;
				},
				vectorOnPath: function (perc, time2, vectorType) {
					if (perc == 1) {
						perc = (this || _global).v.c;
					} else if (perc == 0) {
						perc = 0.999;
					}
					var pt1 = this.pointOnPath(perc, time2);
					var pt2 = this.pointOnPath(perc + 1e-3, time2);
					var xLength = pt2[0] - pt1[0];
					var yLength = pt2[1] - pt1[1];
					var magnitude = Math.sqrt(
						Math.pow(xLength, 2) + Math.pow(yLength, 2),
					);
					if (magnitude === 0) {
						return [0, 0];
					}
					var unitVector =
						vectorType === "tangent"
							? [xLength / magnitude, yLength / magnitude]
							: [-yLength / magnitude, xLength / magnitude];
					return unitVector;
				},
				tangentOnPath: function (perc, time2) {
					return this.vectorOnPath(perc, time2, "tangent");
				},
				normalOnPath: function (perc, time2) {
					return this.vectorOnPath(perc, time2, "normal");
				},
				setGroupProperty: expressionHelpers.setGroupProperty,
				getValueAtTime: expressionHelpers.getStaticValueAtTime,
			};
			extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
			extendPrototype(
				[ShapeExpressions],
				KeyframedShapePropertyConstructorFunction,
			);
			KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime =
				getShapeValueAtTime;
			KeyframedShapePropertyConstructorFunction.prototype.initiateExpression =
				ExpressionManager.initiateExpression;
			var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;
			ShapePropertyFactory.getShapeProp = function (
				elem2,
				data2,
				type,
				arr,
				trims,
			) {
				var prop = propertyGetShapeProp(elem2, data2, type, arr, trims);
				prop.propertyIndex = data2.ix;
				prop.lock = false;
				if (type === 3) {
					expressionHelpers.searchExpressions(elem2, data2.pt, prop);
				} else if (type === 4) {
					expressionHelpers.searchExpressions(elem2, data2.ks, prop);
				}
				if (prop.k) {
					elem2.addDynamicProperty(prop);
				}
				return prop;
			};
		})();
		(function addDecorator() {
			function searchExpressions() {
				if ((this || _global).data.d.x) {
					(this || _global).calculateExpression =
						ExpressionManager.initiateExpression.bind(this || _global)(
							(this || _global).elem,
							(this || _global).data.d,
							this || _global,
						);
					this.addEffect(
						(this || _global).getExpressionValue.bind(this || _global),
					);
					return true;
				}
				return null;
			}
			TextProperty.prototype.getExpressionValue = function (
				currentValue,
				text2,
			) {
				var newValue = this.calculateExpression(text2);
				if (currentValue.t !== newValue) {
					var newData = {};
					this.copyData(newData, currentValue);
					newData.t = newValue.toString();
					newData.__complete = false;
					return newData;
				}
				return currentValue;
			};
			TextProperty.prototype.searchProperty = function () {
				var isKeyframed = this.searchKeyframes();
				var hasExpressions = this.searchExpressions();
				(this || _global).kf = isKeyframed || hasExpressions;
				return (this || _global).kf;
			};
			TextProperty.prototype.searchExpressions = searchExpressions;
		})();
		var ShapePathInterface = /* @__PURE__ */ (function () {
			return function pathInterfaceFactory(shape, view, propertyGroup) {
				var prop = view.sh;
				function interfaceFunction(val2) {
					if (
						val2 === "Shape" ||
						val2 === "shape" ||
						val2 === "Path" ||
						val2 === "path" ||
						val2 === "ADBE Vector Shape" ||
						val2 === 2
					) {
						return interfaceFunction.path;
					}
					return null;
				}
				var _propertyGroup = propertyGroupFactory(
					interfaceFunction,
					propertyGroup,
				);
				prop.setGroupProperty(PropertyInterface("Path", _propertyGroup));
				Object.defineProperties(interfaceFunction, {
					path: {
						get: function () {
							if (prop.k) {
								prop.getValue();
							}
							return prop;
						},
					},
					shape: {
						get: function () {
							if (prop.k) {
								prop.getValue();
							}
							return prop;
						},
					},
					_name: {
						value: shape.nm,
					},
					ix: {
						value: shape.ix,
					},
					propertyIndex: {
						value: shape.ix,
					},
					mn: {
						value: shape.mn,
					},
					propertyGroup: {
						value: propertyGroup,
					},
				});
				return interfaceFunction;
			};
		})();
		var propertyGroupFactory = /* @__PURE__ */ (function () {
			return function (interfaceFunction, parentPropertyGroup) {
				return function (val2) {
					val2 = val2 === void 0 ? 1 : val2;
					if (val2 <= 0) {
						return interfaceFunction;
					}
					return parentPropertyGroup(val2 - 1);
				};
			};
		})();
		var PropertyInterface = /* @__PURE__ */ (function () {
			return function (propertyName, propertyGroup) {
				var interfaceFunction = {
					_name: propertyName,
				};
				function _propertyGroup(val2) {
					val2 = val2 === void 0 ? 1 : val2;
					if (val2 <= 0) {
						return interfaceFunction;
					}
					return propertyGroup(val2 - 1);
				}
				return _propertyGroup;
			};
		})();
		var ShapeExpressionInterface = /* @__PURE__ */ (function () {
			function iterateElements(shapes, view, propertyGroup) {
				var arr = [];
				var i;
				var len = shapes ? shapes.length : 0;
				for (i = 0; i < len; i += 1) {
					if (shapes[i].ty === "gr") {
						arr.push(groupInterfaceFactory(shapes[i], view[i], propertyGroup));
					} else if (shapes[i].ty === "fl") {
						arr.push(fillInterfaceFactory(shapes[i], view[i], propertyGroup));
					} else if (shapes[i].ty === "st") {
						arr.push(strokeInterfaceFactory(shapes[i], view[i], propertyGroup));
					} else if (shapes[i].ty === "tm") {
						arr.push(trimInterfaceFactory(shapes[i], view[i], propertyGroup));
					} else if (shapes[i].ty === "tr") {
					} else if (shapes[i].ty === "el") {
						arr.push(
							ellipseInterfaceFactory(shapes[i], view[i], propertyGroup),
						);
					} else if (shapes[i].ty === "sr") {
						arr.push(starInterfaceFactory(shapes[i], view[i], propertyGroup));
					} else if (shapes[i].ty === "sh") {
						arr.push(ShapePathInterface(shapes[i], view[i], propertyGroup));
					} else if (shapes[i].ty === "rc") {
						arr.push(rectInterfaceFactory(shapes[i], view[i], propertyGroup));
					} else if (shapes[i].ty === "rd") {
						arr.push(
							roundedInterfaceFactory(shapes[i], view[i], propertyGroup),
						);
					} else if (shapes[i].ty === "rp") {
						arr.push(
							repeaterInterfaceFactory(shapes[i], view[i], propertyGroup),
						);
					}
				}
				return arr;
			}
			function contentsInterfaceFactory(shape, view, propertyGroup) {
				var interfaces;
				var interfaceFunction = function _interfaceFunction(value2) {
					var i = 0;
					var len = interfaces.length;
					while (i < len) {
						if (
							interfaces[i]._name === value2 ||
							interfaces[i].mn === value2 ||
							interfaces[i].propertyIndex === value2 ||
							interfaces[i].ix === value2 ||
							interfaces[i].ind === value2
						) {
							return interfaces[i];
						}
						i += 1;
					}
					if (typeof value2 === "number") {
						return interfaces[value2 - 1];
					}
					return null;
				};
				interfaceFunction.propertyGroup = propertyGroupFactory(
					interfaceFunction,
					propertyGroup,
				);
				interfaces = iterateElements(
					shape.it,
					view.it,
					interfaceFunction.propertyGroup,
				);
				interfaceFunction.numProperties = interfaces.length;
				var transformInterface = transformInterfaceFactory(
					shape.it[shape.it.length - 1],
					view.it[view.it.length - 1],
					interfaceFunction.propertyGroup,
				);
				interfaceFunction.transform = transformInterface;
				interfaceFunction.propertyIndex = shape.cix;
				interfaceFunction._name = shape.nm;
				return interfaceFunction;
			}
			function groupInterfaceFactory(shape, view, propertyGroup) {
				var interfaceFunction = function _interfaceFunction(value2) {
					switch (value2) {
						case "ADBE Vectors Group":
						case "Contents":
						case 2:
							return interfaceFunction.content;
						// Not necessary for now. Keeping them here in case a new case appears
						// case 'ADBE Vector Transform Group':
						// case 3:
						default:
							return interfaceFunction.transform;
					}
				};
				interfaceFunction.propertyGroup = propertyGroupFactory(
					interfaceFunction,
					propertyGroup,
				);
				var content2 = contentsInterfaceFactory(
					shape,
					view,
					interfaceFunction.propertyGroup,
				);
				var transformInterface = transformInterfaceFactory(
					shape.it[shape.it.length - 1],
					view.it[view.it.length - 1],
					interfaceFunction.propertyGroup,
				);
				interfaceFunction.content = content2;
				interfaceFunction.transform = transformInterface;
				Object.defineProperty(interfaceFunction, "_name", {
					get: function () {
						return shape.nm;
					},
				});
				interfaceFunction.numProperties = shape.np;
				interfaceFunction.propertyIndex = shape.ix;
				interfaceFunction.nm = shape.nm;
				interfaceFunction.mn = shape.mn;
				return interfaceFunction;
			}
			function fillInterfaceFactory(shape, view, propertyGroup) {
				function interfaceFunction(val2) {
					if (val2 === "Color" || val2 === "color") {
						return interfaceFunction.color;
					}
					if (val2 === "Opacity" || val2 === "opacity") {
						return interfaceFunction.opacity;
					}
					return null;
				}
				Object.defineProperties(interfaceFunction, {
					color: {
						get: ExpressionPropertyInterface(view.c),
					},
					opacity: {
						get: ExpressionPropertyInterface(view.o),
					},
					_name: {
						value: shape.nm,
					},
					mn: {
						value: shape.mn,
					},
				});
				view.c.setGroupProperty(PropertyInterface("Color", propertyGroup));
				view.o.setGroupProperty(PropertyInterface("Opacity", propertyGroup));
				return interfaceFunction;
			}
			function strokeInterfaceFactory(shape, view, propertyGroup) {
				var _propertyGroup = propertyGroupFactory(
					interfaceFunction,
					propertyGroup,
				);
				var _dashPropertyGroup = propertyGroupFactory(dashOb, _propertyGroup);
				function addPropertyToDashOb(i2) {
					Object.defineProperty(dashOb, shape.d[i2].nm, {
						get: ExpressionPropertyInterface(view.d.dataProps[i2].p),
					});
				}
				var i;
				var len = shape.d ? shape.d.length : 0;
				var dashOb = {};
				for (i = 0; i < len; i += 1) {
					addPropertyToDashOb(i);
					view.d.dataProps[i].p.setGroupProperty(_dashPropertyGroup);
				}
				function interfaceFunction(val2) {
					if (val2 === "Color" || val2 === "color") {
						return interfaceFunction.color;
					}
					if (val2 === "Opacity" || val2 === "opacity") {
						return interfaceFunction.opacity;
					}
					if (val2 === "Stroke Width" || val2 === "stroke width") {
						return interfaceFunction.strokeWidth;
					}
					return null;
				}
				Object.defineProperties(interfaceFunction, {
					color: {
						get: ExpressionPropertyInterface(view.c),
					},
					opacity: {
						get: ExpressionPropertyInterface(view.o),
					},
					strokeWidth: {
						get: ExpressionPropertyInterface(view.w),
					},
					dash: {
						get: function () {
							return dashOb;
						},
					},
					_name: {
						value: shape.nm,
					},
					mn: {
						value: shape.mn,
					},
				});
				view.c.setGroupProperty(PropertyInterface("Color", _propertyGroup));
				view.o.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
				view.w.setGroupProperty(
					PropertyInterface("Stroke Width", _propertyGroup),
				);
				return interfaceFunction;
			}
			function trimInterfaceFactory(shape, view, propertyGroup) {
				function interfaceFunction(val2) {
					if (val2 === shape.e.ix || val2 === "End" || val2 === "end") {
						return interfaceFunction.end;
					}
					if (val2 === shape.s.ix) {
						return interfaceFunction.start;
					}
					if (val2 === shape.o.ix) {
						return interfaceFunction.offset;
					}
					return null;
				}
				var _propertyGroup = propertyGroupFactory(
					interfaceFunction,
					propertyGroup,
				);
				interfaceFunction.propertyIndex = shape.ix;
				view.s.setGroupProperty(PropertyInterface("Start", _propertyGroup));
				view.e.setGroupProperty(PropertyInterface("End", _propertyGroup));
				view.o.setGroupProperty(PropertyInterface("Offset", _propertyGroup));
				interfaceFunction.propertyIndex = shape.ix;
				interfaceFunction.propertyGroup = propertyGroup;
				Object.defineProperties(interfaceFunction, {
					start: {
						get: ExpressionPropertyInterface(view.s),
					},
					end: {
						get: ExpressionPropertyInterface(view.e),
					},
					offset: {
						get: ExpressionPropertyInterface(view.o),
					},
					_name: {
						value: shape.nm,
					},
				});
				interfaceFunction.mn = shape.mn;
				return interfaceFunction;
			}
			function transformInterfaceFactory(shape, view, propertyGroup) {
				function interfaceFunction(value2) {
					if (shape.a.ix === value2 || value2 === "Anchor Point") {
						return interfaceFunction.anchorPoint;
					}
					if (shape.o.ix === value2 || value2 === "Opacity") {
						return interfaceFunction.opacity;
					}
					if (shape.p.ix === value2 || value2 === "Position") {
						return interfaceFunction.position;
					}
					if (
						shape.r.ix === value2 ||
						value2 === "Rotation" ||
						value2 === "ADBE Vector Rotation"
					) {
						return interfaceFunction.rotation;
					}
					if (shape.s.ix === value2 || value2 === "Scale") {
						return interfaceFunction.scale;
					}
					if ((shape.sk && shape.sk.ix === value2) || value2 === "Skew") {
						return interfaceFunction.skew;
					}
					if ((shape.sa && shape.sa.ix === value2) || value2 === "Skew Axis") {
						return interfaceFunction.skewAxis;
					}
					return null;
				}
				var _propertyGroup = propertyGroupFactory(
					interfaceFunction,
					propertyGroup,
				);
				view.transform.mProps.o.setGroupProperty(
					PropertyInterface("Opacity", _propertyGroup),
				);
				view.transform.mProps.p.setGroupProperty(
					PropertyInterface("Position", _propertyGroup),
				);
				view.transform.mProps.a.setGroupProperty(
					PropertyInterface("Anchor Point", _propertyGroup),
				);
				view.transform.mProps.s.setGroupProperty(
					PropertyInterface("Scale", _propertyGroup),
				);
				view.transform.mProps.r.setGroupProperty(
					PropertyInterface("Rotation", _propertyGroup),
				);
				if (view.transform.mProps.sk) {
					view.transform.mProps.sk.setGroupProperty(
						PropertyInterface("Skew", _propertyGroup),
					);
					view.transform.mProps.sa.setGroupProperty(
						PropertyInterface("Skew Angle", _propertyGroup),
					);
				}
				view.transform.op.setGroupProperty(
					PropertyInterface("Opacity", _propertyGroup),
				);
				Object.defineProperties(interfaceFunction, {
					opacity: {
						get: ExpressionPropertyInterface(view.transform.mProps.o),
					},
					position: {
						get: ExpressionPropertyInterface(view.transform.mProps.p),
					},
					anchorPoint: {
						get: ExpressionPropertyInterface(view.transform.mProps.a),
					},
					scale: {
						get: ExpressionPropertyInterface(view.transform.mProps.s),
					},
					rotation: {
						get: ExpressionPropertyInterface(view.transform.mProps.r),
					},
					skew: {
						get: ExpressionPropertyInterface(view.transform.mProps.sk),
					},
					skewAxis: {
						get: ExpressionPropertyInterface(view.transform.mProps.sa),
					},
					_name: {
						value: shape.nm,
					},
				});
				interfaceFunction.ty = "tr";
				interfaceFunction.mn = shape.mn;
				interfaceFunction.propertyGroup = propertyGroup;
				return interfaceFunction;
			}
			function ellipseInterfaceFactory(shape, view, propertyGroup) {
				function interfaceFunction(value2) {
					if (shape.p.ix === value2) {
						return interfaceFunction.position;
					}
					if (shape.s.ix === value2) {
						return interfaceFunction.size;
					}
					return null;
				}
				var _propertyGroup = propertyGroupFactory(
					interfaceFunction,
					propertyGroup,
				);
				interfaceFunction.propertyIndex = shape.ix;
				var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
				prop.s.setGroupProperty(PropertyInterface("Size", _propertyGroup));
				prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
				Object.defineProperties(interfaceFunction, {
					size: {
						get: ExpressionPropertyInterface(prop.s),
					},
					position: {
						get: ExpressionPropertyInterface(prop.p),
					},
					_name: {
						value: shape.nm,
					},
				});
				interfaceFunction.mn = shape.mn;
				return interfaceFunction;
			}
			function starInterfaceFactory(shape, view, propertyGroup) {
				function interfaceFunction(value2) {
					if (shape.p.ix === value2) {
						return interfaceFunction.position;
					}
					if (shape.r.ix === value2) {
						return interfaceFunction.rotation;
					}
					if (shape.pt.ix === value2) {
						return interfaceFunction.points;
					}
					if (
						shape.or.ix === value2 ||
						value2 === "ADBE Vector Star Outer Radius"
					) {
						return interfaceFunction.outerRadius;
					}
					if (shape.os.ix === value2) {
						return interfaceFunction.outerRoundness;
					}
					if (
						shape.ir &&
						(shape.ir.ix === value2 ||
							value2 === "ADBE Vector Star Inner Radius")
					) {
						return interfaceFunction.innerRadius;
					}
					if (shape.is && shape.is.ix === value2) {
						return interfaceFunction.innerRoundness;
					}
					return null;
				}
				var _propertyGroup = propertyGroupFactory(
					interfaceFunction,
					propertyGroup,
				);
				var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
				interfaceFunction.propertyIndex = shape.ix;
				prop.or.setGroupProperty(
					PropertyInterface("Outer Radius", _propertyGroup),
				);
				prop.os.setGroupProperty(
					PropertyInterface("Outer Roundness", _propertyGroup),
				);
				prop.pt.setGroupProperty(PropertyInterface("Points", _propertyGroup));
				prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
				prop.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
				if (shape.ir) {
					prop.ir.setGroupProperty(
						PropertyInterface("Inner Radius", _propertyGroup),
					);
					prop.is.setGroupProperty(
						PropertyInterface("Inner Roundness", _propertyGroup),
					);
				}
				Object.defineProperties(interfaceFunction, {
					position: {
						get: ExpressionPropertyInterface(prop.p),
					},
					rotation: {
						get: ExpressionPropertyInterface(prop.r),
					},
					points: {
						get: ExpressionPropertyInterface(prop.pt),
					},
					outerRadius: {
						get: ExpressionPropertyInterface(prop.or),
					},
					outerRoundness: {
						get: ExpressionPropertyInterface(prop.os),
					},
					innerRadius: {
						get: ExpressionPropertyInterface(prop.ir),
					},
					innerRoundness: {
						get: ExpressionPropertyInterface(prop.is),
					},
					_name: {
						value: shape.nm,
					},
				});
				interfaceFunction.mn = shape.mn;
				return interfaceFunction;
			}
			function rectInterfaceFactory(shape, view, propertyGroup) {
				function interfaceFunction(value2) {
					if (shape.p.ix === value2) {
						return interfaceFunction.position;
					}
					if (shape.r.ix === value2) {
						return interfaceFunction.roundness;
					}
					if (
						shape.s.ix === value2 ||
						value2 === "Size" ||
						value2 === "ADBE Vector Rect Size"
					) {
						return interfaceFunction.size;
					}
					return null;
				}
				var _propertyGroup = propertyGroupFactory(
					interfaceFunction,
					propertyGroup,
				);
				var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
				interfaceFunction.propertyIndex = shape.ix;
				prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
				prop.s.setGroupProperty(PropertyInterface("Size", _propertyGroup));
				prop.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
				Object.defineProperties(interfaceFunction, {
					position: {
						get: ExpressionPropertyInterface(prop.p),
					},
					roundness: {
						get: ExpressionPropertyInterface(prop.r),
					},
					size: {
						get: ExpressionPropertyInterface(prop.s),
					},
					_name: {
						value: shape.nm,
					},
				});
				interfaceFunction.mn = shape.mn;
				return interfaceFunction;
			}
			function roundedInterfaceFactory(shape, view, propertyGroup) {
				function interfaceFunction(value2) {
					if (shape.r.ix === value2 || value2 === "Round Corners 1") {
						return interfaceFunction.radius;
					}
					return null;
				}
				var _propertyGroup = propertyGroupFactory(
					interfaceFunction,
					propertyGroup,
				);
				var prop = view;
				interfaceFunction.propertyIndex = shape.ix;
				prop.rd.setGroupProperty(PropertyInterface("Radius", _propertyGroup));
				Object.defineProperties(interfaceFunction, {
					radius: {
						get: ExpressionPropertyInterface(prop.rd),
					},
					_name: {
						value: shape.nm,
					},
				});
				interfaceFunction.mn = shape.mn;
				return interfaceFunction;
			}
			function repeaterInterfaceFactory(shape, view, propertyGroup) {
				function interfaceFunction(value2) {
					if (shape.c.ix === value2 || value2 === "Copies") {
						return interfaceFunction.copies;
					}
					if (shape.o.ix === value2 || value2 === "Offset") {
						return interfaceFunction.offset;
					}
					return null;
				}
				var _propertyGroup = propertyGroupFactory(
					interfaceFunction,
					propertyGroup,
				);
				var prop = view;
				interfaceFunction.propertyIndex = shape.ix;
				prop.c.setGroupProperty(PropertyInterface("Copies", _propertyGroup));
				prop.o.setGroupProperty(PropertyInterface("Offset", _propertyGroup));
				Object.defineProperties(interfaceFunction, {
					copies: {
						get: ExpressionPropertyInterface(prop.c),
					},
					offset: {
						get: ExpressionPropertyInterface(prop.o),
					},
					_name: {
						value: shape.nm,
					},
				});
				interfaceFunction.mn = shape.mn;
				return interfaceFunction;
			}
			return function (shapes, view, propertyGroup) {
				var interfaces;
				function _interfaceFunction(value2) {
					if (typeof value2 === "number") {
						value2 = value2 === void 0 ? 1 : value2;
						if (value2 === 0) {
							return propertyGroup;
						}
						return interfaces[value2 - 1];
					}
					var i = 0;
					var len = interfaces.length;
					while (i < len) {
						if (interfaces[i]._name === value2) {
							return interfaces[i];
						}
						i += 1;
					}
					return null;
				}
				function parentGroupWrapper() {
					return propertyGroup;
				}
				_interfaceFunction.propertyGroup = propertyGroupFactory(
					_interfaceFunction,
					parentGroupWrapper,
				);
				interfaces = iterateElements(
					shapes,
					view,
					_interfaceFunction.propertyGroup,
				);
				_interfaceFunction.numProperties = interfaces.length;
				_interfaceFunction._name = "Contents";
				return _interfaceFunction;
			};
		})();
		var TextExpressionInterface = /* @__PURE__ */ (function () {
			return function (elem2) {
				var _prevValue;
				var _sourceText;
				function _thisLayerFunction(name2) {
					switch (name2) {
						case "ADBE Text Document":
							return _thisLayerFunction.sourceText;
						default:
							return null;
					}
				}
				Object.defineProperty(_thisLayerFunction, "sourceText", {
					get: function () {
						elem2.textProperty.getValue();
						var stringValue = elem2.textProperty.currentData.t;
						if (stringValue !== _prevValue) {
							elem2.textProperty.currentData.t = _prevValue;
							_sourceText = new String(stringValue);
							_sourceText.value = stringValue || new String(stringValue);
						}
						return _sourceText;
					},
				});
				return _thisLayerFunction;
			};
		})();
		var LayerExpressionInterface = /* @__PURE__ */ (function () {
			function getMatrix(time2) {
				var toWorldMat = new Matrix();
				if (time2 !== void 0) {
					var propMatrix = (
						this || _global
					)._elem.finalTransform.mProp.getValueAtTime(time2);
					propMatrix.clone(toWorldMat);
				} else {
					var transformMat = (this || _global)._elem.finalTransform.mProp;
					transformMat.applyToMatrix(toWorldMat);
				}
				return toWorldMat;
			}
			function toWorldVec(arr, time2) {
				var toWorldMat = this.getMatrix(time2);
				toWorldMat.props[12] = 0;
				toWorldMat.props[13] = 0;
				toWorldMat.props[14] = 0;
				return this.applyPoint(toWorldMat, arr);
			}
			function toWorld2(arr, time2) {
				var toWorldMat = this.getMatrix(time2);
				return this.applyPoint(toWorldMat, arr);
			}
			function fromWorldVec(arr, time2) {
				var toWorldMat = this.getMatrix(time2);
				toWorldMat.props[12] = 0;
				toWorldMat.props[13] = 0;
				toWorldMat.props[14] = 0;
				return this.invertPoint(toWorldMat, arr);
			}
			function fromWorld2(arr, time2) {
				var toWorldMat = this.getMatrix(time2);
				return this.invertPoint(toWorldMat, arr);
			}
			function applyPoint(matrix, arr) {
				if (
					(this || _global)._elem.hierarchy &&
					(this || _global)._elem.hierarchy.length
				) {
					var i;
					var len = (this || _global)._elem.hierarchy.length;
					for (i = 0; i < len; i += 1) {
						(this || _global)._elem.hierarchy[
							i
						].finalTransform.mProp.applyToMatrix(matrix);
					}
				}
				return matrix.applyToPointArray(arr[0], arr[1], arr[2] || 0);
			}
			function invertPoint(matrix, arr) {
				if (
					(this || _global)._elem.hierarchy &&
					(this || _global)._elem.hierarchy.length
				) {
					var i;
					var len = (this || _global)._elem.hierarchy.length;
					for (i = 0; i < len; i += 1) {
						(this || _global)._elem.hierarchy[
							i
						].finalTransform.mProp.applyToMatrix(matrix);
					}
				}
				return matrix.inversePoint(arr);
			}
			function fromComp2(arr) {
				var toWorldMat = new Matrix();
				toWorldMat.reset();
				(this || _global)._elem.finalTransform.mProp.applyToMatrix(toWorldMat);
				if (
					(this || _global)._elem.hierarchy &&
					(this || _global)._elem.hierarchy.length
				) {
					var i;
					var len = (this || _global)._elem.hierarchy.length;
					for (i = 0; i < len; i += 1) {
						(this || _global)._elem.hierarchy[
							i
						].finalTransform.mProp.applyToMatrix(toWorldMat);
					}
					return toWorldMat.inversePoint(arr);
				}
				return toWorldMat.inversePoint(arr);
			}
			function sampleImage() {
				return [1, 1, 1, 1];
			}
			return function (elem2) {
				var transformInterface;
				function _registerMaskInterface(maskManager) {
					_thisLayerFunction.mask = new MaskManagerInterface(
						maskManager,
						elem2,
					);
				}
				function _registerEffectsInterface(effects) {
					_thisLayerFunction.effect = effects;
				}
				function _thisLayerFunction(name2) {
					switch (name2) {
						case "ADBE Root Vectors Group":
						case "Contents":
						case 2:
							return _thisLayerFunction.shapeInterface;
						case 1:
						case 6:
						case "Transform":
						case "transform":
						case "ADBE Transform Group":
							return transformInterface;
						case 4:
						case "ADBE Effect Parade":
						case "effects":
						case "Effects":
							return _thisLayerFunction.effect;
						case "ADBE Text Properties":
							return _thisLayerFunction.textInterface;
						default:
							return null;
					}
				}
				_thisLayerFunction.getMatrix = getMatrix;
				_thisLayerFunction.invertPoint = invertPoint;
				_thisLayerFunction.applyPoint = applyPoint;
				_thisLayerFunction.toWorld = toWorld2;
				_thisLayerFunction.toWorldVec = toWorldVec;
				_thisLayerFunction.fromWorld = fromWorld2;
				_thisLayerFunction.fromWorldVec = fromWorldVec;
				_thisLayerFunction.toComp = toWorld2;
				_thisLayerFunction.fromComp = fromComp2;
				_thisLayerFunction.sampleImage = sampleImage;
				_thisLayerFunction.sourceRectAtTime =
					elem2.sourceRectAtTime.bind(elem2);
				_thisLayerFunction._elem = elem2;
				transformInterface = TransformExpressionInterface(
					elem2.finalTransform.mProp,
				);
				var anchorPointDescriptor = getDescriptor(
					transformInterface,
					"anchorPoint",
				);
				Object.defineProperties(_thisLayerFunction, {
					hasParent: {
						get: function () {
							return elem2.hierarchy.length;
						},
					},
					parent: {
						get: function () {
							return elem2.hierarchy[0].layerInterface;
						},
					},
					rotation: getDescriptor(transformInterface, "rotation"),
					scale: getDescriptor(transformInterface, "scale"),
					position: getDescriptor(transformInterface, "position"),
					opacity: getDescriptor(transformInterface, "opacity"),
					anchorPoint: anchorPointDescriptor,
					anchor_point: anchorPointDescriptor,
					transform: {
						get: function () {
							return transformInterface;
						},
					},
					active: {
						get: function () {
							return elem2.isInRange;
						},
					},
				});
				_thisLayerFunction.startTime = elem2.data.st;
				_thisLayerFunction.index = elem2.data.ind;
				_thisLayerFunction.source = elem2.data.refId;
				_thisLayerFunction.height = elem2.data.ty === 0 ? elem2.data.h : 100;
				_thisLayerFunction.width = elem2.data.ty === 0 ? elem2.data.w : 100;
				_thisLayerFunction.inPoint =
					elem2.data.ip / elem2.comp.globalData.frameRate;
				_thisLayerFunction.outPoint =
					elem2.data.op / elem2.comp.globalData.frameRate;
				_thisLayerFunction._name = elem2.data.nm;
				_thisLayerFunction.registerMaskInterface = _registerMaskInterface;
				_thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
				return _thisLayerFunction;
			};
		})();
		var FootageInterface = /* @__PURE__ */ (function () {
			var outlineInterfaceFactory = function (elem2) {
				var currentPropertyName = "";
				var currentProperty = elem2.getFootageData();
				function init() {
					currentPropertyName = "";
					currentProperty = elem2.getFootageData();
					return searchProperty;
				}
				function searchProperty(value2) {
					if (currentProperty[value2]) {
						currentPropertyName = value2;
						currentProperty = currentProperty[value2];
						if (typeof currentProperty === "object") {
							return searchProperty;
						}
						return currentProperty;
					}
					var propertyNameIndex = value2.indexOf(currentPropertyName);
					if (propertyNameIndex !== -1) {
						var index2 = parseInt(
							value2.substr(propertyNameIndex + currentPropertyName.length),
							10,
						);
						currentProperty = currentProperty[index2];
						if (typeof currentProperty === "object") {
							return searchProperty;
						}
						return currentProperty;
					}
					return "";
				}
				return init;
			};
			var dataInterfaceFactory = function (elem2) {
				function interfaceFunction(value2) {
					if (value2 === "Outline") {
						return interfaceFunction.outlineInterface();
					}
					return null;
				}
				interfaceFunction._name = "Outline";
				interfaceFunction.outlineInterface = outlineInterfaceFactory(elem2);
				return interfaceFunction;
			};
			return function (elem2) {
				function _interfaceFunction(value2) {
					if (value2 === "Data") {
						return _interfaceFunction.dataInterface;
					}
					return null;
				}
				_interfaceFunction._name = "Data";
				_interfaceFunction.dataInterface = dataInterfaceFactory(elem2);
				return _interfaceFunction;
			};
		})();
		var CompExpressionInterface = /* @__PURE__ */ (function () {
			return function (comp2) {
				function _thisLayerFunction(name2) {
					var i = 0;
					var len = comp2.layers.length;
					while (i < len) {
						if (comp2.layers[i].nm === name2 || comp2.layers[i].ind === name2) {
							return comp2.elements[i].layerInterface;
						}
						i += 1;
					}
					return null;
				}
				Object.defineProperty(_thisLayerFunction, "_name", {
					value: comp2.data.nm,
				});
				_thisLayerFunction.layer = _thisLayerFunction;
				_thisLayerFunction.pixelAspect = 1;
				_thisLayerFunction.height = comp2.data.h || comp2.globalData.compSize.h;
				_thisLayerFunction.width = comp2.data.w || comp2.globalData.compSize.w;
				_thisLayerFunction.pixelAspect = 1;
				_thisLayerFunction.frameDuration = 1 / comp2.globalData.frameRate;
				_thisLayerFunction.displayStartTime = 0;
				_thisLayerFunction.numLayers = comp2.layers.length;
				return _thisLayerFunction;
			};
		})();
		var TransformExpressionInterface = /* @__PURE__ */ (function () {
			return function (transform2) {
				function _thisFunction(name2) {
					switch (name2) {
						case "scale":
						case "Scale":
						case "ADBE Scale":
						case 6:
							return _thisFunction.scale;
						case "rotation":
						case "Rotation":
						case "ADBE Rotation":
						case "ADBE Rotate Z":
						case 10:
							return _thisFunction.rotation;
						case "ADBE Rotate X":
							return _thisFunction.xRotation;
						case "ADBE Rotate Y":
							return _thisFunction.yRotation;
						case "position":
						case "Position":
						case "ADBE Position":
						case 2:
							return _thisFunction.position;
						case "ADBE Position_0":
							return _thisFunction.xPosition;
						case "ADBE Position_1":
							return _thisFunction.yPosition;
						case "ADBE Position_2":
							return _thisFunction.zPosition;
						case "anchorPoint":
						case "AnchorPoint":
						case "Anchor Point":
						case "ADBE AnchorPoint":
						case 1:
							return _thisFunction.anchorPoint;
						case "opacity":
						case "Opacity":
						case 11:
							return _thisFunction.opacity;
						default:
							return null;
					}
				}
				Object.defineProperty(_thisFunction, "rotation", {
					get: ExpressionPropertyInterface(transform2.r || transform2.rz),
				});
				Object.defineProperty(_thisFunction, "zRotation", {
					get: ExpressionPropertyInterface(transform2.rz || transform2.r),
				});
				Object.defineProperty(_thisFunction, "xRotation", {
					get: ExpressionPropertyInterface(transform2.rx),
				});
				Object.defineProperty(_thisFunction, "yRotation", {
					get: ExpressionPropertyInterface(transform2.ry),
				});
				Object.defineProperty(_thisFunction, "scale", {
					get: ExpressionPropertyInterface(transform2.s),
				});
				var _px;
				var _py;
				var _pz;
				var _transformFactory;
				if (transform2.p) {
					_transformFactory = ExpressionPropertyInterface(transform2.p);
				} else {
					_px = ExpressionPropertyInterface(transform2.px);
					_py = ExpressionPropertyInterface(transform2.py);
					if (transform2.pz) {
						_pz = ExpressionPropertyInterface(transform2.pz);
					}
				}
				Object.defineProperty(_thisFunction, "position", {
					get: function () {
						if (transform2.p) {
							return _transformFactory();
						}
						return [_px(), _py(), _pz ? _pz() : 0];
					},
				});
				Object.defineProperty(_thisFunction, "xPosition", {
					get: ExpressionPropertyInterface(transform2.px),
				});
				Object.defineProperty(_thisFunction, "yPosition", {
					get: ExpressionPropertyInterface(transform2.py),
				});
				Object.defineProperty(_thisFunction, "zPosition", {
					get: ExpressionPropertyInterface(transform2.pz),
				});
				Object.defineProperty(_thisFunction, "anchorPoint", {
					get: ExpressionPropertyInterface(transform2.a),
				});
				Object.defineProperty(_thisFunction, "opacity", {
					get: ExpressionPropertyInterface(transform2.o),
				});
				Object.defineProperty(_thisFunction, "skew", {
					get: ExpressionPropertyInterface(transform2.sk),
				});
				Object.defineProperty(_thisFunction, "skewAxis", {
					get: ExpressionPropertyInterface(transform2.sa),
				});
				Object.defineProperty(_thisFunction, "orientation", {
					get: ExpressionPropertyInterface(transform2.or),
				});
				return _thisFunction;
			};
		})();
		ProjectInterface = /* @__PURE__ */ (function () {
			function registerComposition(comp2) {
				(this || _global).compositions.push(comp2);
			}
			return function () {
				function _thisProjectFunction(name2) {
					var i = 0;
					var len = (this || _global).compositions.length;
					while (i < len) {
						if (
							(this || _global).compositions[i].data &&
							(this || _global).compositions[i].data.nm === name2
						) {
							if (
								(this || _global).compositions[i].prepareFrame &&
								(this || _global).compositions[i].data.xt
							) {
								(this || _global).compositions[i].prepareFrame(
									(this || _global).currentFrame,
								);
							}
							return (this || _global).compositions[i].compInterface;
						}
						i += 1;
					}
					return null;
				}
				_thisProjectFunction.compositions = [];
				_thisProjectFunction.currentFrame = 0;
				_thisProjectFunction.registerComposition = registerComposition;
				return _thisProjectFunction;
			};
		})();
		var EffectsExpressionInterface = /* @__PURE__ */ (function () {
			var ob2 = {
				createEffectsInterface,
			};
			function createEffectsInterface(elem2, propertyGroup) {
				if (elem2.effectsManager) {
					var effectElements = [];
					var effectsData = elem2.data.ef;
					var i;
					var len = elem2.effectsManager.effectElements.length;
					for (i = 0; i < len; i += 1) {
						effectElements.push(
							createGroupInterface(
								effectsData[i],
								elem2.effectsManager.effectElements[i],
								propertyGroup,
								elem2,
							),
						);
					}
					var effects = elem2.data.ef || [];
					var groupInterface = function (name2) {
						i = 0;
						len = effects.length;
						while (i < len) {
							if (
								name2 === effects[i].nm ||
								name2 === effects[i].mn ||
								name2 === effects[i].ix
							) {
								return effectElements[i];
							}
							i += 1;
						}
						return null;
					};
					Object.defineProperty(groupInterface, "numProperties", {
						get: function () {
							return effects.length;
						},
					});
					return groupInterface;
				}
				return null;
			}
			function createGroupInterface(data2, elements, propertyGroup, elem2) {
				function groupInterface(name2) {
					var effects = data2.ef;
					var i2 = 0;
					var len2 = effects.length;
					while (i2 < len2) {
						if (
							name2 === effects[i2].nm ||
							name2 === effects[i2].mn ||
							name2 === effects[i2].ix
						) {
							if (effects[i2].ty === 5) {
								return effectElements[i2];
							}
							return effectElements[i2]();
						}
						i2 += 1;
					}
					throw new Error();
				}
				var _propertyGroup = propertyGroupFactory(
					groupInterface,
					propertyGroup,
				);
				var effectElements = [];
				var i;
				var len = data2.ef.length;
				for (i = 0; i < len; i += 1) {
					if (data2.ef[i].ty === 5) {
						effectElements.push(
							createGroupInterface(
								data2.ef[i],
								elements.effectElements[i],
								elements.effectElements[i].propertyGroup,
								elem2,
							),
						);
					} else {
						effectElements.push(
							createValueInterface(
								elements.effectElements[i],
								data2.ef[i].ty,
								elem2,
								_propertyGroup,
							),
						);
					}
				}
				if (data2.mn === "ADBE Color Control") {
					Object.defineProperty(groupInterface, "color", {
						get: function () {
							return effectElements[0]();
						},
					});
				}
				Object.defineProperties(groupInterface, {
					numProperties: {
						get: function () {
							return data2.np;
						},
					},
					_name: {
						value: data2.nm,
					},
					propertyGroup: {
						value: _propertyGroup,
					},
				});
				groupInterface.enabled = data2.en !== 0;
				groupInterface.active = groupInterface.enabled;
				return groupInterface;
			}
			function createValueInterface(element, type, elem2, propertyGroup) {
				var expressionProperty = ExpressionPropertyInterface(element.p);
				function interfaceFunction() {
					if (type === 10) {
						return elem2.comp.compInterface(element.p.v);
					}
					return expressionProperty();
				}
				if (element.p.setGroupProperty) {
					element.p.setGroupProperty(PropertyInterface("", propertyGroup));
				}
				return interfaceFunction;
			}
			return ob2;
		})();
		var MaskManagerInterface = (function () {
			function MaskInterface(mask22, data2) {
				(this || _global)._mask = mask22;
				(this || _global)._data = data2;
			}
			Object.defineProperty(MaskInterface.prototype, "maskPath", {
				get: function () {
					if ((this || _global)._mask.prop.k) {
						(this || _global)._mask.prop.getValue();
					}
					return (this || _global)._mask.prop;
				},
			});
			Object.defineProperty(MaskInterface.prototype, "maskOpacity", {
				get: function () {
					if ((this || _global)._mask.op.k) {
						(this || _global)._mask.op.getValue();
					}
					return (this || _global)._mask.op.v * 100;
				},
			});
			var MaskManager = function (maskManager) {
				var _masksInterfaces = createSizedArray(maskManager.viewData.length);
				var i;
				var len = maskManager.viewData.length;
				for (i = 0; i < len; i += 1) {
					_masksInterfaces[i] = new MaskInterface(
						maskManager.viewData[i],
						maskManager.masksProperties[i],
					);
				}
				var maskFunction = function (name2) {
					i = 0;
					while (i < len) {
						if (maskManager.masksProperties[i].nm === name2) {
							return _masksInterfaces[i];
						}
						i += 1;
					}
					return null;
				};
				return maskFunction;
			};
			return MaskManager;
		})();
		var ExpressionPropertyInterface = /* @__PURE__ */ (function () {
			var defaultUnidimensionalValue = {
				pv: 0,
				v: 0,
				mult: 1,
			};
			var defaultMultidimensionalValue = {
				pv: [0, 0, 0],
				v: [0, 0, 0],
				mult: 1,
			};
			function completeProperty(expressionValue, property2, type) {
				Object.defineProperty(expressionValue, "velocity", {
					get: function () {
						return property2.getVelocityAtTime(property2.comp.currentFrame);
					},
				});
				expressionValue.numKeys = property2.keyframes
					? property2.keyframes.length
					: 0;
				expressionValue.key = function (pos) {
					if (!expressionValue.numKeys) {
						return 0;
					}
					var value2 = "";
					if ("s" in property2.keyframes[pos - 1]) {
						value2 = property2.keyframes[pos - 1].s;
					} else if ("e" in property2.keyframes[pos - 2]) {
						value2 = property2.keyframes[pos - 2].e;
					} else {
						value2 = property2.keyframes[pos - 2].s;
					}
					var valueProp =
						type === "unidimensional"
							? new Number(value2)
							: Object.assign({}, value2);
					valueProp.time =
						property2.keyframes[pos - 1].t /
						property2.elem.comp.globalData.frameRate;
					valueProp.value = type === "unidimensional" ? value2[0] : value2;
					return valueProp;
				};
				expressionValue.valueAtTime = property2.getValueAtTime;
				expressionValue.speedAtTime = property2.getSpeedAtTime;
				expressionValue.velocityAtTime = property2.getVelocityAtTime;
				expressionValue.propertyGroup = property2.propertyGroup;
			}
			function UnidimensionalPropertyInterface(property2) {
				if (!property2 || !("pv" in property2)) {
					property2 = defaultUnidimensionalValue;
				}
				var mult = 1 / property2.mult;
				var val2 = property2.pv * mult;
				var expressionValue = new Number(val2);
				expressionValue.value = val2;
				completeProperty(expressionValue, property2, "unidimensional");
				return function () {
					if (property2.k) {
						property2.getValue();
					}
					val2 = property2.v * mult;
					if (expressionValue.value !== val2) {
						expressionValue = new Number(val2);
						expressionValue.value = val2;
						completeProperty(expressionValue, property2, "unidimensional");
					}
					return expressionValue;
				};
			}
			function MultidimensionalPropertyInterface(property2) {
				if (!property2 || !("pv" in property2)) {
					property2 = defaultMultidimensionalValue;
				}
				var mult = 1 / property2.mult;
				var len = (property2.data && property2.data.l) || property2.pv.length;
				var expressionValue = createTypedArray("float32", len);
				var arrValue = createTypedArray("float32", len);
				expressionValue.value = arrValue;
				completeProperty(expressionValue, property2, "multidimensional");
				return function () {
					if (property2.k) {
						property2.getValue();
					}
					for (var i = 0; i < len; i += 1) {
						arrValue[i] = property2.v[i] * mult;
						expressionValue[i] = arrValue[i];
					}
					return expressionValue;
				};
			}
			function defaultGetter() {
				return defaultUnidimensionalValue;
			}
			return function (property2) {
				if (!property2) {
					return defaultGetter;
				}
				if (property2.propType === "unidimensional") {
					return UnidimensionalPropertyInterface(property2);
				}
				return MultidimensionalPropertyInterface(property2);
			};
		})();
		(function () {
			var TextExpressionSelectorProp = /* @__PURE__ */ (function () {
				function getValueProxy(index2, total) {
					(this || _global).textIndex = index2 + 1;
					(this || _global).textTotal = total;
					(this || _global).v = this.getValue() * (this || _global).mult;
					return (this || _global).v;
				}
				return function TextExpressionSelectorPropFactory2(elem2, data2) {
					(this || _global).pv = 1;
					(this || _global).comp = elem2.comp;
					(this || _global).elem = elem2;
					(this || _global).mult = 0.01;
					(this || _global).propType = "textSelector";
					(this || _global).textTotal = data2.totalChars;
					(this || _global).selectorValue = 100;
					(this || _global).lastValue = [1, 1, 1];
					(this || _global).k = true;
					(this || _global).x = true;
					(this || _global).getValue =
						ExpressionManager.initiateExpression.bind(this || _global)(
							elem2,
							data2,
							this || _global,
						);
					(this || _global).getMult = getValueProxy;
					(this || _global).getVelocityAtTime =
						expressionHelpers.getVelocityAtTime;
					if ((this || _global).kf) {
						(this || _global).getValueAtTime =
							expressionHelpers.getValueAtTime.bind(this || _global);
					} else {
						(this || _global).getValueAtTime =
							expressionHelpers.getStaticValueAtTime.bind(this || _global);
					}
					(this || _global).setGroupProperty =
						expressionHelpers.setGroupProperty;
				};
			})();
			var propertyGetTextProp = TextSelectorProp.getTextSelectorProp;
			TextSelectorProp.getTextSelectorProp = function (elem2, data2, arr) {
				if (data2.t === 1) {
					return new TextExpressionSelectorPropFactory(elem2, data2, arr);
				}
				return propertyGetTextProp(elem2, data2, arr);
			};
		})();
		function SliderEffect(data2, elem2, container) {
			(this || _global).p = PropertyFactory.getProp(
				elem2,
				data2.v,
				0,
				0,
				container,
			);
		}
		function AngleEffect(data2, elem2, container) {
			(this || _global).p = PropertyFactory.getProp(
				elem2,
				data2.v,
				0,
				0,
				container,
			);
		}
		function ColorEffect(data2, elem2, container) {
			(this || _global).p = PropertyFactory.getProp(
				elem2,
				data2.v,
				1,
				0,
				container,
			);
		}
		function PointEffect(data2, elem2, container) {
			(this || _global).p = PropertyFactory.getProp(
				elem2,
				data2.v,
				1,
				0,
				container,
			);
		}
		function LayerIndexEffect(data2, elem2, container) {
			(this || _global).p = PropertyFactory.getProp(
				elem2,
				data2.v,
				0,
				0,
				container,
			);
		}
		function MaskIndexEffect(data2, elem2, container) {
			(this || _global).p = PropertyFactory.getProp(
				elem2,
				data2.v,
				0,
				0,
				container,
			);
		}
		function CheckboxEffect(data2, elem2, container) {
			(this || _global).p = PropertyFactory.getProp(
				elem2,
				data2.v,
				0,
				0,
				container,
			);
		}
		function NoValueEffect() {
			(this || _global).p = {};
		}
		function EffectsManager(data2, element) {
			var effects = data2.ef || [];
			(this || _global).effectElements = [];
			var i;
			var len = effects.length;
			var effectItem;
			for (i = 0; i < len; i += 1) {
				effectItem = new GroupEffect(effects[i], element);
				(this || _global).effectElements.push(effectItem);
			}
		}
		function GroupEffect(data2, element) {
			this.init(data2, element);
		}
		extendPrototype([DynamicPropertyContainer], GroupEffect);
		GroupEffect.prototype.getValue =
			GroupEffect.prototype.iterateDynamicProperties;
		GroupEffect.prototype.init = function (data2, element) {
			(this || _global).data = data2;
			(this || _global).effectElements = [];
			this.initDynamicPropertyContainer(element);
			var i;
			var len = (this || _global).data.ef.length;
			var eff;
			var effects = (this || _global).data.ef;
			for (i = 0; i < len; i += 1) {
				eff = null;
				switch (effects[i].ty) {
					case 0:
						eff = new SliderEffect(effects[i], element, this || _global);
						break;
					case 1:
						eff = new AngleEffect(effects[i], element, this || _global);
						break;
					case 2:
						eff = new ColorEffect(effects[i], element, this || _global);
						break;
					case 3:
						eff = new PointEffect(effects[i], element, this || _global);
						break;
					case 4:
					case 7:
						eff = new CheckboxEffect(effects[i], element, this || _global);
						break;
					case 10:
						eff = new LayerIndexEffect(effects[i], element, this || _global);
						break;
					case 11:
						eff = new MaskIndexEffect(effects[i], element, this || _global);
						break;
					case 5:
						eff = new EffectsManager(effects[i], element, this || _global);
						break;
					// case 6:
					default:
						eff = new NoValueEffect(effects[i], element, this || _global);
						break;
				}
				if (eff) {
					(this || _global).effectElements.push(eff);
				}
			}
		};
		var lottie = {};
		function setLocationHref(href) {
			locationHref = href;
		}
		function searchAnimations() {
			if (standalone === true) {
				animationManager.searchAnimations(animationData, standalone, renderer);
			} else {
				animationManager.searchAnimations();
			}
		}
		function setSubframeRendering(flag) {
			subframeEnabled = flag;
		}
		function loadAnimation(params) {
			if (standalone === true) {
				params.animationData = JSON.parse(animationData);
			}
			return animationManager.loadAnimation(params);
		}
		function setQuality(value2) {
			if (typeof value2 === "string") {
				switch (value2) {
					case "high":
						defaultCurveSegments = 200;
						break;
					default:
					case "medium":
						defaultCurveSegments = 50;
						break;
					case "low":
						defaultCurveSegments = 10;
						break;
				}
			} else if (!isNaN(value2) && value2 > 1) {
				defaultCurveSegments = value2;
			}
			if (defaultCurveSegments >= 50) {
				roundValues(false);
			} else {
				roundValues(true);
			}
		}
		function inBrowser() {
			return typeof __unframerNavigator !== "undefined";
		}
		function installPlugin(type, plugin) {
			if (type === "expressions") {
				expressionsPlugin = plugin;
			}
		}
		function getFactory(name2) {
			switch (name2) {
				case "propertyFactory":
					return PropertyFactory;
				case "shapePropertyFactory":
					return ShapePropertyFactory;
				case "matrix":
					return Matrix;
				default:
					return null;
			}
		}
		lottie.play = animationManager.play;
		lottie.pause = animationManager.pause;
		lottie.setLocationHref = setLocationHref;
		lottie.togglePause = animationManager.togglePause;
		lottie.setSpeed = animationManager.setSpeed;
		lottie.setDirection = animationManager.setDirection;
		lottie.stop = animationManager.stop;
		lottie.searchAnimations = searchAnimations;
		lottie.registerAnimation = animationManager.registerAnimation;
		lottie.loadAnimation = loadAnimation;
		lottie.setSubframeRendering = setSubframeRendering;
		lottie.resize = animationManager.resize;
		lottie.goToAndStop = animationManager.goToAndStop;
		lottie.destroy = animationManager.destroy;
		lottie.setQuality = setQuality;
		lottie.inBrowser = inBrowser;
		lottie.installPlugin = installPlugin;
		lottie.freeze = animationManager.freeze;
		lottie.unfreeze = animationManager.unfreeze;
		lottie.setVolume = animationManager.setVolume;
		lottie.mute = animationManager.mute;
		lottie.unmute = animationManager.unmute;
		lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;
		lottie.__getFactory = getFactory;
		lottie.version = "5.7.8";
		function checkReady() {
			if (document.readyState === "complete") {
				clearInterval(readyStateCheckInterval);
				searchAnimations();
			}
		}
		function getQueryVariable(variable) {
			var vars = queryString.split("&");
			for (var i = 0; i < vars.length; i += 1) {
				var pair = vars[i].split("=");
				if (decodeURIComponent(pair[0]) == variable) {
					return decodeURIComponent(pair[1]);
				}
			}
			return null;
		}
		var standalone = "__[STANDALONE]__";
		var animationData = "__[ANIMATIONDATA]__";
		var renderer = "";
		var queryString;
		if (standalone) {
			var scripts = document.getElementsByTagName("script");
			var index = scripts.length - 1;
			var myScript = scripts[index] || {
				src: "",
			};
			queryString = myScript.src.replace(/^[^\?]+\??/, "");
			renderer = getQueryVariable("renderer");
		}
		var readyStateCheckInterval = setInterval(checkReady, 100);
		return lottie;
	});
var exports$1 = exports;
var stdin_default = exports$1;

// /:https://framerusercontent.com/modules/YbkSqZ7STzW5WsMb1yan/RLfsHd78NBd0kbafA9hd/Lottie.js
var SrcType;
(function (SrcType2) {
	SrcType2["File"] = "Upload";
	SrcType2["Url"] = "URL";
})(SrcType || (SrcType = {}));
var Poster;
(function (Poster2) {
	Poster2["Auto"] = "Auto";
	Poster2["Custom"] = "Custom";
})(Poster || (Poster = {}));
var placeholderUrl = "https://misc.framerstatic.com/lottie/logo.json";
function Lottie(props) {
	const {
		style,
		srcUrl,
		srcFile,
		srcType,
		poster,
		progress: progressRaw,
		playing,
		loop,
		posterProgress,
		pauseOnCanvas,
		isForwardsDirection,
		speed,
		onClick,
		onMouseEnter,
		onMouseLeave,
		onMouseDown,
		onMouseUp,
		onComplete,
	} = props;
	const isOnCanvas = RenderTarget4.current() === RenderTarget4.canvas;
	const shouldPlay = (!pauseOnCanvas || !isOnCanvas) && playing;
	const direction = isForwardsDirection ? 1 : -1;
	const isCustomPoster = poster === "Custom";
	const el = useRef4();
	const didInitialMount = useRef4(false);
	const animationInfo = useRef4({
		data: null,
		animation: null,
		duration: null,
	});
	const progress = useAutoMotionValue2(progressRaw, {
		transform: (v) => v * 0.01,
	});
	const play = () => {
		var _animationInfo_current_animation, _animationInfo_current;
		return (_animationInfo_current = animationInfo.current) === null ||
			_animationInfo_current === void 0
			? void 0
			: (_animationInfo_current_animation =
						_animationInfo_current.animation) === null ||
					_animationInfo_current_animation === void 0
				? void 0
				: _animationInfo_current_animation.play();
	};
	const pause = () => {
		var _animationInfo_current_animation, _animationInfo_current;
		return (_animationInfo_current = animationInfo.current) === null ||
			_animationInfo_current === void 0
			? void 0
			: (_animationInfo_current_animation =
						_animationInfo_current.animation) === null ||
					_animationInfo_current_animation === void 0
				? void 0
				: _animationInfo_current_animation.pause();
	};
	const destroy = () => {
		var _animationInfo_current_animation, _animationInfo_current;
		return (_animationInfo_current = animationInfo.current) === null ||
			_animationInfo_current === void 0
			? void 0
			: (_animationInfo_current_animation =
						_animationInfo_current.animation) === null ||
					_animationInfo_current_animation === void 0
				? void 0
				: _animationInfo_current_animation.destroy();
	};
	const scrubTo = useCallback3((normalizedProgress, shouldPlayAfter) => {
		if (!animationInfo.current.duration || !animationInfo.current.animation)
			return;
		const frameNumberTarget =
			normalizedProgress === 1
				? animationInfo.current.duration - 1
				: normalizedProgress * animationInfo.current.duration;
		if (shouldPlayAfter)
			animationInfo.current.animation.goToAndPlay(frameNumberTarget, true);
		else animationInfo.current.animation.goToAndStop(frameNumberTarget, true);
	}, []);
	const fetchLottieData = useCallback3(async (url) => {
		if (!url) return null;
		const data2 = await fetch(url, {
			method: "GET",
			credentials: "omit",
			redirect: "follow",
		}).then((d) => d.json());
		return data2;
	}, []);
	const init = useCallback3(async () => {
		destroy();
		let dataUrl;
		if (srcType === "URL") dataUrl = srcUrl;
		if (srcType === "Upload") dataUrl = srcFile;
		if (!dataUrl) {
			console.warn("No valid Lottie animation provided");
			dataUrl = placeholderUrl;
		}
		const data2 = await fetchLottieData(dataUrl);
		animationInfo.current.data = data2;
		return setup(didInitialMount.current);
	}, [srcType, srcUrl, srcFile]);
	const setup = useCallback3(
		(shouldPlayAfter) => {
			if (!el.current) return;
			destroy();
			const options = {
				container: el.current,
				renderer: "svg",
				loop,
				autoplay: shouldPlay,
				animationData: animationInfo.current.data,
				rendererSettings: {
					preserveAspectRatio: "xMidYMid slice",
				},
			};
			const anim = (animationInfo.current.animation =
				stdin_default.loadAnimation(options));
			animationInfo.current.duration = anim.getDuration(true);
			anim.setDirection(direction);
			anim.setSpeed(speed);
			didInitialMount.current = true;
			if (isOnCanvas && isCustomPoster) scrubTo(posterProgress, false);
			else scrubTo(progress.get(), shouldPlay || shouldPlayAfter);
			return () => {
				anim.destroy();
			};
		},
		[
			loop,
			shouldPlay,
			speed,
			direction,
			isOnCanvas,
			isCustomPoster,
			posterProgress,
		],
	);
	useEffect8(() => {
		let cleanup;
		init().then((c) => (cleanup = c));
		return () => {
			if (cleanup) cleanup();
		};
	}, [srcType, srcFile, srcUrl]);
	useEffect8(() => {
		if (!didInitialMount.current) return;
		return setup(false);
	}, [loop]);
	useEffect8(() => stdin_default.setQuality(isOnCanvas ? "low" : "medium"), []);
	useEffect8(
		() =>
			progress.onChange((val2) => {
				if (isOnCanvas) return;
				if (shouldPlay) scrubTo(val2, true);
				else scrubTo(val2, false);
			}),
		[],
	);
	useEffect8(() => {
		const val2 = progress.get();
		if (shouldPlay) scrubTo(val2, true);
		else scrubTo(val2, false);
	}, [progressRaw]);
	useEffect8(() => {
		if (!isOnCanvas) return;
		const normalizedPosterProgress = posterProgress * 0.01;
		if (isCustomPoster) scrubTo(normalizedPosterProgress, false);
		else scrubTo(progress.get(), false);
	}, [isCustomPoster, posterProgress]);
	useEffect8(() => {
		var _animationInfo_current;
		if (
			!((_animationInfo_current = animationInfo.current) === null ||
			_animationInfo_current === void 0
				? void 0
				: _animationInfo_current.animation)
		)
			return;
		animationInfo.current.animation.setSpeed(speed);
		scrubTo(progress.get(), true);
	}, [speed]);
	useEffect8(() => {
		var _animationInfo_current;
		if (
			!((_animationInfo_current = animationInfo.current) === null ||
			_animationInfo_current === void 0
				? void 0
				: _animationInfo_current.animation)
		)
			return;
		animationInfo.current.animation.setDirection(direction);
		scrubTo(progress.get(), true);
	}, [direction]);
	useEffect8(() => {
		if (shouldPlay) play();
		else pause();
	}, [shouldPlay]);
	return (
		<motion.div
			ref={el}
			style={style}
			onClick={onClick}
			onMouseEnter={onMouseEnter}
			onMouseLeave={onMouseLeave}
			onMouseDown={onMouseDown}
			onMouseUp={onMouseUp}
		/>
	);
}
Lottie.defaultProps = {
	height: 200,
	width: 200,
	srcType: "URL",
	pauseOnCanvas: true,
	srcUrl: placeholderUrl,
	progress: 0,
	poster: "Auto",
	posterProgress: 0,
};
addPropertyControls(Lottie, {
	srcType: {
		type: ControlType4.Enum,
		displaySegmentedControl: true,
		title: "Source",
		options: ["URL", "Upload"],
	},
	srcUrl: {
		type: ControlType4.String,
		title: "URL",
		placeholder: "../example.json",
		hidden: (props) => props.srcType === "Upload",
	},
	srcFile: {
		type: ControlType4.File,
		title: "File",
		allowedFileTypes: ["json"],
		hidden: (props) => props.srcType === "URL",
	},
	playing: {
		type: ControlType4.Boolean,
		title: "Playing",
		enabledTitle: "Yes",
		disabledTitle: "No",
	},
	// Temporarily disabling for perf
	pauseOnCanvas: {
		type: ControlType4.Boolean,
		title: "Canvas",
		disabledTitle: "Play",
		enabledTitle: "Pause",
		hidden: (props) => props.playing === false,
	},
	loop: {
		type: ControlType4.Boolean,
		title: "Loop",
		enabledTitle: "Yes",
		disabledTitle: "No",
	},
	isForwardsDirection: {
		title: "Direction",
		type: ControlType4.Boolean,
		enabledTitle: "Normal",
		disabledTitle: "Reverse",
	},
	speed: {
		type: ControlType4.Number,
		defaultValue: 1,
		min: 0,
		max: 10,
		step: 0.5,
		displayStepper: true,
		unit: "x",
	},
	poster: {
		title: "Poster",
		type: ControlType4.Enum,
		options: ["Auto", "Custom"],
		displaySegmentedControl: true,
	},
	posterProgress: {
		title: " ",
		type: ControlType4.Number,
		max: 100,
		min: 0,
		unit: "%",
		hidden: ({ poster }) => poster === "Auto",
	},
	progress: {
		title: "Progress",
		type: ControlType4.Number,
		max: 100,
		min: 0,
		unit: "%",
		description:
			"This component is made for JSON files. [Learn more here](https://lottiefiles.com/what-is-lottie).",
	},
	...defaultEvents,
});

// /:https://framerusercontent.com/modules/1wbGxtwRLkWxHzaL7tah/oIjBUs6nl769tG1AfUIz/j1wERBDyy.js
import { fontStore as fontStore2 } from "unframer";
fontStore2.loadFonts([
	"Inter",
	"Inter-VariableVF=Im9wc3oiIDE0LCAid2dodCIgMzUw",
	"Inter-VariableVF=Im9wc3oiIDE0LCAid2dodCIgMzUw",
	"Inter-VariableVF=Im9wc3oiIDE0LCAid2dodCIgMzUw",
]);
var fonts = [
	{
		explicitInter: true,
		fonts: [
			{
				family: "Inter",
				source: "framer",
				style: "normal",
				unicodeRange:
					"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
				url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
				weight: "400",
			},
			{
				family: "Inter",
				source: "framer",
				style: "normal",
				unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
				url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
				weight: "400",
			},
			{
				family: "Inter",
				source: "framer",
				style: "normal",
				unicodeRange: "U+1F00-1FFF",
				url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
				weight: "400",
			},
			{
				family: "Inter",
				source: "framer",
				style: "normal",
				unicodeRange: "U+0370-03FF",
				url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
				weight: "400",
			},
			{
				family: "Inter",
				source: "framer",
				style: "normal",
				unicodeRange:
					"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
				url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
				weight: "400",
			},
			{
				family: "Inter",
				source: "framer",
				style: "normal",
				unicodeRange:
					"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
				url: "https://framerusercontent.com/assets/vQyevYAyHtARFwPqUzQGpnDs.woff2",
				weight: "400",
			},
			{
				family: "Inter",
				source: "framer",
				style: "normal",
				unicodeRange:
					"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
				url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
				weight: "400",
			},
		],
	},
];
var css = [
	'.framer-sawp5 .framer-styles-preset-1aptoqg:not(.rich-text-wrapper), .framer-sawp5 .framer-styles-preset-1aptoqg.rich-text-wrapper p { --framer-font-family: "Inter", sans-serif; --framer-font-family-bold: "Inter Variable", "Inter Placeholder", sans-serif; --framer-font-family-bold-italic: "Inter Variable", "Inter Placeholder", sans-serif; --framer-font-family-italic: "Inter Variable", "Inter Placeholder", sans-serif; --framer-font-open-type-features: normal; --framer-font-size: 16px; --framer-font-style: normal; --framer-font-style-bold: normal; --framer-font-style-bold-italic: normal; --framer-font-style-italic: normal; --framer-font-variation-axes: normal; --framer-font-variation-axes-bold: "opsz" 14, "wght" 350; --framer-font-variation-axes-bold-italic: "opsz" 14, "wght" 350; --framer-font-variation-axes-italic: "opsz" 14, "wght" 350; --framer-font-weight: 400; --framer-font-weight-bold: 400; --framer-font-weight-bold-italic: 400; --framer-font-weight-italic: 400; --framer-letter-spacing: -0.01em; --framer-line-height: 24px; --framer-paragraph-spacing: 8px; --framer-text-alignment: center; --framer-text-color: var(--token-d6940146-3092-44f2-b461-b1ae29af8487, #52525b); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; }',
];
var className = "framer-sawp5";

// /:https://framerusercontent.com/modules/VCsWlRaUqY4HLhF19kAd/91D31GvtFLXW89NwXYtH/wbNIgsWJm.js
import { fontStore as fontStore3 } from "unframer";
fontStore3.loadFonts(["CUSTOM;SignatureAPI Title Medium"]);
var fonts2 = [
	{
		explicitInter: true,
		fonts: [
			{
				family: "SignatureAPI Title Medium",
				source: "custom",
				url: "https://framerusercontent.com/assets/AJ18YpHHbCJeeiZ1ProTLuLHhU.woff2",
			},
		],
	},
];
var css2 = [
	'.framer-ks2fx .framer-styles-preset-8fcfjf:not(.rich-text-wrapper), .framer-ks2fx .framer-styles-preset-8fcfjf.rich-text-wrapper h2 { --framer-font-family: "SignatureAPI Title Medium", "SignatureAPI Title Medium Placeholder", sans-serif; --framer-font-open-type-features: normal; --framer-font-size: 36px; --framer-font-style: normal; --framer-font-variation-axes: normal; --framer-font-weight: 400; --framer-letter-spacing: 0.01em; --framer-line-height: 48px; --framer-paragraph-spacing: 0px; --framer-text-alignment: center; --framer-text-color: var(--token-21c8ed69-0c54-4c11-bfd2-6cc87f53f87a, #18181b); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; }',
	'@media (max-width: 1199px) and (min-width: 800px) { .framer-ks2fx .framer-styles-preset-8fcfjf:not(.rich-text-wrapper), .framer-ks2fx .framer-styles-preset-8fcfjf.rich-text-wrapper h2 { --framer-font-family: "SignatureAPI Title Medium", "SignatureAPI Title Medium Placeholder", sans-serif; --framer-font-open-type-features: normal; --framer-font-size: 28px; --framer-font-style: normal; --framer-font-variation-axes: normal; --framer-font-weight: 400; --framer-letter-spacing: 0.01em; --framer-line-height: 36px; --framer-paragraph-spacing: 0px; --framer-text-alignment: center; --framer-text-color: var(--token-21c8ed69-0c54-4c11-bfd2-6cc87f53f87a, #18181b); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; } }',
	'@media (max-width: 799px) and (min-width: 0px) { .framer-ks2fx .framer-styles-preset-8fcfjf:not(.rich-text-wrapper), .framer-ks2fx .framer-styles-preset-8fcfjf.rich-text-wrapper h2 { --framer-font-family: "SignatureAPI Title Medium", "SignatureAPI Title Medium Placeholder", sans-serif; --framer-font-open-type-features: normal; --framer-font-size: 24px; --framer-font-style: normal; --framer-font-variation-axes: normal; --framer-font-weight: 400; --framer-letter-spacing: 0.01em; --framer-line-height: 32px; --framer-paragraph-spacing: 0px; --framer-text-alignment: center; --framer-text-color: var(--token-21c8ed69-0c54-4c11-bfd2-6cc87f53f87a, #18181b); --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; } }',
];
var className2 = "framer-ks2fx";

// /:https://framerusercontent.com/modules/vCL82hVYyDSatg2EZ2LT/7C50hF8TbgVaoC20yuPG/FHPqRCV9w.js
import { jsx as _jsx2 } from "react/jsx-runtime";
import { cx, motion as motion2, withCSS } from "unframer";
import * as React3 from "react";
import { forwardRef as forwardRef2 } from "react";
var mask2 = "var(--framer-icon-mask)";
var SVG = /* @__PURE__ */ forwardRef2((props, ref) => {
	const { animated, layoutId, children, ...rest } = props;
	return animated ? (
		<motion2.img {...rest} layoutId={layoutId} ref={ref} />
	) : (
		<img {...rest} ref={ref} />
	);
});
var getProps = ({ height: height2, id, width: width2, ...props }) => {
	return {
		...props,
	};
};
var Component = /* @__PURE__ */ React3.forwardRef(function (props, ref) {
	const {
		style,
		className: className3,
		layoutId,
		variant,
		...restProps
	} = getProps(props);
	return (
		<SVG
			{...restProps}
			alt={""}
			className={cx("framer-QYSrD", className3)}
			layoutId={layoutId}
			ref={ref}
			src={
				'data:image/svg+xml,<svg display="block" role="presentation" viewBox="0 0 1360 840" xmlns="http://www.w3.org/2000/svg"><g d="M 0 0 L 1360 0 L 1360 840 L 0 840 Z M 804.365 0 L 4.85 840 L 3.393 840 L 802.908 0 Z M 812.607 0 L 13.092 840 L 11.635 840 L 811.15 0 Z M 820.85 0 L 21.335 840 L 19.878 840 L 819.393 0 Z M 829.092 0 L 29.577 840 L 28.12 840 L 827.635 0 Z M 837.334 0 L 37.819 840 L 36.362 840 L 835.878 0 Z M 845.577 0 L 46.062 840 L 44.605 840 L 844.12 0 Z M 853.819 0 L 54.304 840 L 52.847 840 L 852.362 0 Z M 862.062 0 L 62.547 840 L 61.09 840 L 860.605 0 Z M 870.304 0 L 70.789 840 L 69.332 840 L 868.847 0 Z M 878.547 0 L 79.032 840 L 77.575 840 L 877.09 0 Z M 886.789 0 L 87.274 840 L 85.817 840 L 885.332 0 Z M 895.031 0 L 95.516 840 L 94.06 840 L 893.575 0 Z M 903.274 0 L 103.759 840 L 102.302 840 L 901.817 0 Z M 911.516 0 L 112.001 840 L 110.544 840 L 910.059 0 Z M 919.759 0 L 120.244 840 L 118.787 840 L 918.302 0 Z M 928.001 0 L 128.486 840 L 127.029 840 L 926.544 0 Z M 936.244 0 L 136.728 840 L 135.272 840 L 934.787 0 Z M 944.486 0 L 144.971 840 L 143.514 840 L 943.029 0 Z M 952.728 0 L 153.213 840 L 151.756 840 L 951.272 0 Z M 960.971 0 L 161.456 840 L 159.999 840 L 959.514 0 Z M 969.213 0 L 169.698 840 L 168.241 840 L 967.756 0 Z M 977.456 0 L 177.941 840 L 176.484 840 L 975.999 0 Z M 985.698 0 L 186.183 840 L 184.726 840 L 984.241 0 Z M 993.941 0 L 194.425 840 L 192.969 840 L 992.484 0 Z M 1002.18 0 L 202.668 840 L 201.211 840 L 1000.73 0 Z M 1010.43 0 L 210.91 840 L 209.453 840 L 1008.97 0 Z M 1018.67 0 L 219.153 840 L 217.696 840 L 1017.21 0 Z M 1026.91 0 L 227.395 840 L 225.938 840 L 1025.45 0 Z M 1035.15 0 L 235.638 840 L 234.181 840 L 1033.7 0 Z M 1043.4 0 L 243.88 840 L 242.423 840 L 1041.94 0 Z M 1051.64 0 L 252.122 840 L 250.665 840 L 1050.18 0 Z M 1059.88 0 L 260.365 840 L 258.908 840 L 1058.42 0 Z M 1068.12 0 L 268.607 840 L 267.15 840 L 1066.67 0 Z M 1076.36 0 L 276.85 840 L 275.393 840 L 1074.91 0 Z M 1084.61 0 L 285.092 840 L 283.635 840 L 1083.15 0 Z M 1092.85 0 L 293.335 840 L 291.878 840 L 1091.39 0 Z M 1101.09 0 L 301.577 840 L 300.12 840 L 1099.64 0 Z M 1109.33 0 L 309.819 840 L 308.362 840 L 1107.88 0 Z M 1117.58 0 L 318.062 840 L 316.605 840 L 1116.12 0 Z M 1125.82 0 L 326.304 840 L 324.847 840 L 1124.36 0 Z M 1134.06 0 L 334.547 840 L 333.09 840 L 1132.6 0 Z M 1142.3 0 L 342.789 840 L 341.332 840 L 1140.85 0 Z M 1150.55 0 L 351.031 840 L 349.575 840 L 1149.09 0 Z M 1158.79 0 L 359.274 840 L 357.817 840 L 1157.33 0 Z M 1167.03 0 L 367.516 840 L 366.059 840 L 1165.57 0 Z M 1175.27 0 L 375.759 840 L 374.302 840 L 1173.82 0 Z M 1183.52 0 L 384.001 840 L 382.544 840 L 1182.06 0 Z M 1191.76 0 L 392.244 840 L 390.787 840 L 1190.3 0 Z M 1200 0 L 400.486 840 L 399.029 840 L 1198.54 0 Z M 1208.24 0 L 408.728 840 L 407.272 840 L 1206.79 0 Z M 1216.49 0 L 416.971 840 L 415.514 840 L 1215.03 0 Z M 1224.73 0 L 425.213 840 L 423.756 840 L 1223.27 0 Z M 1232.97 0 L 433.456 840 L 431.999 840 L 1231.51 0 Z M 1241.21 0 L 441.698 840 L 440.241 840 L 1239.76 0 Z M 1249.46 0 L 449.941 840 L 448.484 840 L 1248 0 Z M 1257.7 0 L 458.183 840 L 456.726 840 L 1256.24 0 Z M 1265.94 0 L 466.425 840 L 464.969 840 L 1264.48 0 Z M 1274.18 0 L 474.668 840 L 473.211 840 L 1272.73 0 Z M 1282.43 0 L 482.91 840 L 481.453 840 L 1280.97 0 Z M 1290.67 0 L 491.153 840 L 489.696 840 L 1289.21 0 Z M 1298.91 0 L 499.395 840 L 497.938 840 L 1297.45 0 Z M 1307.15 0 L 507.638 840 L 506.181 840 L 1305.7 0 Z M 1315.4 0 L 515.88 840 L 514.423 840 L 1313.94 0 Z M 1323.64 0 L 524.122 840 L 522.665 840 L 1322.18 0 Z M 1331.88 0 L 532.365 840 L 530.908 840 L 1330.42 0 Z M 1340.12 0 L 540.607 840 L 539.15 840 L 1338.67 0 Z M 1348.36 0 L 548.85 840 L 547.393 840 L 1346.91 0 Z M 1356.61 0 L 557.092 840 L 555.635 840 L 1355.15 0 Z M 1360 5.095 L 565.335 840 L 563.878 840 L 1360 3.565 Z M 1360 13.755 L 573.577 840 L 572.12 840 L 1360 12.224 Z M 1360 22.415 L 581.819 840 L 580.362 840 L 1360 20.884 L 1360 22.414 Z M 1360 31.075 L 590.062 840 L 588.605 840 L 1360 29.544 L 1360 31.074 Z M 1360 39.735 L 598.304 840 L 596.847 840 L 1360 38.204 L 1360 39.734 Z M 1360 48.395 L 606.547 840 L 605.09 840 L 1360 46.864 L 1360 48.394 Z M 1360 57.054 L 614.789 840 L 613.332 840 L 1360 55.523 Z M 1360 65.714 L 623.031 840 L 621.575 840 L 1360 64.183 L 1360 65.713 Z M 1360 74.374 L 631.274 840 L 629.817 840 L 1360 72.843 L 1360 74.373 Z M 1360 83.034 L 639.516 840 L 638.059 840 L 1360 81.503 L 1360 83.033 Z M 1360 91.694 L 647.759 840 L 646.302 840 L 1360 90.163 L 1360 91.693 Z M 1360 100.353 L 656.001 840 L 654.544 840 L 1360 98.822 Z M 1360 109.013 L 664.244 840 L 662.787 840 L 1360 107.482 Z M 1360 117.673 L 672.486 840 L 671.029 840 L 1360 116.142 Z M 1360 126.332 L 680.728 840 L 679.272 840 L 1360 124.802 Z M 1360 134.992 L 688.971 840 L 687.514 840 L 1360 133.461 Z M 1360 143.652 L 697.213 840 L 695.756 840 L 1360 142.121 Z M 1360 152.312 L 705.456 840 L 703.999 840 L 1360 150.781 Z M 1360 160.972 L 713.698 840 L 712.241 840 L 1360 159.441 Z M 1360 169.631 L 721.941 840 L 720.484 840 L 1360 168.101 Z M 1360 178.291 L 730.183 840 L 728.726 840 L 1360 176.76 Z M 1360 186.951 L 738.425 840 L 736.968 840 L 1360 185.42 Z M 1360 195.611 L 746.668 840 L 745.211 840 L 1360 194.08 Z M 1360 204.27 L 754.91 840 L 753.453 840 L 1360 202.74 Z M 1360 212.93 L 763.153 840 L 761.696 840 L 1360 211.4 Z M 1360 221.59 L 771.395 840 L 769.938 840 L 1360 220.059 Z M 1360 230.25 L 779.638 840 L 778.181 840 L 1360 228.719 Z M 1360 238.91 L 787.88 840 L 786.423 840 L 1360 237.379 Z M 1360 247.569 L 796.122 840 L 794.665 840 L 1360 246.039 Z M 1360 256.229 L 804.365 840 L 802.908 840 L 1360 254.699 Z M 1360 264.889 L 812.607 840 L 811.15 840 L 1360 263.358 Z M 1360 273.549 L 820.85 840 L 819.393 840 L 1360 272.018 Z M 1360 282.209 L 829.092 840 L 827.635 840 L 1360 280.678 Z M 1360 290.868 L 837.334 840 L 835.878 840 L 1360 289.338 Z M 1360 299.528 L 845.577 840 L 844.12 840 L 1360 297.998 Z M 1360 308.188 L 853.819 840 L 852.362 840 L 1360 306.657 Z M 1360 316.848 L 862.062 840 L 860.605 840 L 1360 315.317 Z M 1360 325.508 L 870.304 840 L 868.847 840 L 1360 323.977 Z M 1360 334.167 L 878.547 840 L 877.09 840 L 1360 332.637 Z M 1360 342.827 L 886.789 840 L 885.332 840 L 1360 341.297 Z M 1360 351.487 L 895.031 840 L 893.575 840 L 1360 349.956 Z M 1360 360.147 L 903.274 840 L 901.817 840 L 1360 358.616 Z M 1360 368.807 L 911.516 840 L 910.059 840 L 1360 367.276 Z M 1360 377.466 L 919.759 840 L 918.302 840 L 1360 375.936 Z M 1360 386.126 L 928.001 840 L 926.544 840 L 1360 384.595 Z M 1360 394.786 L 936.244 840 L 934.787 840 L 1360 393.255 Z M 1360 403.446 L 944.486 840 L 943.029 840 L 1360 401.915 Z M 1360 412.106 L 952.728 840 L 951.272 840 L 1360 410.575 Z M 1360 420.765 L 960.971 840 L 959.514 840 L 1360 419.235 Z M 1360 429.425 L 969.213 840 L 967.756 840 L 1360 427.894 Z M 1360 438.085 L 977.456 840 L 975.999 840 L 1360 436.554 Z M 1360 446.745 L 985.698 840 L 984.241 840 L 1360 445.214 Z M 1360 455.405 L 993.941 840 L 992.484 840 L 1360 453.874 Z M 1360 464.064 L 1002.18 840 L 1000.73 840 L 1360 462.534 Z M 1360 472.724 L 1010.43 840 L 1008.97 840 L 1360 471.193 Z M 1360 481.384 L 1018.67 840 L 1017.21 840 L 1360 479.853 Z M 1360 490.044 L 1026.91 840 L 1025.45 840 L 1360 488.513 Z M 1360 498.703 L 1035.15 840 L 1033.7 840 L 1360 497.173 Z M 1360 507.363 L 1043.4 840 L 1041.94 840 L 1360 505.833 Z M 1360 516.023 L 1051.64 840 L 1050.18 840 L 1360 514.492 Z M 1360 524.683 L 1059.88 840 L 1058.42 840 L 1360 523.152 Z M 1360 533.343 L 1068.12 840 L 1066.67 840 L 1360 531.812 Z M 1360 542.002 L 1076.36 840 L 1074.91 840 L 1360 540.472 Z M 1360 550.662 L 1084.61 840 L 1083.15 840 L 1360 549.132 Z M 1360 559.322 L 1092.85 840 L 1091.39 840 L 1360 557.791 Z M 1360 567.982 L 1101.09 840 L 1099.64 840 L 1360 566.451 Z M 1360 576.642 L 1109.33 840 L 1107.88 840 L 1360 575.111 Z M 1360 585.301 L 1117.58 840 L 1116.12 840 L 1360 583.771 Z M 1360 593.961 L 1125.82 840 L 1124.36 840 L 1360 592.431 Z M 1360 602.621 L 1134.06 840 L 1132.6 840 L 1360 601.09 Z M 1360 611.281 L 1142.3 840 L 1140.85 840 L 1360 609.75 Z M 1360 619.941 L 1150.55 840 L 1149.09 840 L 1360 618.41 Z M 1360 628.6 L 1158.79 840 L 1157.33 840 L 1360 627.07 Z M 1360 637.26 L 1167.03 840 L 1165.57 840 L 1360 635.73 Z M 1360 645.92 L 1175.27 840 L 1173.82 840 L 1360 644.389 Z M 1360 654.58 L 1183.52 840 L 1182.06 840 L 1360 653.049 Z M 1360 663.24 L 1191.76 840 L 1190.3 840 L 1360 661.709 Z M 1360 671.899 L 1200 840 L 1198.54 840 L 1360 670.369 Z M 1360 680.559 L 1208.24 840 L 1206.79 840 L 1360 679.028 Z M 1360 689.219 L 1216.49 840 L 1215.03 840 L 1360 687.688 Z M 1360 697.879 L 1224.73 840 L 1223.27 840 L 1360 696.348 Z M 1360 706.539 L 1232.97 840 L 1231.51 840 L 1360 705.008 Z M 1360 715.198 L 1241.21 840 L 1239.76 840 L 1360 713.668 Z M 1360 723.858 L 1249.46 840 L 1248 840 L 1360 722.327 Z M 1360 732.518 L 1257.7 840 L 1256.24 840 L 1360 730.987 Z M 1360 741.178 L 1265.94 840 L 1264.48 840 L 1360 739.647 Z M 1360 749.838 L 1274.18 840 L 1272.73 840 L 1360 748.307 Z M 1360 758.497 L 1282.43 840 L 1280.97 840 L 1360 756.967 Z M 1360 767.157 L 1290.67 840 L 1289.21 840 L 1360 765.626 Z M 1360 775.817 L 1298.91 840 L 1297.45 840 L 1360 774.286 Z M 1360 784.477 L 1307.15 840 L 1305.7 840 L 1360 782.946 Z M 1360 793.136 L 1315.4 840 L 1313.94 840 L 1360 791.606 Z M 1360 801.796 L 1323.64 840 L 1322.18 840 L 1360 800.266 Z M 1360 810.456 L 1331.88 840 L 1330.42 840 L 1360 808.925 Z M 1360 819.116 L 1340.12 840 L 1338.67 840 L 1360 817.585 Z M 1360 827.776 L 1348.36 840 L 1346.91 840 L 1360 826.245 Z M 1360 836.435 L 1356.61 840 L 1355.15 840 L 1360 834.905 Z M 796.122 0 L 0 836.435 L 0 834.905 L 794.665 0 Z M 787.88 0 L 0 827.776 L 0 826.245 L 786.423 0 Z M 779.638 0 L 0 819.116 L 0 817.585 L 778.181 0 Z M 771.395 0 L 0 810.456 L 0 808.925 L 769.938 0 Z M 763.153 0 L 0 801.796 L 0 800.266 L 761.696 0 Z M 754.91 0 L 0 793.136 L 0 791.606 L 753.453 0 Z M 746.668 0 L 0 784.477 L 0 782.946 L 745.211 0 Z M 738.425 0 L 0 775.817 L 0 774.286 L 736.968 0 Z M 730.183 0 L 0 767.157 L 0 765.626 L 728.726 0 Z M 721.941 0 L 0 758.497 L 0 756.967 L 720.484 0 Z M 713.698 0 L 0 749.838 L 0 748.307 L 712.241 0 Z M 705.456 0 L 0 741.178 L 0 739.647 L 703.999 0 Z M 697.213 0 L 0 732.518 L 0 730.987 L 695.756 0 Z M 688.971 0 L 0 723.858 L 0 722.327 L 687.514 0 Z M 680.728 0 L 0 715.198 L 0 713.668 L 679.272 0 Z M 672.486 0 L 0 706.539 L 0 705.008 L 671.029 0 Z M 664.244 0 L 0 697.879 L 0 696.348 L 662.787 0 Z M 656.001 0 L 0 689.219 L 0 687.688 L 654.544 0 Z M 647.759 0 L 0 680.559 L 0 679.028 L 646.302 0 Z M 639.516 0 L 0 671.899 L 0 670.369 L 638.059 0 Z M 631.274 0 L 0 663.24 L 0 661.709 L 629.817 0 Z M 623.031 0 L 0 654.58 L 0 653.049 L 621.575 0 Z M 614.789 0 L 0 645.92 L 0 644.389 L 613.332 0 Z M 606.547 0 L 0 637.26 L 0 635.73 L 605.09 0 Z M 598.304 0 L 0 628.6 L 0 627.07 L 596.847 0 Z M 590.062 0 L 0 619.941 L 0 618.41 L 588.605 0 Z M 581.819 0 L 0 611.281 L 0 609.75 L 580.362 0 Z M 573.577 0 L 0 602.621 L 0 601.09 L 572.12 0 Z M 565.335 0 L 0 593.961 L 0 592.431 L 563.878 0 Z M 557.092 0 L 0 585.301 L 0 583.771 L 555.635 0 Z M 548.85 0 L 0 576.642 L 0 575.111 L 547.393 0 Z M 540.607 0 L 0 567.982 L 0 566.451 L 539.15 0 Z M 532.365 0 L 0 559.322 L 0 557.791 L 530.908 0 Z M 524.122 0 L 0 550.662 L 0 549.132 L 522.665 0 Z M 515.88 0 L 0 542.002 L 0 540.472 L 514.423 0 Z M 507.638 0 L 0 533.343 L 0 531.812 L 506.181 0 Z M 499.395 0 L 0 524.683 L 0 523.152 L 497.938 0 Z M 491.153 0 L 0 516.023 L 0 514.492 L 489.696 0 Z M 482.91 0 L 0 507.363 L 0 505.833 L 481.453 0 Z M 474.668 0 L 0 498.703 L 0 497.173 L 473.211 0 Z M 466.425 0 L 0 490.044 L 0 488.513 L 464.969 0 Z M 458.183 0 L 0 481.384 L 0 479.853 L 456.726 0 Z M 449.941 0 L 0 472.724 L 0 471.193 L 448.484 0 Z M 441.698 0 L 0 464.064 L 0 462.534 L 440.241 0 Z M 433.456 0 L 0 455.405 L 0 453.874 L 431.999 0 Z M 425.213 0 L 0 446.745 L 0 445.214 L 423.756 0 Z M 416.971 0 L 0 438.085 L 0 436.554 L 415.514 0 Z M 408.728 0 L 0 429.425 L 0 427.894 L 407.272 0 Z M 400.486 0 L 0 420.765 L 0 419.235 L 399.029 0 Z M 392.244 0 L 0 412.106 L 0 410.575 L 390.787 0 Z M 384.001 0 L 0 403.446 L 0 401.915 L 382.544 0 Z M 375.759 0 L 0 394.786 L 0 393.255 L 374.302 0 Z M 367.516 0 L 0 386.126 L 0 384.595 L 366.059 0 Z M 359.274 0 L 0 377.466 L 0 375.936 L 357.817 0 Z M 351.031 0 L 0 368.807 L 0 367.276 L 349.575 0 Z M 342.789 0 L 0 360.147 L 0 358.616 L 341.332 0 Z M 334.547 0 L 0 351.487 L 0 349.956 L 333.09 0 Z M 326.304 0 L 0 342.827 L 0 341.297 L 324.847 0 Z M 318.062 0 L 0 334.167 L 0 332.637 L 316.605 0 Z M 309.819 0 L 0 325.508 L 0 323.977 L 308.362 0 Z M 301.577 0 L 0 316.848 L 0 315.317 L 300.12 0 Z M 293.335 0 L 0 308.188 L 0 306.657 L 291.878 0 Z M 285.092 0 L 0 299.528 L 0 297.998 L 283.635 0 Z M 276.85 0 L 0 290.868 L 0 289.338 L 275.393 0 Z M 268.607 0 L 0 282.209 L 0 280.678 L 267.15 0 Z M 260.365 0 L 0 273.549 L 0 272.018 L 258.908 0 Z M 252.122 0 L 0 264.889 L 0 263.358 L 250.665 0 Z M 243.88 0 L 0 256.229 L 0 254.699 L 242.423 0 Z M 235.638 0 L 0 247.569 L 0 246.039 L 234.181 0 Z M 227.395 0 L 0 238.91 L 0 237.379 L 225.938 0 Z M 219.153 0 L 0 230.25 L 0 228.719 L 217.696 0 Z M 210.91 0 L 0 221.59 L 0 220.059 L 209.453 0 Z M 202.668 0 L 0 212.93 L 0 211.4 L 201.211 0 Z M 194.425 0 L 0 204.27 L 0 202.74 L 192.969 0 Z M 186.183 0 L 0 195.611 L 0 194.08 L 184.726 0 Z M 177.941 0 L 0 186.951 L 0 185.42 L 176.484 0 Z M 169.698 0 L 0 178.291 L 0 176.76 L 168.241 0 Z M 161.456 0 L 0 169.631 L 0 168.101 L 159.999 0 Z M 153.213 0 L 0 160.972 L 0 159.441 L 151.756 0 Z M 144.971 0 L 0 152.312 L 0 150.781 L 143.514 0 Z M 136.728 0 L 0 143.652 L 0 142.121 L 135.272 0 Z M 128.486 0 L 0 134.992 L 0 133.461 L 127.029 0 Z M 120.244 0 L 0 126.332 L 0 124.802 L 118.787 0 Z M 112.001 0 L 0 117.673 L 0 116.142 L 110.544 0 Z M 103.759 0 L 0 109.013 L 0 107.482 L 102.302 0 Z M 95.516 0 L 0 100.353 L 0 98.823 L 94.06 0 Z M 87.274 0 L 0 91.693 L 0 90.163 L 85.817 0 Z M 79.03 0 L 0 83.033 L 0 81.503 L 77.575 0 L 79.031 0 Z M 70.79 0 L 0 74.374 L 0 72.843 L 69.332 0 L 70.789 0 Z M 62.548 0 L 0 65.714 L 0 64.184 L 61.09 0 L 62.547 0 Z M 54.305 0 L 0 57.054 L 0 55.524 L 52.847 0 L 54.304 0 Z M 46.063 0 L 0 48.394 L 0 46.864 L 44.605 0 L 46.062 0 Z M 37.82 0 L 0 39.734 L 0 38.204 L 36.362 0 L 37.819 0 Z M 29.578 0 L 0 31.075 L 0 29.544 L 28.12 0 L 29.577 0 Z M 21.335 0 L 0 22.415 L 0 20.885 L 19.878 0 L 21.334 0 Z M 13.093 0 L 0 13.755 L 0 12.225 L 11.635 0 L 13.092 0 Z M 4.85 0 L 0 5.095 L 0 3.565 L 3.393 0 Z" fill="transparent" height="840.0000302734375px" id="z3fKSU5pK" width="1360.0000585937505px"><path d="M 0 0 L 1360 0 L 1360 840 L 0 840 Z" fill="transparent" height="840px" id="yRER2zQRv" width="1360px"/><path d="M 804.365 0 L 4.85 840 L 3.393 840 L 802.908 0 Z M 812.607 0 L 13.092 840 L 11.635 840 L 811.15 0 Z M 820.85 0 L 21.335 840 L 19.878 840 L 819.393 0 Z M 829.092 0 L 29.577 840 L 28.12 840 L 827.635 0 Z M 837.334 0 L 37.819 840 L 36.362 840 L 835.878 0 Z M 845.577 0 L 46.062 840 L 44.605 840 L 844.12 0 Z M 853.819 0 L 54.304 840 L 52.847 840 L 852.362 0 Z M 862.062 0 L 62.547 840 L 61.09 840 L 860.605 0 Z M 870.304 0 L 70.789 840 L 69.332 840 L 868.847 0 Z M 878.547 0 L 79.032 840 L 77.575 840 L 877.09 0 Z M 886.789 0 L 87.274 840 L 85.817 840 L 885.332 0 Z M 895.031 0 L 95.516 840 L 94.06 840 L 893.575 0 Z M 903.274 0 L 103.759 840 L 102.302 840 L 901.817 0 Z M 911.516 0 L 112.001 840 L 110.544 840 L 910.059 0 Z M 919.759 0 L 120.244 840 L 118.787 840 L 918.302 0 Z M 928.001 0 L 128.486 840 L 127.029 840 L 926.544 0 Z M 936.244 0 L 136.728 840 L 135.272 840 L 934.787 0 Z M 944.486 0 L 144.971 840 L 143.514 840 L 943.029 0 Z M 952.728 0 L 153.213 840 L 151.756 840 L 951.272 0 Z M 960.971 0 L 161.456 840 L 159.999 840 L 959.514 0 Z M 969.213 0 L 169.698 840 L 168.241 840 L 967.756 0 Z M 977.456 0 L 177.941 840 L 176.484 840 L 975.999 0 Z M 985.698 0 L 186.183 840 L 184.726 840 L 984.241 0 Z M 993.941 0 L 194.425 840 L 192.969 840 L 992.484 0 Z M 1002.18 0 L 202.668 840 L 201.211 840 L 1000.73 0 Z M 1010.43 0 L 210.91 840 L 209.453 840 L 1008.97 0 Z M 1018.67 0 L 219.153 840 L 217.696 840 L 1017.21 0 Z M 1026.91 0 L 227.395 840 L 225.938 840 L 1025.45 0 Z M 1035.15 0 L 235.638 840 L 234.181 840 L 1033.7 0 Z M 1043.4 0 L 243.88 840 L 242.423 840 L 1041.94 0 Z M 1051.64 0 L 252.122 840 L 250.665 840 L 1050.18 0 Z M 1059.88 0 L 260.365 840 L 258.908 840 L 1058.42 0 Z M 1068.12 0 L 268.607 840 L 267.15 840 L 1066.67 0 Z M 1076.36 0 L 276.85 840 L 275.393 840 L 1074.91 0 Z M 1084.61 0 L 285.092 840 L 283.635 840 L 1083.15 0 Z M 1092.85 0 L 293.335 840 L 291.878 840 L 1091.39 0 Z M 1101.09 0 L 301.577 840 L 300.12 840 L 1099.64 0 Z M 1109.33 0 L 309.819 840 L 308.362 840 L 1107.88 0 Z M 1117.58 0 L 318.062 840 L 316.605 840 L 1116.12 0 Z M 1125.82 0 L 326.304 840 L 324.847 840 L 1124.36 0 Z M 1134.06 0 L 334.547 840 L 333.09 840 L 1132.6 0 Z M 1142.3 0 L 342.789 840 L 341.332 840 L 1140.85 0 Z M 1150.55 0 L 351.031 840 L 349.575 840 L 1149.09 0 Z M 1158.79 0 L 359.274 840 L 357.817 840 L 1157.33 0 Z M 1167.03 0 L 367.516 840 L 366.059 840 L 1165.57 0 Z M 1175.27 0 L 375.759 840 L 374.302 840 L 1173.82 0 Z M 1183.52 0 L 384.001 840 L 382.544 840 L 1182.06 0 Z M 1191.76 0 L 392.244 840 L 390.787 840 L 1190.3 0 Z M 1200 0 L 400.486 840 L 399.029 840 L 1198.54 0 Z M 1208.24 0 L 408.728 840 L 407.272 840 L 1206.79 0 Z M 1216.49 0 L 416.971 840 L 415.514 840 L 1215.03 0 Z M 1224.73 0 L 425.213 840 L 423.756 840 L 1223.27 0 Z M 1232.97 0 L 433.456 840 L 431.999 840 L 1231.51 0 Z M 1241.21 0 L 441.698 840 L 440.241 840 L 1239.76 0 Z M 1249.46 0 L 449.941 840 L 448.484 840 L 1248 0 Z M 1257.7 0 L 458.183 840 L 456.726 840 L 1256.24 0 Z M 1265.94 0 L 466.425 840 L 464.969 840 L 1264.48 0 Z M 1274.18 0 L 474.668 840 L 473.211 840 L 1272.73 0 Z M 1282.43 0 L 482.91 840 L 481.453 840 L 1280.97 0 Z M 1290.67 0 L 491.153 840 L 489.696 840 L 1289.21 0 Z M 1298.91 0 L 499.395 840 L 497.938 840 L 1297.45 0 Z M 1307.15 0 L 507.638 840 L 506.181 840 L 1305.7 0 Z M 1315.4 0 L 515.88 840 L 514.423 840 L 1313.94 0 Z M 1323.64 0 L 524.122 840 L 522.665 840 L 1322.18 0 Z M 1331.88 0 L 532.365 840 L 530.908 840 L 1330.42 0 Z M 1340.12 0 L 540.607 840 L 539.15 840 L 1338.67 0 Z M 1348.36 0 L 548.85 840 L 547.393 840 L 1346.91 0 Z M 1356.61 0 L 557.092 840 L 555.635 840 L 1355.15 0 Z M 1360 5.095 L 565.335 840 L 563.878 840 L 1360 3.565 Z M 1360 13.755 L 573.577 840 L 572.12 840 L 1360 12.224 Z M 1360 22.415 L 581.819 840 L 580.362 840 L 1360 20.884 L 1360 22.414 Z M 1360 31.075 L 590.062 840 L 588.605 840 L 1360 29.544 L 1360 31.074 Z M 1360 39.735 L 598.304 840 L 596.847 840 L 1360 38.204 L 1360 39.734 Z M 1360 48.395 L 606.547 840 L 605.09 840 L 1360 46.864 L 1360 48.394 Z M 1360 57.054 L 614.789 840 L 613.332 840 L 1360 55.523 Z M 1360 65.714 L 623.031 840 L 621.575 840 L 1360 64.183 L 1360 65.713 Z M 1360 74.374 L 631.274 840 L 629.817 840 L 1360 72.843 L 1360 74.373 Z M 1360 83.034 L 639.516 840 L 638.059 840 L 1360 81.503 L 1360 83.033 Z M 1360 91.694 L 647.759 840 L 646.302 840 L 1360 90.163 L 1360 91.693 Z M 1360 100.353 L 656.001 840 L 654.544 840 L 1360 98.822 Z M 1360 109.013 L 664.244 840 L 662.787 840 L 1360 107.482 Z M 1360 117.673 L 672.486 840 L 671.029 840 L 1360 116.142 Z M 1360 126.332 L 680.728 840 L 679.272 840 L 1360 124.802 Z M 1360 134.992 L 688.971 840 L 687.514 840 L 1360 133.461 Z M 1360 143.652 L 697.213 840 L 695.756 840 L 1360 142.121 Z M 1360 152.312 L 705.456 840 L 703.999 840 L 1360 150.781 Z M 1360 160.972 L 713.698 840 L 712.241 840 L 1360 159.441 Z M 1360 169.631 L 721.941 840 L 720.484 840 L 1360 168.101 Z M 1360 178.291 L 730.183 840 L 728.726 840 L 1360 176.76 Z M 1360 186.951 L 738.425 840 L 736.968 840 L 1360 185.42 Z M 1360 195.611 L 746.668 840 L 745.211 840 L 1360 194.08 Z M 1360 204.27 L 754.91 840 L 753.453 840 L 1360 202.74 Z M 1360 212.93 L 763.153 840 L 761.696 840 L 1360 211.4 Z M 1360 221.59 L 771.395 840 L 769.938 840 L 1360 220.059 Z M 1360 230.25 L 779.638 840 L 778.181 840 L 1360 228.719 Z M 1360 238.91 L 787.88 840 L 786.423 840 L 1360 237.379 Z M 1360 247.569 L 796.122 840 L 794.665 840 L 1360 246.039 Z M 1360 256.229 L 804.365 840 L 802.908 840 L 1360 254.699 Z M 1360 264.889 L 812.607 840 L 811.15 840 L 1360 263.358 Z M 1360 273.549 L 820.85 840 L 819.393 840 L 1360 272.018 Z M 1360 282.209 L 829.092 840 L 827.635 840 L 1360 280.678 Z M 1360 290.868 L 837.334 840 L 835.878 840 L 1360 289.338 Z M 1360 299.528 L 845.577 840 L 844.12 840 L 1360 297.998 Z M 1360 308.188 L 853.819 840 L 852.362 840 L 1360 306.657 Z M 1360 316.848 L 862.062 840 L 860.605 840 L 1360 315.317 Z M 1360 325.508 L 870.304 840 L 868.847 840 L 1360 323.977 Z M 1360 334.167 L 878.547 840 L 877.09 840 L 1360 332.637 Z M 1360 342.827 L 886.789 840 L 885.332 840 L 1360 341.297 Z M 1360 351.487 L 895.031 840 L 893.575 840 L 1360 349.956 Z M 1360 360.147 L 903.274 840 L 901.817 840 L 1360 358.616 Z M 1360 368.807 L 911.516 840 L 910.059 840 L 1360 367.276 Z M 1360 377.466 L 919.759 840 L 918.302 840 L 1360 375.936 Z M 1360 386.126 L 928.001 840 L 926.544 840 L 1360 384.595 Z M 1360 394.786 L 936.244 840 L 934.787 840 L 1360 393.255 Z M 1360 403.446 L 944.486 840 L 943.029 840 L 1360 401.915 Z M 1360 412.106 L 952.728 840 L 951.272 840 L 1360 410.575 Z M 1360 420.765 L 960.971 840 L 959.514 840 L 1360 419.235 Z M 1360 429.425 L 969.213 840 L 967.756 840 L 1360 427.894 Z M 1360 438.085 L 977.456 840 L 975.999 840 L 1360 436.554 Z M 1360 446.745 L 985.698 840 L 984.241 840 L 1360 445.214 Z M 1360 455.405 L 993.941 840 L 992.484 840 L 1360 453.874 Z M 1360 464.064 L 1002.18 840 L 1000.73 840 L 1360 462.534 Z M 1360 472.724 L 1010.43 840 L 1008.97 840 L 1360 471.193 Z M 1360 481.384 L 1018.67 840 L 1017.21 840 L 1360 479.853 Z M 1360 490.044 L 1026.91 840 L 1025.45 840 L 1360 488.513 Z M 1360 498.703 L 1035.15 840 L 1033.7 840 L 1360 497.173 Z M 1360 507.363 L 1043.4 840 L 1041.94 840 L 1360 505.833 Z M 1360 516.023 L 1051.64 840 L 1050.18 840 L 1360 514.492 Z M 1360 524.683 L 1059.88 840 L 1058.42 840 L 1360 523.152 Z M 1360 533.343 L 1068.12 840 L 1066.67 840 L 1360 531.812 Z M 1360 542.002 L 1076.36 840 L 1074.91 840 L 1360 540.472 Z M 1360 550.662 L 1084.61 840 L 1083.15 840 L 1360 549.132 Z M 1360 559.322 L 1092.85 840 L 1091.39 840 L 1360 557.791 Z M 1360 567.982 L 1101.09 840 L 1099.64 840 L 1360 566.451 Z M 1360 576.642 L 1109.33 840 L 1107.88 840 L 1360 575.111 Z M 1360 585.301 L 1117.58 840 L 1116.12 840 L 1360 583.771 Z M 1360 593.961 L 1125.82 840 L 1124.36 840 L 1360 592.431 Z M 1360 602.621 L 1134.06 840 L 1132.6 840 L 1360 601.09 Z M 1360 611.281 L 1142.3 840 L 1140.85 840 L 1360 609.75 Z M 1360 619.941 L 1150.55 840 L 1149.09 840 L 1360 618.41 Z M 1360 628.6 L 1158.79 840 L 1157.33 840 L 1360 627.07 Z M 1360 637.26 L 1167.03 840 L 1165.57 840 L 1360 635.73 Z M 1360 645.92 L 1175.27 840 L 1173.82 840 L 1360 644.389 Z M 1360 654.58 L 1183.52 840 L 1182.06 840 L 1360 653.049 Z M 1360 663.24 L 1191.76 840 L 1190.3 840 L 1360 661.709 Z M 1360 671.899 L 1200 840 L 1198.54 840 L 1360 670.369 Z M 1360 680.559 L 1208.24 840 L 1206.79 840 L 1360 679.028 Z M 1360 689.219 L 1216.49 840 L 1215.03 840 L 1360 687.688 Z M 1360 697.879 L 1224.73 840 L 1223.27 840 L 1360 696.348 Z M 1360 706.539 L 1232.97 840 L 1231.51 840 L 1360 705.008 Z M 1360 715.198 L 1241.21 840 L 1239.76 840 L 1360 713.668 Z M 1360 723.858 L 1249.46 840 L 1248 840 L 1360 722.327 Z M 1360 732.518 L 1257.7 840 L 1256.24 840 L 1360 730.987 Z M 1360 741.178 L 1265.94 840 L 1264.48 840 L 1360 739.647 Z M 1360 749.838 L 1274.18 840 L 1272.73 840 L 1360 748.307 Z M 1360 758.497 L 1282.43 840 L 1280.97 840 L 1360 756.967 Z M 1360 767.157 L 1290.67 840 L 1289.21 840 L 1360 765.626 Z M 1360 775.817 L 1298.91 840 L 1297.45 840 L 1360 774.286 Z M 1360 784.477 L 1307.15 840 L 1305.7 840 L 1360 782.946 Z M 1360 793.136 L 1315.4 840 L 1313.94 840 L 1360 791.606 Z M 1360 801.796 L 1323.64 840 L 1322.18 840 L 1360 800.266 Z M 1360 810.456 L 1331.88 840 L 1330.42 840 L 1360 808.925 Z M 1360 819.116 L 1340.12 840 L 1338.67 840 L 1360 817.585 Z M 1360 827.776 L 1348.36 840 L 1346.91 840 L 1360 826.245 Z M 1360 836.435 L 1356.61 840 L 1355.15 840 L 1360 834.905 Z M 796.122 0 L 0 836.435 L 0 834.905 L 794.665 0 Z M 787.88 0 L 0 827.776 L 0 826.245 L 786.423 0 Z M 779.638 0 L 0 819.116 L 0 817.585 L 778.181 0 Z M 771.395 0 L 0 810.456 L 0 808.925 L 769.938 0 Z M 763.153 0 L 0 801.796 L 0 800.266 L 761.696 0 Z M 754.91 0 L 0 793.136 L 0 791.606 L 753.453 0 Z M 746.668 0 L 0 784.477 L 0 782.946 L 745.211 0 Z M 738.425 0 L 0 775.817 L 0 774.286 L 736.968 0 Z M 730.183 0 L 0 767.157 L 0 765.626 L 728.726 0 Z M 721.941 0 L 0 758.497 L 0 756.967 L 720.484 0 Z M 713.698 0 L 0 749.838 L 0 748.307 L 712.241 0 Z M 705.456 0 L 0 741.178 L 0 739.647 L 703.999 0 Z M 697.213 0 L 0 732.518 L 0 730.987 L 695.756 0 Z M 688.971 0 L 0 723.858 L 0 722.327 L 687.514 0 Z M 680.728 0 L 0 715.198 L 0 713.668 L 679.272 0 Z M 672.486 0 L 0 706.539 L 0 705.008 L 671.029 0 Z M 664.244 0 L 0 697.879 L 0 696.348 L 662.787 0 Z M 656.001 0 L 0 689.219 L 0 687.688 L 654.544 0 Z M 647.759 0 L 0 680.559 L 0 679.028 L 646.302 0 Z M 639.516 0 L 0 671.899 L 0 670.369 L 638.059 0 Z M 631.274 0 L 0 663.24 L 0 661.709 L 629.817 0 Z M 623.031 0 L 0 654.58 L 0 653.049 L 621.575 0 Z M 614.789 0 L 0 645.92 L 0 644.389 L 613.332 0 Z M 606.547 0 L 0 637.26 L 0 635.73 L 605.09 0 Z M 598.304 0 L 0 628.6 L 0 627.07 L 596.847 0 Z M 590.062 0 L 0 619.941 L 0 618.41 L 588.605 0 Z M 581.819 0 L 0 611.281 L 0 609.75 L 580.362 0 Z M 573.577 0 L 0 602.621 L 0 601.09 L 572.12 0 Z M 565.335 0 L 0 593.961 L 0 592.431 L 563.878 0 Z M 557.092 0 L 0 585.301 L 0 583.771 L 555.635 0 Z M 548.85 0 L 0 576.642 L 0 575.111 L 547.393 0 Z M 540.607 0 L 0 567.982 L 0 566.451 L 539.15 0 Z M 532.365 0 L 0 559.322 L 0 557.791 L 530.908 0 Z M 524.122 0 L 0 550.662 L 0 549.132 L 522.665 0 Z M 515.88 0 L 0 542.002 L 0 540.472 L 514.423 0 Z M 507.638 0 L 0 533.343 L 0 531.812 L 506.181 0 Z M 499.395 0 L 0 524.683 L 0 523.152 L 497.938 0 Z M 491.153 0 L 0 516.023 L 0 514.492 L 489.696 0 Z M 482.91 0 L 0 507.363 L 0 505.833 L 481.453 0 Z M 474.668 0 L 0 498.703 L 0 497.173 L 473.211 0 Z M 466.425 0 L 0 490.044 L 0 488.513 L 464.969 0 Z M 458.183 0 L 0 481.384 L 0 479.853 L 456.726 0 Z M 449.941 0 L 0 472.724 L 0 471.193 L 448.484 0 Z M 441.698 0 L 0 464.064 L 0 462.534 L 440.241 0 Z M 433.456 0 L 0 455.405 L 0 453.874 L 431.999 0 Z M 425.213 0 L 0 446.745 L 0 445.214 L 423.756 0 Z M 416.971 0 L 0 438.085 L 0 436.554 L 415.514 0 Z M 408.728 0 L 0 429.425 L 0 427.894 L 407.272 0 Z M 400.486 0 L 0 420.765 L 0 419.235 L 399.029 0 Z M 392.244 0 L 0 412.106 L 0 410.575 L 390.787 0 Z M 384.001 0 L 0 403.446 L 0 401.915 L 382.544 0 Z M 375.759 0 L 0 394.786 L 0 393.255 L 374.302 0 Z M 367.516 0 L 0 386.126 L 0 384.595 L 366.059 0 Z M 359.274 0 L 0 377.466 L 0 375.936 L 357.817 0 Z M 351.031 0 L 0 368.807 L 0 367.276 L 349.575 0 Z M 342.789 0 L 0 360.147 L 0 358.616 L 341.332 0 Z M 334.547 0 L 0 351.487 L 0 349.956 L 333.09 0 Z M 326.304 0 L 0 342.827 L 0 341.297 L 324.847 0 Z M 318.062 0 L 0 334.167 L 0 332.637 L 316.605 0 Z M 309.819 0 L 0 325.508 L 0 323.977 L 308.362 0 Z M 301.577 0 L 0 316.848 L 0 315.317 L 300.12 0 Z M 293.335 0 L 0 308.188 L 0 306.657 L 291.878 0 Z M 285.092 0 L 0 299.528 L 0 297.998 L 283.635 0 Z M 276.85 0 L 0 290.868 L 0 289.338 L 275.393 0 Z M 268.607 0 L 0 282.209 L 0 280.678 L 267.15 0 Z M 260.365 0 L 0 273.549 L 0 272.018 L 258.908 0 Z M 252.122 0 L 0 264.889 L 0 263.358 L 250.665 0 Z M 243.88 0 L 0 256.229 L 0 254.699 L 242.423 0 Z M 235.638 0 L 0 247.569 L 0 246.039 L 234.181 0 Z M 227.395 0 L 0 238.91 L 0 237.379 L 225.938 0 Z M 219.153 0 L 0 230.25 L 0 228.719 L 217.696 0 Z M 210.91 0 L 0 221.59 L 0 220.059 L 209.453 0 Z M 202.668 0 L 0 212.93 L 0 211.4 L 201.211 0 Z M 194.425 0 L 0 204.27 L 0 202.74 L 192.969 0 Z M 186.183 0 L 0 195.611 L 0 194.08 L 184.726 0 Z M 177.941 0 L 0 186.951 L 0 185.42 L 176.484 0 Z M 169.698 0 L 0 178.291 L 0 176.76 L 168.241 0 Z M 161.456 0 L 0 169.631 L 0 168.101 L 159.999 0 Z M 153.213 0 L 0 160.972 L 0 159.441 L 151.756 0 Z M 144.971 0 L 0 152.312 L 0 150.781 L 143.514 0 Z M 136.728 0 L 0 143.652 L 0 142.121 L 135.272 0 Z M 128.486 0 L 0 134.992 L 0 133.461 L 127.029 0 Z M 120.244 0 L 0 126.332 L 0 124.802 L 118.787 0 Z M 112.001 0 L 0 117.673 L 0 116.142 L 110.544 0 Z M 103.759 0 L 0 109.013 L 0 107.482 L 102.302 0 Z M 95.516 0 L 0 100.353 L 0 98.823 L 94.06 0 Z M 87.274 0 L 0 91.693 L 0 90.163 L 85.817 0 Z M 79.03 0 L 0 83.033 L 0 81.503 L 77.575 0 L 79.031 0 Z M 70.79 0 L 0 74.374 L 0 72.843 L 69.332 0 L 70.789 0 Z M 62.548 0 L 0 65.714 L 0 64.184 L 61.09 0 L 62.547 0 Z M 54.305 0 L 0 57.054 L 0 55.524 L 52.847 0 L 54.304 0 Z M 46.063 0 L 0 48.394 L 0 46.864 L 44.605 0 L 46.062 0 Z M 37.82 0 L 0 39.734 L 0 38.204 L 36.362 0 L 37.819 0 Z M 29.578 0 L 0 31.075 L 0 29.544 L 28.12 0 L 29.577 0 Z M 21.335 0 L 0 22.415 L 0 20.885 L 19.878 0 L 21.334 0 Z M 13.093 0 L 0 13.755 L 0 12.225 L 11.635 0 L 13.092 0 Z M 4.85 0 L 0 5.095 L 0 3.565 L 3.393 0 Z" fill="rgb(241, 242, 244)" height="840.0000302734375px" id="QpPT50KOU" width="1360.0000585937505px"/></g></svg>'
			}
			style={{
				...style,
			}}
		/>
	);
});
var css3 = [
	`.framer-QYSrD { -webkit-mask: ${mask2}; aspect-ratio: 1.619047619047619; display: block; mask: ${mask2}; user-select: none; width: 1360px; }`,
];
var Icon = withCSS(Component, css3, "framer-QYSrD");
Icon.displayName = "light";
var stdin_default2 = Icon;

// /:https://framerusercontent.com/modules/FAPfNQ7QnOQQEp751gAN/6uC4NNAweOaL3lvnRfe3/GkYmXi5Sh.js
import { jsx as _jsx3 } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls as addPropertyControls2,
	ComponentViewportProvider,
	ControlType as ControlType5,
	cx as cx2,
	getFonts,
	SmartComponentScopedContainer,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS as withCSS2,
} from "unframer";
import { LayoutGroup, motion as motion3, MotionConfigContext } from "unframer";
import * as React4 from "react";
import { useRef as useRef5 } from "react";
var LottieFonts = getFonts(Lottie);
var cycleOrder = ["chxEP1gyV", "Cll_P8xj7", "nVCMIMTYC", "iaDtdDEWz"];
var serializationHash = "framer-teFd7";
var variantClassNames = {
	chxEP1gyV: "framer-v-10l54kp",
	Cll_P8xj7: "framer-v-vkfotw",
	iaDtdDEWz: "framer-v-748nkg",
	nVCMIMTYC: "framer-v-avwean",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value: value2, children }) => {
	const config = React4.useContext(MotionConfigContext);
	const transition = value2 ?? config.transition;
	const contextValue = React4.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion3.create(React4.Fragment);
var humanReadableVariantMap = {
	d1: "chxEP1gyV",
	d2: "Cll_P8xj7",
	t1: "nVCMIMTYC",
	t2: "iaDtdDEWz",
};
var getProps2 = ({ height: height2, id, width: width2, ...props }) => {
	return {
		...props,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "chxEP1gyV",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component2 = /* @__PURE__ */ React4.forwardRef(function (props, ref) {
	const fallbackRef = useRef5(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React4.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className: className3,
		layoutId,
		variant,
		...restProps
	} = getProps2(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "chxEP1gyV",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx2(serializationHash, ...sharedStyleClassNames);
	const isDisplayed = () => {
		if (["Cll_P8xj7", "iaDtdDEWz"].includes(baseVariant)) return true;
		return false;
	};
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion3.div
						{...restProps}
						{...gestureHandlers}
						className={cx2(
							scopingClassNames,
							"framer-10l54kp",
							className3,
							classNames,
						)}
						data-framer-name={"d1"}
						layoutDependency={layoutDependency}
						layoutId={"chxEP1gyV"}
						ref={refBinding}
						style={{
							...style,
						}}
						{...addPropertyOverrides(
							{
								Cll_P8xj7: {
									"data-framer-name": "d2",
								},
								iaDtdDEWz: {
									"data-framer-name": "t2",
								},
								nVCMIMTYC: {
									"data-framer-name": "t1",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						{isDisplayed() && (
							<ComponentViewportProvider>
								<SmartComponentScopedContainer
									className={"framer-yvsrsi-container"}
									isAuthoredByUser={true}
									isModuleExternal={true}
									layoutDependency={layoutDependency}
									layoutId={"X6uNwSkov-container"}
									nodeId={"X6uNwSkov"}
									rendersWithMotion={true}
									scopeId={"GkYmXi5Sh"}
								>
									<Lottie
										height={"100%"}
										id={"X6uNwSkov"}
										isForwardsDirection={true}
										layoutId={"X6uNwSkov"}
										loop={false}
										pauseOnCanvas={true}
										playing={true}
										poster={"Auto"}
										posterProgress={0}
										progress={0}
										speed={1}
										srcType={"URL"}
										srcUrl={"https://cdn.lottielab.com/l/i36btTaxQPBkQ0.json"}
										style={{
											height: "100%",
											width: "100%",
										}}
										width={"100%"}
									/>
								</SmartComponentScopedContainer>
							</ComponentViewportProvider>
						)}
					</motion3.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css4 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-teFd7.framer-fdpgif, .framer-teFd7 .framer-fdpgif { display: block; }",
	".framer-teFd7.framer-10l54kp { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; min-height: 58px; min-width: 167px; overflow: hidden; padding: 0px; position: relative; width: min-content; }",
	".framer-teFd7 .framer-yvsrsi-container { flex: none; height: 58px; position: relative; width: 167px; }",
	".framer-teFd7.framer-v-vkfotw.framer-10l54kp, .framer-teFd7.framer-v-748nkg.framer-10l54kp { min-height: unset; min-width: unset; }",
	".framer-teFd7.framer-v-avwean.framer-10l54kp { min-height: 46px; min-width: 132px; }",
	".framer-teFd7.framer-v-748nkg .framer-yvsrsi-container { aspect-ratio: 2.8793103448275863 / 1; height: var(--framer-aspect-ratio-supported, 46px); width: 132px; }",
];
var FramerGkYmXi5Sh = withCSS2(Component2, css4, "framer-teFd7");
var stdin_default3 = FramerGkYmXi5Sh;
FramerGkYmXi5Sh.displayName = "SigningAnimation";
FramerGkYmXi5Sh.defaultProps = {
	height: 58,
	width: 167,
};
addPropertyControls2(FramerGkYmXi5Sh, {
	variant: {
		options: ["chxEP1gyV", "Cll_P8xj7", "nVCMIMTYC", "iaDtdDEWz"],
		optionTitles: ["d1", "d2", "t1", "t2"],
		title: "Variant",
		type: ControlType5.Enum,
	},
});
addFonts(
	FramerGkYmXi5Sh,
	[
		{
			explicitInter: true,
			fonts: [],
		},
		...LottieFonts,
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// /:https://framerusercontent.com/modules/wTpp1wwwVfHYBmoyBp0a/nzVotjQRdNFbpwduawzD/OY_lJGgs1.js
import { jsx as _jsx4, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts as addFonts2,
	addPropertyControls as addPropertyControls3,
	ControlType as ControlType6,
	cx as cx3,
	getLoadingLazyAtYPosition,
	Image as Image2,
	RichText,
	useComponentViewport as useComponentViewport2,
	useLocaleInfo as useLocaleInfo2,
	useVariantState as useVariantState2,
	withCSS as withCSS3,
} from "unframer";
import {
	LayoutGroup as LayoutGroup2,
	motion as motion4,
	MotionConfigContext as MotionConfigContext2,
} from "unframer";
import * as React5 from "react";
import { useRef as useRef6 } from "react";
var cycleOrder2 = ["wdQ7PZXlZ", "odjfdJpKe", "Geh5Vr6uT"];
var serializationHash2 = "framer-FJGKE";
var variantClassNames2 = {
	Geh5Vr6uT: "framer-v-iokqs5",
	odjfdJpKe: "framer-v-wni0qw",
	wdQ7PZXlZ: "framer-v-pkjgqp",
};
function addPropertyOverrides2(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition12 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition2 = ({ value: value2, children }) => {
	const config = React5.useContext(MotionConfigContext2);
	const transition = value2 ?? config.transition;
	const contextValue = React5.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext2.Provider value={contextValue}>
			{children}
		</MotionConfigContext2.Provider>
	);
};
var Variants2 = motion4.create(React5.Fragment);
var humanReadableVariantMap2 = {
	desktop: "wdQ7PZXlZ",
	mobile: "Geh5Vr6uT",
	tablet: "odjfdJpKe",
};
var getProps3 = ({ height: height2, id, uRL, width: width2, ...props }) => {
	return {
		...props,
		gAnoozadM: uRL ?? props.gAnoozadM ?? "signatureapi.com",
		variant:
			humanReadableVariantMap2[props.variant] ?? props.variant ?? "wdQ7PZXlZ",
	};
};
var createLayoutDependency2 = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component3 = /* @__PURE__ */ React5.forwardRef(function (props, ref) {
	const fallbackRef = useRef6(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React5.useId();
	const { activeLocale, setLocale } = useLocaleInfo2();
	const componentViewport = useComponentViewport2();
	const {
		style,
		className: className3,
		layoutId,
		variant,
		gAnoozadM,
		...restProps
	} = getProps3(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState2({
		cycleOrder: cycleOrder2,
		defaultVariant: "wdQ7PZXlZ",
		ref: refBinding,
		variant,
		variantClassNames: variantClassNames2,
	});
	const layoutDependency = createLayoutDependency2(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx3(serializationHash2, ...sharedStyleClassNames);
	const isDisplayed = () => {
		if (baseVariant === "Geh5Vr6uT") return false;
		return true;
	};
	return (
		<LayoutGroup2 id={layoutId ?? defaultLayoutId}>
			<Variants2 animate={variants} initial={false}>
				<Transition2 value={transition12}>
					<motion4.div
						{...restProps}
						{...gestureHandlers}
						className={cx3(
							scopingClassNames,
							"framer-pkjgqp",
							className3,
							classNames,
						)}
						data-border={true}
						data-framer-name={"desktop"}
						layoutDependency={layoutDependency}
						layoutId={"wdQ7PZXlZ"}
						ref={refBinding}
						style={{
							"--border-bottom-width": "1px",
							"--border-color": "rgb(224, 224, 224)",
							"--border-left-width": "0px",
							"--border-right-width": "0px",
							"--border-style": "solid",
							"--border-top-width": "0px",
							backgroundColor: "rgb(255, 255, 255)",
							...style,
						}}
						{...addPropertyOverrides2(
							{
								Geh5Vr6uT: {
									"data-framer-name": "mobile",
								},
								odjfdJpKe: {
									"data-framer-name": "tablet",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						{isDisplayed() && (
							<motion4.div
								className={"framer-65dcu6"}
								data-framer-name={"Frame 1649"}
								layoutDependency={layoutDependency}
								layoutId={"AbuA1U5oU"}
							>
								<Image2
									background={{
										alt: "",
										fit: "fill",
										loading: getLoadingLazyAtYPosition(
											(componentViewport?.y || 0) +
												(12 +
													((componentViewport?.height || 52) - 24 - 28) / 2) +
												0,
										),
										pixelHeight: 56,
										pixelWidth: 358,
										src: "https://framerusercontent.com/images/g18fWr452BcjrWRr7DHD2hE3M.png",
									}}
									className={"framer-bcj6be"}
									data-framer-name={"Frame 1649"}
									layoutDependency={layoutDependency}
									layoutId={"dYlFvZ63W"}
									{...addPropertyOverrides2(
										{
											odjfdJpKe: {
												background: {
													alt: "",
													fit: "fill",
													loading: getLoadingLazyAtYPosition(
														(componentViewport?.y || 0) +
															(12 +
																((componentViewport?.height || 44) - 24 - 22) /
																	2) +
															0,
													),
													pixelHeight: 56,
													pixelWidth: 358,
													src: "https://framerusercontent.com/images/g18fWr452BcjrWRr7DHD2hE3M.png",
												},
											},
										},
										baseVariant,
										gestureVariant,
									)}
								/>
							</motion4.div>
						)}
						<motion4.div
							className={"framer-mcfr"}
							data-framer-name={"Frame 10"}
							layoutDependency={layoutDependency}
							layoutId={"tfKQvPq9c"}
						>
							{isDisplayed() && (
								<motion4.div
									className={"framer-5ozyaa"}
									data-framer-name={"1"}
									layoutDependency={layoutDependency}
									layoutId={"qQAuWjrHN"}
									style={{
										borderBottomLeftRadius: 6,
										borderBottomRightRadius: 6,
										borderTopLeftRadius: 6,
										borderTopRightRadius: 6,
									}}
								>
									<Image2
										background={{
											alt: "",
											fit: "fill",
											loading: getLoadingLazyAtYPosition(
												(componentViewport?.y || 0) +
													(12 +
														((componentViewport?.height || 52) - 24 - 27.6) /
															2) +
													0.05 +
													5,
											),
											pixelHeight: 35,
											pixelWidth: 28,
											src: "https://framerusercontent.com/images/vcBBKyn5QlNgYQkIYoyIwpHfwfY.png",
										}}
										className={"framer-2hph0f"}
										data-framer-name={"\u{100668} 1"}
										layoutDependency={layoutDependency}
										layoutId={"XbUZiCpbG"}
										{...addPropertyOverrides2(
											{
												odjfdJpKe: {
													background: {
														alt: "",
														fit: "fill",
														loading: getLoadingLazyAtYPosition(
															(componentViewport?.y || 0) +
																(12 +
																	((componentViewport?.height || 44) -
																		24 -
																		26) /
																		2) +
																0.5 +
																5,
														),
														pixelHeight: 35,
														pixelWidth: 28,
														src: "https://framerusercontent.com/images/vcBBKyn5QlNgYQkIYoyIwpHfwfY.png",
													},
												},
											},
											baseVariant,
											gestureVariant,
										)}
									/>
								</motion4.div>
							)}
							<motion4.div
								className={"framer-1rwnlqf"}
								data-framer-name={"2"}
								layoutDependency={layoutDependency}
								layoutId={"nUs3cQ30x"}
								style={{
									backgroundColor: "rgba(0, 0, 0, 0.05)",
									borderBottomLeftRadius: 6,
									borderBottomRightRadius: 6,
									borderTopLeftRadius: 6,
									borderTopRightRadius: 6,
								}}
							>
								<motion4.div
									className={"framer-qrf1i1"}
									data-framer-name={"Frame 8"}
									layoutDependency={layoutDependency}
									layoutId={"sP5cezrIu"}
								>
									<Image2
										background={{
											alt: "",
											fit: "fill",
											loading: getLoadingLazyAtYPosition(
												(componentViewport?.y || 0) +
													(12 +
														((componentViewport?.height || 52) - 24 - 27.6) /
															2) +
													0 +
													6 +
													0 +
													1.8,
											),
											pixelHeight: 24,
											pixelWidth: 16,
											src: "https://framerusercontent.com/images/QH3lvBMyV6sjL42rzWFzVP6mhg0.png",
										}}
										className={"framer-m8k9ne"}
										data-framer-name={"Lock"}
										layoutDependency={layoutDependency}
										layoutId={"VR_ZCrLer"}
										{...addPropertyOverrides2(
											{
												Geh5Vr6uT: {
													background: {
														alt: "",
														fit: "fill",
														loading: getLoadingLazyAtYPosition(
															(componentViewport?.y || 0) +
																(9 +
																	((componentViewport?.height || 44) -
																		18 -
																		26) /
																		2) +
																0 +
																6 +
																-0.8 +
																1.8,
														),
														pixelHeight: 24,
														pixelWidth: 16,
														src: "https://framerusercontent.com/images/QH3lvBMyV6sjL42rzWFzVP6mhg0.png",
													},
												},
												odjfdJpKe: {
													background: {
														alt: "",
														fit: "fill",
														loading: getLoadingLazyAtYPosition(
															(componentViewport?.y || 0) +
																(12 +
																	((componentViewport?.height || 44) -
																		24 -
																		26) /
																		2) +
																0 +
																6 +
																-0.8 +
																1.8,
														),
														pixelHeight: 24,
														pixelWidth: 16,
														src: "https://framerusercontent.com/images/QH3lvBMyV6sjL42rzWFzVP6mhg0.png",
													},
												},
											},
											baseVariant,
											gestureVariant,
										)}
									/>
									<RichText
										__fromCanvasComponent={true}
										className={"framer-7gdu1n"}
										data-framer-name={"Text"}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"vu7iPzqKC"}
										style={{
											"--extracted-r6o4lv": "rgb(76, 76, 76)",
											"--framer-paragraph-spacing": "0px",
										}}
										text={gAnoozadM}
										verticalAlignment={"center"}
										withExternalLayout={true}
									>
										<React5.Fragment>
											<motion4.p
												style={{
													"--framer-font-size": "13px",
													"--framer-text-color":
														"var(--extracted-r6o4lv, rgb(76, 76, 76))",
												}}
											>
												{"signatureapi.com"}
											</motion4.p>
										</React5.Fragment>
									</RichText>
								</motion4.div>
							</motion4.div>
							{isDisplayed() && (
								<motion4.div
									className={"framer-p96jf3"}
									data-framer-name={"SPACER"}
									layoutDependency={layoutDependency}
									layoutId={"OTnRXfKJ7"}
									style={{
										borderBottomLeftRadius: 6,
										borderBottomRightRadius: 6,
										borderTopLeftRadius: 6,
										borderTopRightRadius: 6,
									}}
								/>
							)}
						</motion4.div>
						{isDisplayed() && (
							<motion4.div
								className={"framer-k5bko7"}
								data-framer-name={"Toolbar Group"}
								layoutDependency={layoutDependency}
								layoutId={"bz2DD1mI_"}
							>
								<Image2
									background={{
										alt: "",
										fit: "fill",
										loading: getLoadingLazyAtYPosition(
											(componentViewport?.y || 0) +
												(12 +
													((componentViewport?.height || 52) - 24 - 28) / 2) +
												0,
										),
										pixelHeight: 56,
										pixelWidth: 313,
										src: "https://framerusercontent.com/images/55pjnRuv4aOhxqGg32DIoFs.png",
									}}
									className={"framer-rvl9ir"}
									data-framer-name={"Toolbar Group"}
									layoutDependency={layoutDependency}
									layoutId={"ytAvRmCRr"}
									{...addPropertyOverrides2(
										{
											odjfdJpKe: {
												background: {
													alt: "",
													fit: "fill",
													loading: getLoadingLazyAtYPosition(
														(componentViewport?.y || 0) +
															(12 +
																((componentViewport?.height || 44) - 24 - 22) /
																	2) +
															0,
													),
													pixelHeight: 56,
													pixelWidth: 313,
													src: "https://framerusercontent.com/images/55pjnRuv4aOhxqGg32DIoFs.png",
												},
											},
										},
										baseVariant,
										gestureVariant,
									)}
								/>
							</motion4.div>
						)}
					</motion4.div>
				</Transition2>
			</Variants2>
		</LayoutGroup2>
	);
});
var css5 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-FJGKE.framer-j4qsm6, .framer-FJGKE .framer-j4qsm6 { display: block; }",
	".framer-FJGKE.framer-pkjgqp { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 20px; height: min-content; justify-content: flex-start; overflow: visible; padding: 12px 16px 12px 16px; position: relative; width: 1256px; }",
	".framer-FJGKE .framer-65dcu6 { align-content: center; align-items: center; display: flex; flex: 1 0 0px; flex-direction: row; flex-wrap: nowrap; gap: 16px; height: min-content; justify-content: flex-start; overflow: visible; padding: 0px; position: relative; width: 1px; }",
	".framer-FJGKE .framer-bcj6be { aspect-ratio: 6.392857142857143 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 28px); position: relative; width: 179px; }",
	".framer-FJGKE .framer-mcfr { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 16px; height: min-content; justify-content: flex-start; overflow: hidden; padding: 0px; position: relative; width: min-content; }",
	".framer-FJGKE .framer-5ozyaa { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: flex-start; overflow: visible; padding: 5px 10px 5px 10px; position: relative; width: 32px; }",
	".framer-FJGKE .framer-2hph0f { aspect-ratio: 0.8 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 18px); position: relative; width: 14px; }",
	".framer-FJGKE .framer-1rwnlqf { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: visible; padding: 6px 160px 6px 160px; position: relative; width: 320px; }",
	".framer-FJGKE .framer-qrf1i1 { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 6px; height: min-content; justify-content: flex-start; overflow: hidden; padding: 0px; position: relative; width: min-content; }",
	".framer-FJGKE .framer-m8k9ne { aspect-ratio: 0.6666666666666666 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 12px); position: relative; width: 8px; }",
	".framer-FJGKE .framer-7gdu1n { flex: none; height: auto; position: relative; white-space: pre; width: auto; }",
	".framer-FJGKE .framer-p96jf3 { align-content: flex-start; align-items: flex-start; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: flex-start; min-height: 28px; min-width: 32px; overflow: visible; padding: 10px; position: relative; width: min-content; }",
	".framer-FJGKE .framer-k5bko7 { align-content: center; align-items: center; display: flex; flex: 1 0 0px; flex-direction: row; flex-wrap: nowrap; gap: 8px; height: min-content; justify-content: flex-end; overflow: hidden; padding: 0px; position: relative; width: 1px; }",
	".framer-FJGKE .framer-rvl9ir { aspect-ratio: 5.589285714285714 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 28px); position: relative; width: 157px; }",
	".framer-FJGKE.framer-v-wni0qw.framer-pkjgqp { height: 44px; }",
	".framer-FJGKE.framer-v-wni0qw .framer-bcj6be { height: var(--framer-aspect-ratio-supported, 22px); width: 141px; }",
	".framer-FJGKE.framer-v-wni0qw .framer-2hph0f { height: var(--framer-aspect-ratio-supported, 15px); width: 12px; }",
	".framer-FJGKE.framer-v-wni0qw .framer-1rwnlqf { height: 26px; padding: 6px 40px 6px 40px; width: 240px; }",
	".framer-FJGKE.framer-v-wni0qw .framer-rvl9ir { height: var(--framer-aspect-ratio-supported, 22px); width: 123px; }",
	".framer-FJGKE.framer-v-iokqs5.framer-pkjgqp { height: 44px; padding: 9px; }",
	".framer-FJGKE.framer-v-iokqs5 .framer-mcfr { flex: 1 0 0px; width: 1px; }",
	".framer-FJGKE.framer-v-iokqs5 .framer-1rwnlqf { flex: 1 0 0px; height: 26px; width: 1px; }",
	'.framer-FJGKE[data-border="true"]::after, .framer-FJGKE [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var FramerOY_lJGgs1 = withCSS3(Component3, css5, "framer-FJGKE");
var stdin_default4 = FramerOY_lJGgs1;
FramerOY_lJGgs1.displayName = "UIBar";
FramerOY_lJGgs1.defaultProps = {
	height: 52,
	width: 1256,
};
addPropertyControls3(FramerOY_lJGgs1, {
	variant: {
		options: ["wdQ7PZXlZ", "odjfdJpKe", "Geh5Vr6uT"],
		optionTitles: ["desktop", "tablet", "mobile"],
		title: "Variant",
		type: ControlType6.Enum,
	},
	gAnoozadM: {
		defaultValue: "signatureapi.com",
		displayTextArea: false,
		title: "URL",
		type: ControlType6.String,
	},
});
addFonts2(
	FramerOY_lJGgs1,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://framerusercontent.com/assets/vQyevYAyHtARFwPqUzQGpnDs.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
					weight: "400",
				},
			],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// /:https://framer.com/m/signing-example-d8qj.js
var SigningAnimationFonts = getFonts2(stdin_default3);
var SigningAnimationWithVariantAppearEffect =
	withVariantAppearEffect(stdin_default3);
var LightFonts = getFonts2(stdin_default2);
var UIBarFonts = getFonts2(stdin_default4);
var LottieFonts2 = getFonts2(Lottie);
var cycleOrder3 = ["g05BT1N9r", "jHFqchXdJ", "pVaOIwcST"];
var serializationHash3 = "framer-eeM2F";
var variantClassNames3 = {
	g05BT1N9r: "framer-v-1nqriq4",
	jHFqchXdJ: "framer-v-q2azjv",
	pVaOIwcST: "framer-v-vf67b6",
};
function addPropertyOverrides3(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition13 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition3 = ({ value: value2, children }) => {
	const config = React6.useContext(MotionConfigContext3);
	const transition = value2 ?? config.transition;
	const contextValue = React6.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext3.Provider value={contextValue}>
			{children}
		</MotionConfigContext3.Provider>
	);
};
var Variants3 = motion5.create(React6.Fragment);
var humanReadableVariantMap3 = {
	Desktop: "g05BT1N9r",
	Phone: "pVaOIwcST",
	Tablet: "jHFqchXdJ",
};
var getProps4 = ({
	height: height2,
	id,
	scrollSection,
	width: width2,
	...props
}) => {
	return {
		...props,
		tuEL60xnw: scrollSection ?? props.tuEL60xnw,
		variant:
			humanReadableVariantMap3[props.variant] ?? props.variant ?? "g05BT1N9r",
	};
};
var createLayoutDependency3 = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component4 = /* @__PURE__ */ React6.forwardRef(function (props, ref) {
	const fallbackRef = useRef8(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React6.useId();
	const { activeLocale, setLocale } = useLocaleInfo3();
	const componentViewport = useComponentViewport3();
	const {
		style,
		className: className3,
		layoutId,
		variant,
		tuEL60xnw,
		...restProps
	} = getProps4(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState3({
		cycleOrder: cycleOrder3,
		defaultVariant: "g05BT1N9r",
		ref: refBinding,
		variant,
		variantClassNames: variantClassNames3,
	});
	const layoutDependency = createLayoutDependency3(props, variants);
	const sharedStyleClassNames = [className2, className];
	const scopingClassNames = cx4(serializationHash3, ...sharedStyleClassNames);
	const ref1 = React6.useRef(null);
	return (
		<LayoutGroup3 id={layoutId ?? defaultLayoutId}>
			<Variants3 animate={variants} initial={false}>
				<Transition3 value={transition13}>
					<motion5.div
						{...restProps}
						{...gestureHandlers}
						className={cx4(
							scopingClassNames,
							"framer-1nqriq4",
							className3,
							classNames,
						)}
						data-framer-name={"Desktop"}
						layoutDependency={layoutDependency}
						layoutId={"g05BT1N9r"}
						ref={refBinding}
						style={{
							...style,
						}}
						{...addPropertyOverrides3(
							{
								jHFqchXdJ: {
									"data-framer-name": "Tablet",
								},
								pVaOIwcST: {
									"data-framer-name": "Phone",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<motion5.div
							className={"framer-1d2bi81"}
							data-border={true}
							layoutDependency={layoutDependency}
							layoutId={"BC1I1KRhM"}
							style={{
								"--border-bottom-width": "0px",
								"--border-color":
									"var(--token-bbd017ff-ff6f-4c0d-8247-5a16b6f347a5, rgb(224, 227, 233))",
								"--border-left-width": "1px",
								"--border-right-width": "1px",
								"--border-style": "solid",
								"--border-top-width": "0px",
							}}
						>
							<motion5.div
								className={"framer-98t8fw"}
								data-border={true}
								data-framer-name={"container"}
								layoutDependency={layoutDependency}
								layoutId={"YWGe1EzAP"}
								style={{
									"--border-bottom-width": "1px",
									"--border-color":
										"var(--token-bbd017ff-ff6f-4c0d-8247-5a16b6f347a5, rgb(224, 227, 233))",
									"--border-left-width": "0px",
									"--border-right-width": "0px",
									"--border-style": "dashed",
									"--border-top-width": "0px",
								}}
							>
								<Image3
									background={{
										alt: "",
										fit: "fill",
										intrinsicHeight: 162,
										intrinsicWidth: 281,
										loading: getLoadingLazyAtYPosition2(
											(componentViewport?.y || 0) +
												0 +
												(((componentViewport?.height || 200) - 0 - 1125) / 2 +
													0 +
													0) +
												0 +
												0 +
												80 +
												0,
										),
										pixelHeight: 324,
										pixelWidth: 562,
										sizes: "281px",
										src: "https://framerusercontent.com/images/ShxHQznGC3EDn4BrvJVMjxhWgbs.png?scale-down-to=512&width=562&height=324",
										srcSet:
											"https://framerusercontent.com/images/ShxHQznGC3EDn4BrvJVMjxhWgbs.png?scale-down-to=512&width=562&height=324 512w,https://framerusercontent.com/images/ShxHQznGC3EDn4BrvJVMjxhWgbs.png?width=562&height=324 562w",
									}}
									className={"framer-g5okox"}
									data-framer-name={"Img-signing"}
									layoutDependency={layoutDependency}
									layoutId={"Qcza0puBC"}
									{...addPropertyOverrides3(
										{
											jHFqchXdJ: {
												background: {
													alt: "",
													fit: "fill",
													intrinsicHeight: 162,
													intrinsicWidth: 281,
													loading: getLoadingLazyAtYPosition2(
														(componentViewport?.y || 0) +
															0 +
															(((componentViewport?.height || 200) - 0 - 1057) /
																2 +
																0 +
																0) +
															0 +
															0 +
															64 +
															0,
													),
													pixelHeight: 324,
													pixelWidth: 562,
													sizes: "208.1481px",
													src: "https://framerusercontent.com/images/ShxHQznGC3EDn4BrvJVMjxhWgbs.png?scale-down-to=512&width=562&height=324",
													srcSet:
														"https://framerusercontent.com/images/ShxHQznGC3EDn4BrvJVMjxhWgbs.png?scale-down-to=512&width=562&height=324 512w,https://framerusercontent.com/images/ShxHQznGC3EDn4BrvJVMjxhWgbs.png?width=562&height=324 562w",
												},
											},
											pVaOIwcST: {
												background: {
													alt: "",
													fit: "fill",
													intrinsicHeight: 162,
													intrinsicWidth: 281,
													loading: getLoadingLazyAtYPosition2(
														(componentViewport?.y || 0) +
															0 +
															(((componentViewport?.height || 200) - 0 - 1091) /
																2 +
																0 +
																0) +
															0 +
															0 +
															64 +
															0,
													),
													pixelHeight: 324,
													pixelWidth: 562,
													sizes: "166.5185px",
													src: "https://framerusercontent.com/images/ShxHQznGC3EDn4BrvJVMjxhWgbs.png?scale-down-to=512&width=562&height=324",
													srcSet:
														"https://framerusercontent.com/images/ShxHQznGC3EDn4BrvJVMjxhWgbs.png?scale-down-to=512&width=562&height=324 512w,https://framerusercontent.com/images/ShxHQznGC3EDn4BrvJVMjxhWgbs.png?width=562&height=324 562w",
												},
											},
										},
										baseVariant,
										gestureVariant,
									)}
								/>
								<motion5.div
									className={"framer-cj55to"}
									data-framer-name={"text"}
									layoutDependency={layoutDependency}
									layoutId={"NcgAk7C00"}
								>
									<motion5.div
										className={"framer-1l44814"}
										data-framer-name={"heading"}
										layoutDependency={layoutDependency}
										layoutId={"t33fwRFZ2"}
									>
										<RichText2
											__fromCanvasComponent={true}
											className={"framer-1tcyyc0"}
											data-framer-name={"Best in class"}
											fonts={["Inter"]}
											layoutDependency={layoutDependency}
											layoutId={"MWaM6KMwT"}
											style={{
												"--framer-paragraph-spacing": "0px",
											}}
											verticalAlignment={"top"}
											withExternalLayout={true}
										>
											<React6.Fragment>
												<motion5.h2
													className={"framer-styles-preset-8fcfjf"}
													data-styles-preset={"wbNIgsWJm"}
												>
													{"Best in class"}
												</motion5.h2>
											</React6.Fragment>
										</RichText2>
										<ComponentViewportProvider2
											height={58}
											y={
												(componentViewport?.y || 0) +
												0 +
												(((componentViewport?.height || 200) - 0 - 1125) / 2 +
													0 +
													0) +
												0 +
												0 +
												80 +
												182 +
												0 +
												0 +
												0
											}
											{...addPropertyOverrides3(
												{
													jHFqchXdJ: {
														height: 46,
														y:
															(componentViewport?.y || 0) +
															0 +
															(((componentViewport?.height || 200) - 0 - 1057) /
																2 +
																0 +
																0) +
															0 +
															0 +
															64 +
															140 +
															0 +
															0 +
															1,
													},
													pVaOIwcST: {
														y:
															(componentViewport?.y || 0) +
															0 +
															(((componentViewport?.height || 200) - 0 - 1091) /
																2 +
																0 +
																0) +
															0 +
															0 +
															64 +
															116 +
															0 +
															0 +
															0 +
															48,
													},
												},
												baseVariant,
												gestureVariant,
											)}
										>
											<SmartComponentScopedContainer2
												className={"framer-j0e5m5-container"}
												layoutDependency={layoutDependency}
												layoutId={"DmBCgbSn6-container"}
												nodeId={"DmBCgbSn6"}
												rendersWithMotion={true}
												scopeId={"brd4H25qP"}
											>
												<SigningAnimationWithVariantAppearEffect
													__framer__animateOnce={true}
													__framer__targets={[
														{
															ref: tuEL60xnw,
															target: "Cll_P8xj7",
														},
													]}
													__framer__threshold={0.5}
													__framer__variantAppearEffectEnabled={true}
													height={"100%"}
													id={"DmBCgbSn6"}
													layoutId={"DmBCgbSn6"}
													variant={"chxEP1gyV"}
													width={"100%"}
													{...addPropertyOverrides3(
														{
															jHFqchXdJ: {
																__framer__targets: [
																	{
																		ref: ref1,
																		target: "iaDtdDEWz",
																	},
																],
																style: {
																	height: "100%",
																},
																variant: "nVCMIMTYC",
															},
															pVaOIwcST: {
																__framer__targets: [
																	{
																		ref: ref1,
																		target: "iaDtdDEWz",
																	},
																],
																variant: "nVCMIMTYC",
															},
														},
														baseVariant,
														gestureVariant,
													)}
												/>
											</SmartComponentScopedContainer2>
										</ComponentViewportProvider2>
										<RichText2
											__fromCanvasComponent={true}
											className={"framer-5vu3hp"}
											data-framer-name={"experience"}
											fonts={["Inter"]}
											layoutDependency={layoutDependency}
											layoutId={"Jar34h4IZ"}
											style={{
												"--framer-paragraph-spacing": "0px",
											}}
											verticalAlignment={"top"}
											withExternalLayout={true}
										>
											<React6.Fragment>
												<motion5.h2
													className={"framer-styles-preset-8fcfjf"}
													data-styles-preset={"wbNIgsWJm"}
												>
													{"experience"}
												</motion5.h2>
											</React6.Fragment>
										</RichText2>
									</motion5.div>
									<RichText2
										__fromCanvasComponent={true}
										className={"framer-1g2c7cq"}
										data-framer-name={
											"Make it easy to your signers to sign using our minimal signing interface, designed to make the signers focused to the task at."
										}
										fonts={["Inter"]}
										layoutDependency={layoutDependency}
										layoutId={"LLJ8Cdd8E"}
										style={{
											"--framer-paragraph-spacing": "0px",
										}}
										verticalAlignment={"top"}
										withExternalLayout={true}
										{...addPropertyOverrides3(
											{
												pVaOIwcST: {
													children: (
														<React6.Fragment>
															<motion5.p
																className={"framer-styles-preset-1aptoqg"}
																data-styles-preset={"j1wERBDyy"}
															>
																{
																	"Make it easy to your signers to sign using our minimal signing interface, designed to make the signers focused to the task at."
																}
															</motion5.p>
														</React6.Fragment>
													),
												},
											},
											baseVariant,
											gestureVariant,
										)}
									>
										<React6.Fragment>
											<motion5.p
												className={"framer-styles-preset-1aptoqg"}
												data-styles-preset={"j1wERBDyy"}
											>
												{
													"Make it easy to your signers to sign using our minimal signing interface,"
												}
												<motion5.br />
												{"designed to make the signers focused to the task at."}
											</motion5.p>
										</React6.Fragment>
									</RichText2>
								</motion5.div>
							</motion5.div>
							<motion5.div
								className={"framer-vb05cp"}
								data-border={true}
								data-framer-name={"mockup"}
								layoutDependency={layoutDependency}
								layoutId={"etPT5sMAj"}
								style={{
									"--border-bottom-width": "1px",
									"--border-color":
										"var(--token-bbd017ff-ff6f-4c0d-8247-5a16b6f347a5, rgb(224, 227, 233))",
									"--border-left-width": "0px",
									"--border-right-width": "0px",
									"--border-style": "solid",
									"--border-top-width": "0px",
								}}
							>
								{_jsx5(stdin_default2, {
									animated: true,
									className: "framer-1a3odsa",
									layoutDependency,
									layoutId: "t2wqEiPi5",
								})}
								<motion5.div
									className={"framer-hphawj"}
									data-border={true}
									data-framer-name={"ui window"}
									layoutDependency={layoutDependency}
									layoutId={"BhC_f7uAl"}
									style={{
										"--border-bottom-width": "1px",
										"--border-color":
											"var(--token-bbd017ff-ff6f-4c0d-8247-5a16b6f347a5, rgb(224, 227, 233))",
										"--border-left-width": "1px",
										"--border-right-width": "1px",
										"--border-style": "solid",
										"--border-top-width": "1px",
										backgroundColor:
											"var(--token-98ef648e-cc16-4e93-a787-b5e6b5bda39b, rgb(255, 255, 255))",
										borderBottomLeftRadius: 12,
										borderBottomRightRadius: 12,
										borderTopLeftRadius: 12,
										borderTopRightRadius: 12,
										boxShadow:
											"0px 3px 6px 0px rgba(0, 0, 0, 0.03), 0px 10px 10px 0px rgba(0, 0, 0, 0.03), 0px 23px 14px 0px rgba(0, 0, 0, 0.02), 0px 41px 16px 0px rgba(0, 0, 0, 0), 0px 63px 18px 0px rgba(0, 0, 0, 0)",
									}}
								>
									<ComponentViewportProvider2
										height={52}
										width={`calc(min(${componentViewport?.width || "100vw"} - 80px, 1360px) - 64px)`}
										y={
											(componentViewport?.y || 0) +
											0 +
											(((componentViewport?.height || 200) - 0 - 1125) / 2 +
												0 +
												0) +
											0 +
											508 +
											32 +
											0 +
											0 +
											0
										}
										{...addPropertyOverrides3(
											{
												jHFqchXdJ: {
													width: `calc(min(${componentViewport?.width || "100vw"} - 40px, 1360px) - 64px)`,
													y:
														(componentViewport?.y || 0) +
														0 +
														(((componentViewport?.height || 200) - 0 - 1057) /
															2 +
															0 +
															0) +
														0 +
														440 +
														32 +
														0 +
														0 +
														0,
												},
												pVaOIwcST: {
													width: `calc(min(${componentViewport?.width || "100vw"} - 8px, 1360px) - 32px)`,
													y:
														(componentViewport?.y || 0) +
														0 +
														(((componentViewport?.height || 200) - 0 - 1091) /
															2 +
															0 +
															0) +
														0 +
														506 +
														16 +
														0 +
														0 +
														0,
												},
											},
											baseVariant,
											gestureVariant,
										)}
									>
										<SmartComponentScopedContainer2
											className={"framer-1qt3g42-container"}
											layoutDependency={layoutDependency}
											layoutId={"IXr6DHaXh-container"}
											nodeId={"IXr6DHaXh"}
											rendersWithMotion={true}
											scopeId={"brd4H25qP"}
										>
											{_jsx5(stdin_default4, {
												gAnoozadM: "signatureapi.com",
												height: "100%",
												id: "IXr6DHaXh",
												layoutId: "IXr6DHaXh",
												style: {
													width: "100%",
												},
												variant: "wdQ7PZXlZ",
												width: "100%",
												...addPropertyOverrides3(
													{
														pVaOIwcST: {
															variant: "Geh5Vr6uT",
														},
													},
													baseVariant,
													gestureVariant,
												),
											})}
										</SmartComponentScopedContainer2>
									</ComponentViewportProvider2>
									<motion5.div
										className={"framer-bmtr"}
										data-framer-name={"embed-container"}
										layoutDependency={layoutDependency}
										layoutId={"IZjHeqCt7"}
										style={{
											backgroundColor:
												"var(--token-e5fe2609-1439-4485-a4f1-f57c2e018558, rgb(249, 249, 249))",
										}}
									>
										<ComponentViewportProvider2>
											<SmartComponentScopedContainer2
												className={"framer-16cx59s-container"}
												isAuthoredByUser={true}
												isModuleExternal={true}
												layoutDependency={layoutDependency}
												layoutId={"v6XEfo01S-container"}
												nodeId={"v6XEfo01S"}
												rendersWithMotion={true}
												scopeId={"brd4H25qP"}
											>
												<Lottie
													height={"100%"}
													id={"v6XEfo01S"}
													isForwardsDirection={true}
													layoutId={"v6XEfo01S"}
													loop={true}
													pauseOnCanvas={true}
													playing={true}
													poster={"Auto"}
													posterProgress={0}
													progress={0}
													speed={1}
													srcType={"URL"}
													srcUrl={
														"https://cdn.lottielab.com/l/A7C4pZ778mz5jL.json"
													}
													style={{
														height: "100%",
														width: "100%",
													}}
													width={"100%"}
												/>
											</SmartComponentScopedContainer2>
										</ComponentViewportProvider2>
									</motion5.div>
								</motion5.div>
							</motion5.div>
						</motion5.div>
					</motion5.div>
				</Transition3>
			</Variants3>
		</LayoutGroup3>
	);
});
var css6 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-eeM2F.framer-fdvzfg, .framer-eeM2F .framer-fdvzfg { display: block; }",
	".framer-eeM2F.framer-1nqriq4 { align-content: center; align-items: center; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 0px; height: min-content; justify-content: center; overflow: visible; padding: 0px 40px 0px 40px; position: relative; width: 1200px; }",
	".framer-eeM2F .framer-1d2bi81 { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 0px; height: min-content; justify-content: center; max-width: 1360px; overflow: hidden; padding: 0px; position: relative; width: 100%; }",
	".framer-eeM2F .framer-98t8fw { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 20px; height: min-content; justify-content: center; max-width: 1360px; overflow: visible; padding: 80px 120px 48px 120px; position: relative; width: 100%; }",
	".framer-eeM2F .framer-g5okox { aspect-ratio: 1.7345679012345678 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 162px); overflow: visible; position: relative; width: 281px; }",
	".framer-eeM2F .framer-cj55to { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 20px; height: min-content; justify-content: flex-start; overflow: visible; padding: 0px; position: relative; width: min-content; }",
	".framer-eeM2F .framer-1l44814 { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 12px; height: min-content; justify-content: center; overflow: visible; padding: 0px; position: relative; width: min-content; }",
	".framer-eeM2F .framer-1tcyyc0, .framer-eeM2F .framer-5vu3hp { flex: none; height: auto; position: relative; white-space: pre; width: auto; }",
	".framer-eeM2F .framer-j0e5m5-container { flex: none; height: auto; position: relative; width: auto; }",
	".framer-eeM2F .framer-1g2c7cq { flex: none; height: auto; position: relative; white-space: pre-wrap; width: 720px; word-break: break-word; word-wrap: break-word; }",
	".framer-eeM2F .framer-vb05cp { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 20px; height: min-content; justify-content: center; max-width: 1360px; overflow: hidden; padding: 32px; position: relative; width: 100%; }",
	".framer-eeM2F .framer-1a3odsa { flex: none; height: var(--framer-aspect-ratio-supported, 840px); left: 0px; position: absolute; top: 0px; width: 1360px; z-index: 0; }",
	".framer-eeM2F .framer-hphawj { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 0px; height: min-content; justify-content: flex-start; overflow: hidden; padding: 0px; position: relative; width: 100%; will-change: var(--framer-will-change-override, transform); }",
	".framer-eeM2F .framer-1qt3g42-container { flex: none; height: auto; position: relative; width: 100%; }",
	".framer-eeM2F .framer-bmtr { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 24px; height: min-content; justify-content: flex-start; overflow: hidden; padding: 0px; position: relative; width: 100%; }",
	".framer-eeM2F .framer-16cx59s-container { aspect-ratio: 1.840319361277445 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 574px); position: relative; width: 100%; }",
	".framer-eeM2F.framer-v-q2azjv.framer-1nqriq4 { padding: 0px 20px 0px 20px; width: 800px; }",
	".framer-eeM2F.framer-v-q2azjv .framer-98t8fw { padding: 64px 120px 48px 120px; }",
	".framer-eeM2F.framer-v-q2azjv .framer-g5okox { height: var(--framer-aspect-ratio-supported, 120px); width: 208px; }",
	".framer-eeM2F.framer-v-q2azjv .framer-j0e5m5-container { height: 46px; }",
	".framer-eeM2F.framer-v-q2azjv .framer-1g2c7cq { width: 560px; }",
	".framer-eeM2F.framer-v-q2azjv .framer-vb05cp { max-width: unset; }",
	".framer-eeM2F.framer-v-q2azjv .framer-1a3odsa, .framer-eeM2F.framer-v-vf67b6 .framer-1a3odsa { height: var(--framer-aspect-ratio-supported, 834px); }",
	".framer-eeM2F.framer-v-q2azjv .framer-16cx59s-container, .framer-eeM2F.framer-v-vf67b6 .framer-16cx59s-container { height: var(--framer-aspect-ratio-supported, 109px); }",
	".framer-eeM2F.framer-v-vf67b6.framer-1nqriq4 { padding: 0px 4px 0px 4px; width: 390px; }",
	".framer-eeM2F.framer-v-vf67b6 .framer-98t8fw { justify-content: flex-start; padding: 64px 24px 32px 24px; }",
	".framer-eeM2F.framer-v-vf67b6 .framer-g5okox { height: var(--framer-aspect-ratio-supported, 96px); width: 167px; }",
	".framer-eeM2F.framer-v-vf67b6 .framer-cj55to, .framer-eeM2F.framer-v-vf67b6 .framer-1g2c7cq { width: 100%; }",
	".framer-eeM2F.framer-v-vf67b6 .framer-1l44814 { flex-direction: column; gap: 0px; }",
	".framer-eeM2F.framer-v-vf67b6 .framer-vb05cp { padding: 16px; }",
	...css2,
	...css,
	'.framer-eeM2F[data-border="true"]::after, .framer-eeM2F [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var Framerbrd4H25qP = withCSS4(Component4, css6, "framer-eeM2F");
var stdin_default5 = Framerbrd4H25qP;
Framerbrd4H25qP.displayName = "signing-example";
Framerbrd4H25qP.defaultProps = {
	height: 1126,
	width: 1200,
};
addPropertyControls4(Framerbrd4H25qP, {
	variant: {
		options: ["g05BT1N9r", "jHFqchXdJ", "pVaOIwcST"],
		optionTitles: ["Desktop", "Tablet", "Phone"],
		title: "Variant",
		type: ControlType7.Enum,
	},
	tuEL60xnw: {
		title: "Scroll Section",
		type: ControlType7.ScrollSectionRef,
	},
});
addFonts3(
	Framerbrd4H25qP,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2070, U+2074-207E, U+2080-208E, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://framerusercontent.com/assets/GrgcKwrN6d3Uz8EwcLHZxwEfC4.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
					weight: "400",
				},
			],
		},
		...SigningAnimationFonts,
		...LightFonts,
		...UIBarFonts,
		...LottieFonts2,
		...getFontsFromSharedStyle(fonts2),
		...getFontsFromSharedStyle(fonts),
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:signing-example
import { WithFramerBreakpoints } from "unframer";

// virtual:__routes
var routes = {
	DhvwGaaou: {
		path: "/home-backup",
	},
	DiKMHAohF: {
		path: "/blog/:slug",
	},
	I4RMCmkQd: {
		path: "/e-signature-news",
	},
	KSjCJwy_s: {
		path: "/blog",
	},
	NukTy_VHU: {
		path: "/home-2",
	},
	OL4NtcSBu: {
		path: "/pricing",
	},
	QqS4d__RJ: {
		path: "/changelog",
	},
	augiA20Il: {
		path: "/",
	},
	elJhlphhA: {
		path: "/pricing-3",
	},
	kw24qmVnO: {
		path: "/pricing-2",
	},
	pCsjntyo1: {
		path: "/e-signature-news-2",
	},
	wKxO4rmxX: {
		path: "/home-for-export",
	},
};

// virtual:signing-example
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "pVaOIwcST",
	md: "jHFqchXdJ",
	xl: "g05BT1N9r",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"ca611bf9ae534859de674b0501c1ab4e651b1f0645f4e150d7cde31ac347548b"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default5, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders SigningExampleFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"ca611bf9ae534859de674b0501c1ab4e651b1f0645f4e150d7cde31ac347548b"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default5}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default5);
var signing_example_default = ComponentWithRoot;
export { signing_example_default as default };
/*!
 Transformation Matrix v2.0
 (c) Epistemex 2014-2015
 www.epistemex.com
 By Ken Fyrstenberg
 Contributions by leeoniya.
 License: MIT, header required.
 */
